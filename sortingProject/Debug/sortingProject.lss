
sortingProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  000020f4  00002188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000041b  008001e4  008001e4  0000226c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000226c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00002308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000051f7  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a9f  00000000  00000000  000077c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a4d  00000000  00000000  00009266  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000858  00000000  00000000  0000acb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001167  00000000  00000000  0000b50c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023fc  00000000  00000000  0000c673  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000ea6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ca c2       	rjmp	.+1428   	; 0x596 <__ctors_end>
       2:	00 00       	nop
       4:	f1 c2       	rjmp	.+1506   	; 0x5e8 <__bad_interrupt>
       6:	00 00       	nop
       8:	ef c2       	rjmp	.+1502   	; 0x5e8 <__bad_interrupt>
       a:	00 00       	nop
       c:	2b c4       	rjmp	.+2134   	; 0x864 <__vector_3>
       e:	00 00       	nop
      10:	d0 c4       	rjmp	.+2464   	; 0x9b2 <__vector_4>
      12:	00 00       	nop
      14:	e9 c2       	rjmp	.+1490   	; 0x5e8 <__bad_interrupt>
      16:	00 00       	nop
      18:	e7 c2       	rjmp	.+1486   	; 0x5e8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e5 c2       	rjmp	.+1482   	; 0x5e8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e3 c2       	rjmp	.+1478   	; 0x5e8 <__bad_interrupt>
      22:	00 00       	nop
      24:	e1 c2       	rjmp	.+1474   	; 0x5e8 <__bad_interrupt>
      26:	00 00       	nop
      28:	df c2       	rjmp	.+1470   	; 0x5e8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	dd c2       	rjmp	.+1466   	; 0x5e8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	db c2       	rjmp	.+1462   	; 0x5e8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d9 c2       	rjmp	.+1458   	; 0x5e8 <__bad_interrupt>
      36:	00 00       	nop
      38:	d7 c2       	rjmp	.+1454   	; 0x5e8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d5 c2       	rjmp	.+1450   	; 0x5e8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d3 c2       	rjmp	.+1446   	; 0x5e8 <__bad_interrupt>
      42:	00 00       	nop
      44:	d1 c2       	rjmp	.+1442   	; 0x5e8 <__bad_interrupt>
      46:	00 00       	nop
      48:	cf c2       	rjmp	.+1438   	; 0x5e8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	cd c2       	rjmp	.+1434   	; 0x5e8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	cb c2       	rjmp	.+1430   	; 0x5e8 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__vector_21>
      58:	c7 c2       	rjmp	.+1422   	; 0x5e8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c5 c2       	rjmp	.+1418   	; 0x5e8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c3 c2       	rjmp	.+1414   	; 0x5e8 <__bad_interrupt>
      62:	00 00       	nop
      64:	c1 c2       	rjmp	.+1410   	; 0x5e8 <__bad_interrupt>
      66:	00 00       	nop
      68:	bf c2       	rjmp	.+1406   	; 0x5e8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	bd c2       	rjmp	.+1402   	; 0x5e8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	bb c2       	rjmp	.+1398   	; 0x5e8 <__bad_interrupt>
      72:	00 00       	nop
      74:	b9 c3       	rjmp	.+1906   	; 0x7e8 <__vector_29>
      76:	00 00       	nop
      78:	b7 c2       	rjmp	.+1390   	; 0x5e8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b5 c2       	rjmp	.+1386   	; 0x5e8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b3 c2       	rjmp	.+1382   	; 0x5e8 <__bad_interrupt>
      82:	00 00       	nop
      84:	b1 c2       	rjmp	.+1378   	; 0x5e8 <__bad_interrupt>
      86:	00 00       	nop
      88:	af c2       	rjmp	.+1374   	; 0x5e8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ad c2       	rjmp	.+1370   	; 0x5e8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ab c2       	rjmp	.+1366   	; 0x5e8 <__bad_interrupt>
      92:	00 00       	nop
      94:	a9 c2       	rjmp	.+1362   	; 0x5e8 <__bad_interrupt>
	...

00000098 <__trampolines_end>:
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	00 3e       	cpi	r16, 0xE0	; 224
      9e:	5b 4f       	sbci	r21, 0xFB	; 251
      a0:	5b 3e       	cpi	r21, 0xEB	; 235
      a2:	3e 6b       	ori	r19, 0xBE	; 190
      a4:	4f 6b       	ori	r20, 0xBF	; 191
      a6:	3e 1c       	adc	r3, r14
      a8:	3e 7c       	andi	r19, 0xCE	; 206
      aa:	3e 1c       	adc	r3, r14
      ac:	18 3c       	cpi	r17, 0xC8	; 200
      ae:	7e 3c       	cpi	r23, 0xCE	; 206
      b0:	18 1c       	adc	r1, r8
      b2:	57 7d       	andi	r21, 0xD7	; 215
      b4:	57 1c       	adc	r5, r7
      b6:	1c 5e       	subi	r17, 0xEC	; 236
      b8:	7f 5e       	subi	r23, 0xEF	; 239
      ba:	1c 00       	.word	0x001c	; ????
      bc:	18 3c       	cpi	r17, 0xC8	; 200
      be:	18 00       	.word	0x0018	; ????
      c0:	ff e7       	ldi	r31, 0x7F	; 127
      c2:	c3 e7       	ldi	r28, 0x73	; 115
      c4:	ff 00       	.word	0x00ff	; ????
      c6:	18 24       	eor	r1, r8
      c8:	18 00       	.word	0x0018	; ????
      ca:	ff e7       	ldi	r31, 0x7F	; 127
      cc:	db e7       	ldi	r29, 0x7B	; 123
      ce:	ff 30       	cpi	r31, 0x0F	; 15
      d0:	48 3a       	cpi	r20, 0xA8	; 168
      d2:	06 0e       	add	r0, r22
      d4:	26 29       	or	r18, r6
      d6:	79 29       	or	r23, r9
      d8:	26 40       	sbci	r18, 0x06	; 6
      da:	7f 05       	cpc	r23, r15
      dc:	05 07       	cpc	r16, r21
      de:	40 7f       	andi	r20, 0xF0	; 240
      e0:	05 25       	eor	r16, r5
      e2:	3f 5a       	subi	r19, 0xAF	; 175
      e4:	3c e7       	ldi	r19, 0x7C	; 124
      e6:	3c 5a       	subi	r19, 0xAC	; 172
      e8:	7f 3e       	cpi	r23, 0xEF	; 239
      ea:	1c 1c       	adc	r1, r12
      ec:	08 08       	sbc	r0, r8
      ee:	1c 1c       	adc	r1, r12
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	14 22       	and	r1, r20
      f4:	7f 22       	and	r7, r31
      f6:	14 5f       	subi	r17, 0xF4	; 244
      f8:	5f 00       	.word	0x005f	; ????
      fa:	5f 5f       	subi	r21, 0xFF	; 255
      fc:	06 09       	sbc	r16, r6
      fe:	7f 01       	movw	r14, r30
     100:	7f 00       	.word	0x007f	; ????
     102:	66 89       	ldd	r22, Z+22	; 0x16
     104:	95 6a       	ori	r25, 0xA5	; 165
     106:	60 60       	ori	r22, 0x00	; 0
     108:	60 60       	ori	r22, 0x00	; 0
     10a:	60 94       	com	r6
     10c:	a2 ff       	sbrs	r26, 2
     10e:	a2 94       	swap	r10
     110:	08 04       	cpc	r0, r8
     112:	7e 04       	cpc	r7, r14
     114:	08 10       	cpse	r0, r8
     116:	20 7e       	andi	r18, 0xE0	; 224
     118:	20 10       	cpse	r2, r0
     11a:	08 08       	sbc	r0, r8
     11c:	2a 1c       	adc	r2, r10
     11e:	08 08       	sbc	r0, r8
     120:	1c 2a       	or	r1, r28
     122:	08 08       	sbc	r0, r8
     124:	1e 10       	cpse	r1, r14
     126:	10 10       	cpse	r1, r0
     128:	10 0c       	add	r1, r0
     12a:	1e 0c       	add	r1, r14
     12c:	1e 0c       	add	r1, r14
     12e:	30 38       	cpi	r19, 0x80	; 128
     130:	3e 38       	cpi	r19, 0x8E	; 142
     132:	30 06       	cpc	r3, r16
     134:	0e 3e       	cpi	r16, 0xEE	; 238
     136:	0e 06       	cpc	r0, r30
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 5f       	subi	r16, 0xF0	; 240
     140:	00 00       	nop
     142:	00 07       	cpc	r16, r16
     144:	00 07       	cpc	r16, r16
     146:	00 14       	cp	r0, r0
     148:	7f 14       	cp	r7, r15
     14a:	7f 14       	cp	r7, r15
     14c:	24 2a       	or	r2, r20
     14e:	7f 2a       	or	r7, r31
     150:	12 23       	and	r17, r18
     152:	13 08       	sbc	r1, r3
     154:	64 62       	ori	r22, 0x24	; 36
     156:	36 49       	sbci	r19, 0x96	; 150
     158:	56 20       	and	r5, r6
     15a:	50 00       	.word	0x0050	; ????
     15c:	08 07       	cpc	r16, r24
     15e:	03 00       	.word	0x0003	; ????
     160:	00 1c       	adc	r0, r0
     162:	22 41       	sbci	r18, 0x12	; 18
     164:	00 00       	nop
     166:	41 22       	and	r4, r17
     168:	1c 00       	.word	0x001c	; ????
     16a:	2a 1c       	adc	r2, r10
     16c:	7f 1c       	adc	r7, r15
     16e:	2a 08       	sbc	r2, r10
     170:	08 3e       	cpi	r16, 0xE8	; 232
     172:	08 08       	sbc	r0, r8
     174:	00 80       	ld	r0, Z
     176:	70 30       	cpi	r23, 0x00	; 0
     178:	00 08       	sbc	r0, r0
     17a:	08 08       	sbc	r0, r8
     17c:	08 08       	sbc	r0, r8
     17e:	00 00       	nop
     180:	60 60       	ori	r22, 0x00	; 0
     182:	00 20       	and	r0, r0
     184:	10 08       	sbc	r1, r0
     186:	04 02       	muls	r16, r20
     188:	3e 51       	subi	r19, 0x1E	; 30
     18a:	49 45       	sbci	r20, 0x59	; 89
     18c:	3e 00       	.word	0x003e	; ????
     18e:	42 7f       	andi	r20, 0xF2	; 242
     190:	40 00       	.word	0x0040	; ????
     192:	72 49       	sbci	r23, 0x92	; 146
     194:	49 49       	sbci	r20, 0x99	; 153
     196:	46 21       	and	r20, r6
     198:	41 49       	sbci	r20, 0x91	; 145
     19a:	4d 33       	cpi	r20, 0x3D	; 61
     19c:	18 14       	cp	r1, r8
     19e:	12 7f       	andi	r17, 0xF2	; 242
     1a0:	10 27       	eor	r17, r16
     1a2:	45 45       	sbci	r20, 0x55	; 85
     1a4:	45 39       	cpi	r20, 0x95	; 149
     1a6:	3c 4a       	sbci	r19, 0xAC	; 172
     1a8:	49 49       	sbci	r20, 0x99	; 153
     1aa:	31 41       	sbci	r19, 0x11	; 17
     1ac:	21 11       	cpse	r18, r1
     1ae:	09 07       	cpc	r16, r25
     1b0:	36 49       	sbci	r19, 0x96	; 150
     1b2:	49 49       	sbci	r20, 0x99	; 153
     1b4:	36 46       	sbci	r19, 0x66	; 102
     1b6:	49 49       	sbci	r20, 0x99	; 153
     1b8:	29 1e       	adc	r2, r25
     1ba:	00 00       	nop
     1bc:	14 00       	.word	0x0014	; ????
     1be:	00 00       	nop
     1c0:	40 34       	cpi	r20, 0x40	; 64
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	14 22       	and	r1, r20
     1c8:	41 14       	cp	r4, r1
     1ca:	14 14       	cp	r1, r4
     1cc:	14 14       	cp	r1, r4
     1ce:	00 41       	sbci	r16, 0x10	; 16
     1d0:	22 14       	cp	r2, r2
     1d2:	08 02       	muls	r16, r24
     1d4:	01 59       	subi	r16, 0x91	; 145
     1d6:	09 06       	cpc	r0, r25
     1d8:	3e 41       	sbci	r19, 0x1E	; 30
     1da:	5d 59       	subi	r21, 0x9D	; 157
     1dc:	4e 7c       	andi	r20, 0xCE	; 206
     1de:	12 11       	cpse	r17, r2
     1e0:	12 7c       	andi	r17, 0xC2	; 194
     1e2:	7f 49       	sbci	r23, 0x9F	; 159
     1e4:	49 49       	sbci	r20, 0x99	; 153
     1e6:	36 3e       	cpi	r19, 0xE6	; 230
     1e8:	41 41       	sbci	r20, 0x11	; 17
     1ea:	41 22       	and	r4, r17
     1ec:	7f 41       	sbci	r23, 0x1F	; 31
     1ee:	41 41       	sbci	r20, 0x11	; 17
     1f0:	3e 7f       	andi	r19, 0xFE	; 254
     1f2:	49 49       	sbci	r20, 0x99	; 153
     1f4:	49 41       	sbci	r20, 0x19	; 25
     1f6:	7f 09       	sbc	r23, r15
     1f8:	09 09       	sbc	r16, r9
     1fa:	01 3e       	cpi	r16, 0xE1	; 225
     1fc:	41 41       	sbci	r20, 0x11	; 17
     1fe:	51 73       	andi	r21, 0x31	; 49
     200:	7f 08       	sbc	r7, r15
     202:	08 08       	sbc	r0, r8
     204:	7f 00       	.word	0x007f	; ????
     206:	41 7f       	andi	r20, 0xF1	; 241
     208:	41 00       	.word	0x0041	; ????
     20a:	20 40       	sbci	r18, 0x00	; 0
     20c:	41 3f       	cpi	r20, 0xF1	; 241
     20e:	01 7f       	andi	r16, 0xF1	; 241
     210:	08 14       	cp	r0, r8
     212:	22 41       	sbci	r18, 0x12	; 18
     214:	7f 40       	sbci	r23, 0x0F	; 15
     216:	40 40       	sbci	r20, 0x00	; 0
     218:	40 7f       	andi	r20, 0xF0	; 240
     21a:	02 1c       	adc	r0, r2
     21c:	02 7f       	andi	r16, 0xF2	; 242
     21e:	7f 04       	cpc	r7, r15
     220:	08 10       	cpse	r0, r8
     222:	7f 3e       	cpi	r23, 0xEF	; 239
     224:	41 41       	sbci	r20, 0x11	; 17
     226:	41 3e       	cpi	r20, 0xE1	; 225
     228:	7f 09       	sbc	r23, r15
     22a:	09 09       	sbc	r16, r9
     22c:	06 3e       	cpi	r16, 0xE6	; 230
     22e:	41 51       	subi	r20, 0x11	; 17
     230:	21 5e       	subi	r18, 0xE1	; 225
     232:	7f 09       	sbc	r23, r15
     234:	19 29       	or	r17, r9
     236:	46 26       	eor	r4, r22
     238:	49 49       	sbci	r20, 0x99	; 153
     23a:	49 32       	cpi	r20, 0x29	; 41
     23c:	03 01       	movw	r0, r6
     23e:	7f 01       	movw	r14, r30
     240:	03 3f       	cpi	r16, 0xF3	; 243
     242:	40 40       	sbci	r20, 0x00	; 0
     244:	40 3f       	cpi	r20, 0xF0	; 240
     246:	1f 20       	and	r1, r15
     248:	40 20       	and	r4, r0
     24a:	1f 3f       	cpi	r17, 0xFF	; 255
     24c:	40 38       	cpi	r20, 0x80	; 128
     24e:	40 3f       	cpi	r20, 0xF0	; 240
     250:	63 14       	cp	r6, r3
     252:	08 14       	cp	r0, r8
     254:	63 03       	mulsu	r22, r19
     256:	04 78       	andi	r16, 0x84	; 132
     258:	04 03       	mulsu	r16, r20
     25a:	61 59       	subi	r22, 0x91	; 145
     25c:	49 4d       	sbci	r20, 0xD9	; 217
     25e:	43 00       	.word	0x0043	; ????
     260:	7f 41       	sbci	r23, 0x1F	; 31
     262:	41 41       	sbci	r20, 0x11	; 17
     264:	02 04       	cpc	r0, r2
     266:	08 10       	cpse	r0, r8
     268:	20 00       	.word	0x0020	; ????
     26a:	41 41       	sbci	r20, 0x11	; 17
     26c:	41 7f       	andi	r20, 0xF1	; 241
     26e:	04 02       	muls	r16, r20
     270:	01 02       	muls	r16, r17
     272:	04 40       	sbci	r16, 0x04	; 4
     274:	40 40       	sbci	r20, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	00 03       	mulsu	r16, r16
     27a:	07 08       	sbc	r0, r7
     27c:	00 20       	and	r0, r0
     27e:	54 54       	subi	r21, 0x44	; 68
     280:	78 40       	sbci	r23, 0x08	; 8
     282:	7f 28       	or	r7, r15
     284:	44 44       	sbci	r20, 0x44	; 68
     286:	38 38       	cpi	r19, 0x88	; 136
     288:	44 44       	sbci	r20, 0x44	; 68
     28a:	44 28       	or	r4, r4
     28c:	38 44       	sbci	r19, 0x48	; 72
     28e:	44 28       	or	r4, r4
     290:	7f 38       	cpi	r23, 0x8F	; 143
     292:	54 54       	subi	r21, 0x44	; 68
     294:	54 18       	sub	r5, r4
     296:	00 08       	sbc	r0, r0
     298:	7e 09       	sbc	r23, r14
     29a:	02 18       	sub	r0, r2
     29c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     29e:	9c 78       	andi	r25, 0x8C	; 140
     2a0:	7f 08       	sbc	r7, r15
     2a2:	04 04       	cpc	r0, r4
     2a4:	78 00       	.word	0x0078	; ????
     2a6:	44 7d       	andi	r20, 0xD4	; 212
     2a8:	40 00       	.word	0x0040	; ????
     2aa:	20 40       	sbci	r18, 0x00	; 0
     2ac:	40 3d       	cpi	r20, 0xD0	; 208
     2ae:	00 7f       	andi	r16, 0xF0	; 240
     2b0:	10 28       	or	r1, r0
     2b2:	44 00       	.word	0x0044	; ????
     2b4:	00 41       	sbci	r16, 0x10	; 16
     2b6:	7f 40       	sbci	r23, 0x0F	; 15
     2b8:	00 7c       	andi	r16, 0xC0	; 192
     2ba:	04 78       	andi	r16, 0x84	; 132
     2bc:	04 78       	andi	r16, 0x84	; 132
     2be:	7c 08       	sbc	r7, r12
     2c0:	04 04       	cpc	r0, r4
     2c2:	78 38       	cpi	r23, 0x88	; 136
     2c4:	44 44       	sbci	r20, 0x44	; 68
     2c6:	44 38       	cpi	r20, 0x84	; 132
     2c8:	fc 18       	sub	r15, r12
     2ca:	24 24       	eor	r2, r4
     2cc:	18 18       	sub	r1, r8
     2ce:	24 24       	eor	r2, r4
     2d0:	18 fc       	.word	0xfc18	; ????
     2d2:	7c 08       	sbc	r7, r12
     2d4:	04 04       	cpc	r0, r4
     2d6:	08 48       	sbci	r16, 0x88	; 136
     2d8:	54 54       	subi	r21, 0x44	; 68
     2da:	54 24       	eor	r5, r4
     2dc:	04 04       	cpc	r0, r4
     2de:	3f 44       	sbci	r19, 0x4F	; 79
     2e0:	24 3c       	cpi	r18, 0xC4	; 196
     2e2:	40 40       	sbci	r20, 0x00	; 0
     2e4:	20 7c       	andi	r18, 0xC0	; 192
     2e6:	1c 20       	and	r1, r12
     2e8:	40 20       	and	r4, r0
     2ea:	1c 3c       	cpi	r17, 0xCC	; 204
     2ec:	40 30       	cpi	r20, 0x00	; 0
     2ee:	40 3c       	cpi	r20, 0xC0	; 192
     2f0:	44 28       	or	r4, r4
     2f2:	10 28       	or	r1, r0
     2f4:	44 4c       	sbci	r20, 0xC4	; 196
     2f6:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x7691>
     2fa:	44 64       	ori	r20, 0x44	; 68
     2fc:	54 4c       	sbci	r21, 0xC4	; 196
     2fe:	44 00       	.word	0x0044	; ????
     300:	08 36       	cpi	r16, 0x68	; 104
     302:	41 00       	.word	0x0041	; ????
     304:	00 00       	nop
     306:	77 00       	.word	0x0077	; ????
     308:	00 00       	nop
     30a:	41 36       	cpi	r20, 0x61	; 97
     30c:	08 00       	.word	0x0008	; ????
     30e:	02 01       	movw	r0, r4
     310:	02 04       	cpc	r0, r2
     312:	02 3c       	cpi	r16, 0xC2	; 194
     314:	26 23       	and	r18, r22
     316:	26 3c       	cpi	r18, 0xC6	; 198
     318:	1e a1       	ldd	r17, Y+38	; 0x26
     31a:	a1 61       	ori	r26, 0x11	; 17
     31c:	12 3a       	cpi	r17, 0xA2	; 162
     31e:	40 40       	sbci	r20, 0x00	; 0
     320:	20 7a       	andi	r18, 0xA0	; 160
     322:	38 54       	subi	r19, 0x48	; 72
     324:	54 55       	subi	r21, 0x54	; 84
     326:	59 21       	and	r21, r9
     328:	55 55       	subi	r21, 0x55	; 85
     32a:	79 41       	sbci	r23, 0x19	; 25
     32c:	22 54       	subi	r18, 0x42	; 66
     32e:	54 78       	andi	r21, 0x84	; 132
     330:	42 21       	and	r20, r2
     332:	55 54       	subi	r21, 0x45	; 69
     334:	78 40       	sbci	r23, 0x08	; 8
     336:	20 54       	subi	r18, 0x40	; 64
     338:	55 79       	andi	r21, 0x95	; 149
     33a:	40 0c       	add	r4, r0
     33c:	1e 52       	subi	r17, 0x2E	; 46
     33e:	72 12       	cpse	r7, r18
     340:	39 55       	subi	r19, 0x59	; 89
     342:	55 55       	subi	r21, 0x55	; 85
     344:	59 39       	cpi	r21, 0x99	; 153
     346:	54 54       	subi	r21, 0x44	; 68
     348:	54 59       	subi	r21, 0x94	; 148
     34a:	39 55       	subi	r19, 0x59	; 89
     34c:	54 54       	subi	r21, 0x44	; 68
     34e:	58 00       	.word	0x0058	; ????
     350:	00 45       	sbci	r16, 0x50	; 80
     352:	7c 41       	sbci	r23, 0x1C	; 28
     354:	00 02       	muls	r16, r16
     356:	45 7d       	andi	r20, 0xD5	; 213
     358:	42 00       	.word	0x0042	; ????
     35a:	01 45       	sbci	r16, 0x51	; 81
     35c:	7c 40       	sbci	r23, 0x0C	; 12
     35e:	7d 12       	cpse	r7, r29
     360:	11 12       	cpse	r1, r17
     362:	7d f0       	brhs	.+30     	; 0x382 <__trampolines_end+0x2ea>
     364:	28 25       	eor	r18, r8
     366:	28 f0       	brcs	.+10     	; 0x372 <__trampolines_end+0x2da>
     368:	7c 54       	subi	r23, 0x4C	; 76
     36a:	55 45       	sbci	r21, 0x55	; 85
     36c:	00 20       	and	r0, r0
     36e:	54 54       	subi	r21, 0x44	; 68
     370:	7c 54       	subi	r23, 0x4C	; 76
     372:	7c 0a       	sbc	r7, r28
     374:	09 7f       	andi	r16, 0xF9	; 249
     376:	49 32       	cpi	r20, 0x29	; 41
     378:	49 49       	sbci	r20, 0x99	; 153
     37a:	49 32       	cpi	r20, 0x29	; 41
     37c:	3a 44       	sbci	r19, 0x4A	; 74
     37e:	44 44       	sbci	r20, 0x44	; 68
     380:	3a 32       	cpi	r19, 0x2A	; 42
     382:	4a 48       	sbci	r20, 0x8A	; 138
     384:	48 30       	cpi	r20, 0x08	; 8
     386:	3a 41       	sbci	r19, 0x1A	; 26
     388:	41 21       	and	r20, r1
     38a:	7a 3a       	cpi	r23, 0xAA	; 170
     38c:	42 40       	sbci	r20, 0x02	; 2
     38e:	20 78       	andi	r18, 0x80	; 128
     390:	00 9d       	mul	r16, r0
     392:	a0 a0       	ldd	r10, Z+32	; 0x20
     394:	7d 3d       	cpi	r23, 0xDD	; 221
     396:	42 42       	sbci	r20, 0x22	; 34
     398:	42 3d       	cpi	r20, 0xD2	; 210
     39a:	3d 40       	sbci	r19, 0x0D	; 13
     39c:	40 40       	sbci	r20, 0x00	; 0
     39e:	3d 3c       	cpi	r19, 0xCD	; 205
     3a0:	24 ff       	sbrs	r18, 4
     3a2:	24 24       	eor	r2, r4
     3a4:	48 7e       	andi	r20, 0xE8	; 232
     3a6:	49 43       	sbci	r20, 0x39	; 57
     3a8:	66 2b       	or	r22, r22
     3aa:	2f fc       	.word	0xfc2f	; ????
     3ac:	2f 2b       	or	r18, r31
     3ae:	ff 09       	sbc	r31, r15
     3b0:	29 f6       	brne	.-118    	; 0x33c <__trampolines_end+0x2a4>
     3b2:	20 c0       	rjmp	.+64     	; 0x3f4 <__trampolines_end+0x35c>
     3b4:	88 7e       	andi	r24, 0xE8	; 232
     3b6:	09 03       	fmul	r16, r17
     3b8:	20 54       	subi	r18, 0x40	; 64
     3ba:	54 79       	andi	r21, 0x94	; 148
     3bc:	41 00       	.word	0x0041	; ????
     3be:	00 44       	sbci	r16, 0x40	; 64
     3c0:	7d 41       	sbci	r23, 0x1D	; 29
     3c2:	30 48       	sbci	r19, 0x80	; 128
     3c4:	48 4a       	sbci	r20, 0xA8	; 168
     3c6:	32 38       	cpi	r19, 0x82	; 130
     3c8:	40 40       	sbci	r20, 0x00	; 0
     3ca:	22 7a       	andi	r18, 0xA2	; 162
     3cc:	00 7a       	andi	r16, 0xA0	; 160
     3ce:	0a 0a       	sbc	r0, r26
     3d0:	72 7d       	andi	r23, 0xD2	; 210
     3d2:	0d 19       	sub	r16, r13
     3d4:	31 7d       	andi	r19, 0xD1	; 209
     3d6:	26 29       	or	r18, r6
     3d8:	29 2f       	mov	r18, r25
     3da:	28 26       	eor	r2, r24
     3dc:	29 29       	or	r18, r9
     3de:	29 26       	eor	r2, r25
     3e0:	30 48       	sbci	r19, 0x80	; 128
     3e2:	4d 40       	sbci	r20, 0x0D	; 13
     3e4:	20 38       	cpi	r18, 0x80	; 128
     3e6:	08 08       	sbc	r0, r8
     3e8:	08 08       	sbc	r0, r8
     3ea:	08 08       	sbc	r0, r8
     3ec:	08 08       	sbc	r0, r8
     3ee:	38 2f       	mov	r19, r24
     3f0:	10 c8       	rjmp	.-4064   	; 0xfffff412 <__eeprom_end+0xff7ef412>
     3f2:	ac ba       	out	0x1c, r10	; 28
     3f4:	2f 10       	cpse	r2, r15
     3f6:	28 34       	cpi	r18, 0x48	; 72
     3f8:	fa 00       	.word	0x00fa	; ????
     3fa:	00 7b       	andi	r16, 0xB0	; 176
     3fc:	00 00       	nop
     3fe:	08 14       	cp	r0, r8
     400:	2a 14       	cp	r2, r10
     402:	22 22       	and	r2, r18
     404:	14 2a       	or	r1, r20
     406:	14 08       	sbc	r1, r4
     408:	aa 00       	.word	0x00aa	; ????
     40a:	55 00       	.word	0x0055	; ????
     40c:	aa aa       	std	Y+50, r10	; 0x32
     40e:	55 aa       	std	Z+53, r5	; 0x35
     410:	55 aa       	std	Z+53, r5	; 0x35
     412:	00 00       	nop
     414:	00 ff       	sbrs	r16, 0
     416:	00 10       	cpse	r0, r0
     418:	10 10       	cpse	r1, r0
     41a:	ff 00       	.word	0x00ff	; ????
     41c:	14 14       	cp	r1, r4
     41e:	14 ff       	sbrs	r17, 4
     420:	00 10       	cpse	r0, r0
     422:	10 ff       	sbrs	r17, 0
     424:	00 ff       	sbrs	r16, 0
     426:	10 10       	cpse	r1, r0
     428:	f0 10       	cpse	r15, r0
     42a:	f0 14       	cp	r15, r0
     42c:	14 14       	cp	r1, r4
     42e:	fc 00       	.word	0x00fc	; ????
     430:	14 14       	cp	r1, r4
     432:	f7 00       	.word	0x00f7	; ????
     434:	ff 00       	.word	0x00ff	; ????
     436:	00 ff       	sbrs	r16, 0
     438:	00 ff       	sbrs	r16, 0
     43a:	14 14       	cp	r1, r4
     43c:	f4 04       	cpc	r15, r4
     43e:	fc 14       	cp	r15, r12
     440:	14 17       	cp	r17, r20
     442:	10 1f       	adc	r17, r16
     444:	10 10       	cpse	r1, r0
     446:	1f 10       	cpse	r1, r15
     448:	1f 14       	cp	r1, r15
     44a:	14 14       	cp	r1, r4
     44c:	1f 00       	.word	0x001f	; ????
     44e:	10 10       	cpse	r1, r0
     450:	10 f0       	brcs	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     452:	00 00       	nop
     454:	00 00       	nop
     456:	1f 10       	cpse	r1, r15
     458:	10 10       	cpse	r1, r0
     45a:	10 1f       	adc	r17, r16
     45c:	10 10       	cpse	r1, r0
     45e:	10 10       	cpse	r1, r0
     460:	f0 10       	cpse	r15, r0
     462:	00 00       	nop
     464:	00 ff       	sbrs	r16, 0
     466:	10 10       	cpse	r1, r0
     468:	10 10       	cpse	r1, r0
     46a:	10 10       	cpse	r1, r0
     46c:	10 10       	cpse	r1, r0
     46e:	10 ff       	sbrs	r17, 0
     470:	10 00       	.word	0x0010	; ????
     472:	00 00       	nop
     474:	ff 14       	cp	r15, r15
     476:	00 00       	nop
     478:	ff 00       	.word	0x00ff	; ????
     47a:	ff 00       	.word	0x00ff	; ????
     47c:	00 1f       	adc	r16, r16
     47e:	10 17       	cp	r17, r16
     480:	00 00       	nop
     482:	fc 04       	cpc	r15, r12
     484:	f4 14       	cp	r15, r4
     486:	14 17       	cp	r17, r20
     488:	10 17       	cp	r17, r16
     48a:	14 14       	cp	r1, r4
     48c:	f4 04       	cpc	r15, r4
     48e:	f4 00       	.word	0x00f4	; ????
     490:	00 ff       	sbrs	r16, 0
     492:	00 f7       	brcc	.-64     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     494:	14 14       	cp	r1, r4
     496:	14 14       	cp	r1, r4
     498:	14 14       	cp	r1, r4
     49a:	14 f7       	brge	.-60     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     49c:	00 f7       	brcc	.-64     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     49e:	14 14       	cp	r1, r4
     4a0:	14 17       	cp	r17, r20
     4a2:	14 10       	cpse	r1, r4
     4a4:	10 1f       	adc	r17, r16
     4a6:	10 1f       	adc	r17, r16
     4a8:	14 14       	cp	r1, r4
     4aa:	14 f4       	brge	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4ac:	14 10       	cpse	r1, r4
     4ae:	10 f0       	brcs	.+4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b0:	10 f0       	brcs	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b2:	00 00       	nop
     4b4:	1f 10       	cpse	r1, r15
     4b6:	1f 00       	.word	0x001f	; ????
     4b8:	00 00       	nop
     4ba:	1f 14       	cp	r1, r15
     4bc:	00 00       	nop
     4be:	00 fc       	sbrc	r0, 0
     4c0:	14 00       	.word	0x0014	; ????
     4c2:	00 f0       	brcs	.+0      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4c4:	10 f0       	brcs	.+4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4c6:	10 10       	cpse	r1, r0
     4c8:	ff 10       	cpse	r15, r15
     4ca:	ff 14       	cp	r15, r15
     4cc:	14 14       	cp	r1, r4
     4ce:	ff 14       	cp	r15, r15
     4d0:	10 10       	cpse	r1, r0
     4d2:	10 1f       	adc	r17, r16
     4d4:	00 00       	nop
     4d6:	00 00       	nop
     4d8:	f0 10       	cpse	r15, r0
     4da:	ff ff       	.word	0xffff	; ????
     4dc:	ff ff       	.word	0xffff	; ????
     4de:	ff f0       	brie	.+62     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     4e0:	f0 f0       	brcs	.+60     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     4e2:	f0 f0       	brcs	.+60     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     4e4:	ff ff       	.word	0xffff	; ????
     4e6:	ff 00       	.word	0x00ff	; ????
     4e8:	00 00       	nop
     4ea:	00 00       	nop
     4ec:	ff ff       	.word	0xffff	; ????
     4ee:	0f 0f       	add	r16, r31
     4f0:	0f 0f       	add	r16, r31
     4f2:	0f 38       	cpi	r16, 0x8F	; 143
     4f4:	44 44       	sbci	r20, 0x44	; 68
     4f6:	38 44       	sbci	r19, 0x48	; 72
     4f8:	fc 4a       	sbci	r31, 0xAC	; 172
     4fa:	4a 4a       	sbci	r20, 0xAA	; 170
     4fc:	34 7e       	andi	r19, 0xE4	; 228
     4fe:	02 02       	muls	r16, r18
     500:	06 06       	cpc	r0, r22
     502:	02 7e       	andi	r16, 0xE2	; 226
     504:	02 7e       	andi	r16, 0xE2	; 226
     506:	02 63       	ori	r16, 0x32	; 50
     508:	55 49       	sbci	r21, 0x95	; 149
     50a:	41 63       	ori	r20, 0x31	; 49
     50c:	38 44       	sbci	r19, 0x48	; 72
     50e:	44 3c       	cpi	r20, 0xC4	; 196
     510:	04 40       	sbci	r16, 0x04	; 4
     512:	7e 20       	and	r7, r14
     514:	1e 20       	and	r1, r14
     516:	06 02       	muls	r16, r22
     518:	7e 02       	muls	r23, r30
     51a:	02 99       	sbic	0x00, 2	; 0
     51c:	a5 e7       	ldi	r26, 0x75	; 117
     51e:	a5 99       	sbic	0x14, 5	; 20
     520:	1c 2a       	or	r1, r28
     522:	49 2a       	or	r4, r25
     524:	1c 4c       	sbci	r17, 0xCC	; 204
     526:	72 01       	movw	r14, r4
     528:	72 4c       	sbci	r23, 0xC2	; 194
     52a:	30 4a       	sbci	r19, 0xA0	; 160
     52c:	4d 4d       	sbci	r20, 0xDD	; 221
     52e:	30 30       	cpi	r19, 0x00	; 0
     530:	48 78       	andi	r20, 0x88	; 136
     532:	48 30       	cpi	r20, 0x08	; 8
     534:	bc 62       	ori	r27, 0x2C	; 44
     536:	5a 46       	sbci	r21, 0x6A	; 106
     538:	3d 3e       	cpi	r19, 0xED	; 237
     53a:	49 49       	sbci	r20, 0x99	; 153
     53c:	49 00       	.word	0x0049	; ????
     53e:	7e 01       	movw	r14, r28
     540:	01 01       	movw	r0, r2
     542:	7e 2a       	or	r7, r30
     544:	2a 2a       	or	r2, r26
     546:	2a 2a       	or	r2, r26
     548:	44 44       	sbci	r20, 0x44	; 68
     54a:	5f 44       	sbci	r21, 0x4F	; 79
     54c:	44 40       	sbci	r20, 0x04	; 4
     54e:	51 4a       	sbci	r21, 0xA1	; 161
     550:	44 40       	sbci	r20, 0x04	; 4
     552:	40 44       	sbci	r20, 0x40	; 64
     554:	4a 51       	subi	r20, 0x1A	; 26
     556:	40 00       	.word	0x0040	; ????
     558:	00 ff       	sbrs	r16, 0
     55a:	01 03       	mulsu	r16, r17
     55c:	e0 80       	ld	r14, Z
     55e:	ff 00       	.word	0x00ff	; ????
     560:	00 08       	sbc	r0, r0
     562:	08 6b       	ori	r16, 0xB8	; 184
     564:	6b 08       	sbc	r6, r11
     566:	36 12       	cpse	r3, r22
     568:	36 24       	eor	r3, r6
     56a:	36 06       	cpc	r3, r22
     56c:	0f 09       	sbc	r16, r15
     56e:	0f 06       	cpc	r0, r31
     570:	00 00       	nop
     572:	18 18       	sub	r1, r8
     574:	00 00       	nop
     576:	00 10       	cpse	r0, r0
     578:	10 00       	.word	0x0010	; ????
     57a:	30 40       	sbci	r19, 0x00	; 0
     57c:	ff 01       	movw	r30, r30
     57e:	01 00       	.word	0x0001	; ????
     580:	1f 01       	movw	r2, r30
     582:	01 1e       	adc	r0, r17
     584:	00 19       	sub	r16, r0
     586:	1d 17       	cp	r17, r29
     588:	12 00       	.word	0x0012	; ????
     58a:	3c 3c       	cpi	r19, 0xCC	; 204
     58c:	3c 3c       	cpi	r19, 0xCC	; 204
     58e:	00 00       	nop
     590:	00 00       	nop
	...

00000594 <__ctors_start>:
     594:	d8 08       	sbc	r13, r8

00000596 <__ctors_end>:
     596:	11 24       	eor	r1, r1
     598:	1f be       	out	0x3f, r1	; 63
     59a:	cf ef       	ldi	r28, 0xFF	; 255
     59c:	d0 e2       	ldi	r29, 0x20	; 32
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	cd bf       	out	0x3d, r28	; 61

000005a2 <__do_copy_data>:
     5a2:	11 e0       	ldi	r17, 0x01	; 1
     5a4:	a0 e0       	ldi	r26, 0x00	; 0
     5a6:	b1 e0       	ldi	r27, 0x01	; 1
     5a8:	e4 ef       	ldi	r30, 0xF4	; 244
     5aa:	f0 e2       	ldi	r31, 0x20	; 32
     5ac:	00 e0       	ldi	r16, 0x00	; 0
     5ae:	0b bf       	out	0x3b, r16	; 59
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__do_copy_data+0x14>
     5b2:	07 90       	elpm	r0, Z+
     5b4:	0d 92       	st	X+, r0
     5b6:	a4 3e       	cpi	r26, 0xE4	; 228
     5b8:	b1 07       	cpc	r27, r17
     5ba:	d9 f7       	brne	.-10     	; 0x5b2 <__do_copy_data+0x10>

000005bc <__do_clear_bss>:
     5bc:	25 e0       	ldi	r18, 0x05	; 5
     5be:	a4 ee       	ldi	r26, 0xE4	; 228
     5c0:	b1 e0       	ldi	r27, 0x01	; 1
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <.do_clear_bss_start>

000005c4 <.do_clear_bss_loop>:
     5c4:	1d 92       	st	X+, r1

000005c6 <.do_clear_bss_start>:
     5c6:	af 3f       	cpi	r26, 0xFF	; 255
     5c8:	b2 07       	cpc	r27, r18
     5ca:	e1 f7       	brne	.-8      	; 0x5c4 <.do_clear_bss_loop>

000005cc <__do_global_ctors>:
     5cc:	12 e0       	ldi	r17, 0x02	; 2
     5ce:	cb ec       	ldi	r28, 0xCB	; 203
     5d0:	d2 e0       	ldi	r29, 0x02	; 2
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <__do_global_ctors+0x10>
     5d4:	21 97       	sbiw	r28, 0x01	; 1
     5d6:	fe 01       	movw	r30, r28
     5d8:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__tablejump2__>
     5dc:	ca 3c       	cpi	r28, 0xCA	; 202
     5de:	d1 07       	cpc	r29, r17
     5e0:	c9 f7       	brne	.-14     	; 0x5d4 <__do_global_ctors+0x8>
     5e2:	d6 d4       	rcall	.+2476   	; 0xf90 <main>
     5e4:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <_exit>

000005e8 <__bad_interrupt>:
     5e8:	7c c2       	rjmp	.+1272   	; 0xae2 <__vector_default>

000005ea <_Z7initADCv>:
		myDisplay.drawString(0,0,"Calibrate");
		myDisplay.drawString(0,16,objectType);
		myDisplay.drawNumber(0,32,calibCount);
		myDisplay.show();
	}
}
     5ea:	10 ba       	out	0x10, r1	; 16
     5ec:	ea e7       	ldi	r30, 0x7A	; 122
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	80 68       	ori	r24, 0x80	; 128
     5f4:	80 83       	st	Z, r24
     5f6:	80 81       	ld	r24, Z
     5f8:	87 60       	ori	r24, 0x07	; 7
     5fa:	80 83       	st	Z, r24
     5fc:	ec e7       	ldi	r30, 0x7C	; 124
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	81 64       	ori	r24, 0x41	; 65
     604:	80 83       	st	Z, r24
     606:	08 95       	ret

00000608 <_Z17findLowestReadingPKc>:
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	ec 01       	movw	r28, r24
     60e:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <reflQueueCount>
     612:	88 30       	cpi	r24, 0x08	; 8
     614:	c0 f5       	brcc	.+112    	; 0x686 <_Z17findLowestReadingPKc+0x7e>
     616:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     61a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     61e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     622:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     626:	28 17       	cp	r18, r24
     628:	39 07       	cpc	r19, r25
     62a:	40 f4       	brcc	.+16     	; 0x63c <_Z17findLowestReadingPKc+0x34>
     62c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lowestRefl>
     630:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lowestRefl+0x1>
     634:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     638:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     63c:	85 ef       	ldi	r24, 0xF5	; 245
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	1b d3       	rcall	.+1590   	; 0xc78 <_ZN11Framebuffer5clearEv>
     642:	2b e4       	ldi	r18, 0x4B	; 75
     644:	31 e0       	ldi	r19, 0x01	; 1
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	85 ef       	ldi	r24, 0xF5	; 245
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	bb d3       	rcall	.+1910   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
     654:	9e 01       	movw	r18, r28
     656:	40 e1       	ldi	r20, 0x10	; 16
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	85 ef       	ldi	r24, 0xF5	; 245
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	b3 d3       	rcall	.+1894   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
     664:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <reflQueueCount>
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	40 e2       	ldi	r20, 0x20	; 32
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	85 ef       	ldi	r24, 0xF5	; 245
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	df d3       	rcall	.+1982   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
     678:	85 ef       	ldi	r24, 0xF5	; 245
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	0e d3       	rcall	.+1564   	; 0xc9a <_ZN11Framebuffer4showEv>
     67e:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <reflQueueCount>
     682:	88 30       	cpi	r24, 0x08	; 8
     684:	40 f2       	brcs	.-112    	; 0x616 <_Z17findLowestReadingPKc+0xe>
     686:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <reflQueueCount>
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <_Z12calibrateADCv>:


void calibrateADC(){
	
	myDisplay.clear();
     690:	85 ef       	ldi	r24, 0xF5	; 245
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	f1 d2       	rcall	.+1506   	; 0xc78 <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0,"Calibrate");
     696:	2b e4       	ldi	r18, 0x4B	; 75
     698:	31 e0       	ldi	r19, 0x01	; 1
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	85 ef       	ldi	r24, 0xF5	; 245
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	91 d3       	rcall	.+1826   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,16,"Black");
     6a8:	2d e0       	ldi	r18, 0x0D	; 13
     6aa:	31 e0       	ldi	r19, 0x01	; 1
     6ac:	40 e1       	ldi	r20, 0x10	; 16
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	85 ef       	ldi	r24, 0xF5	; 245
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	88 d3       	rcall	.+1808   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(0,32,0);
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e2       	ldi	r20, 0x20	; 32
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	85 ef       	ldi	r24, 0xF5	; 245
	myDisplay.show();
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	b5 d3       	rcall	.+1898   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
     6cc:	85 ef       	ldi	r24, 0xF5	; 245
	
	sei();
	motorForward();
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	e4 d2       	rcall	.+1480   	; 0xc9a <_ZN11Framebuffer4showEv>
	//Black -> White -> Steel -> Aluminum
	findLowestReading("Black");
     6d2:	78 94       	sei
     6d4:	82 d7       	rcall	.+3844   	; 0x15da <_Z12motorForwardv>
     6d6:	8d e0       	ldi	r24, 0x0D	; 13
     6d8:	91 e0       	ldi	r25, 0x01	; 1
	blackMinRef = calibReading - REFL_VALUE_BUFFER;
     6da:	96 df       	rcall	.-212    	; 0x608 <_Z17findLowestReadingPKc>
     6dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6e4:	05 97       	sbiw	r24, 0x05	; 5
     6e6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <blackMinRef+0x1>
	findLowestReading("White");
     6ea:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <blackMinRef>
     6ee:	83 e1       	ldi	r24, 0x13	; 19
     6f0:	91 e0       	ldi	r25, 0x01	; 1
	whiteMinRef = calibReading - REFL_VALUE_BUFFER;
     6f2:	8a df       	rcall	.-236    	; 0x608 <_Z17findLowestReadingPKc>
     6f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6fc:	05 97       	sbiw	r24, 0x05	; 5
     6fe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <whiteMinRef+0x1>
	findLowestReading("Steel");
     702:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <whiteMinRef>
     706:	89 e1       	ldi	r24, 0x19	; 25
     708:	91 e0       	ldi	r25, 0x01	; 1
	steelMinRef = calibReading - REFL_VALUE_BUFFER;
     70a:	7e df       	rcall	.-260    	; 0x608 <_Z17findLowestReadingPKc>
     70c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     710:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     714:	05 97       	sbiw	r24, 0x05	; 5
     716:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <steelMinRef+0x1>
	findLowestReading("Aluminum");
     71a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <steelMinRef>
     71e:	8f e1       	ldi	r24, 0x1F	; 31
	aluminumMinRef = calibReading - REFL_VALUE_BUFFER;
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	72 df       	rcall	.-284    	; 0x608 <_Z17findLowestReadingPKc>
     724:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     728:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     72c:	05 97       	sbiw	r24, 0x05	; 5
		
	motorBrake();
     72e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <aluminumMinRef+0x1>
	myDisplay.clear();
     732:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <aluminumMinRef>
     736:	56 d7       	rcall	.+3756   	; 0x15e4 <_Z10motorBrakev>
	myDisplay.drawString(0,0,"B:");
     738:	85 ef       	ldi	r24, 0xF5	; 245
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	9d d2       	rcall	.+1338   	; 0xc78 <_ZN11Framebuffer5clearEv>
     73e:	28 e2       	ldi	r18, 0x28	; 40
     740:	31 e0       	ldi	r19, 0x01	; 1
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawNumber(24,0,blackMinRef);
     74a:	85 ef       	ldi	r24, 0xF5	; 245
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	3d d3       	rcall	.+1658   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
     750:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <blackMinRef>
     754:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <blackMinRef+0x1>
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	68 e1       	ldi	r22, 0x18	; 24
     75e:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawString(0,16,"W:");
     760:	85 ef       	ldi	r24, 0xF5	; 245
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	68 d3       	rcall	.+1744   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
     766:	2b e2       	ldi	r18, 0x2B	; 43
     768:	31 e0       	ldi	r19, 0x01	; 1
     76a:	40 e1       	ldi	r20, 0x10	; 16
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawNumber(24,16,whiteMinRef);
     772:	85 ef       	ldi	r24, 0xF5	; 245
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	29 d3       	rcall	.+1618   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
     778:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <whiteMinRef>
     77c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <whiteMinRef+0x1>
     780:	40 e1       	ldi	r20, 0x10	; 16
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	68 e1       	ldi	r22, 0x18	; 24
     786:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawString(0,32,"S:");
     788:	85 ef       	ldi	r24, 0xF5	; 245
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	54 d3       	rcall	.+1704   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
     78e:	2e e2       	ldi	r18, 0x2E	; 46
     790:	31 e0       	ldi	r19, 0x01	; 1
     792:	40 e2       	ldi	r20, 0x20	; 32
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawNumber(24,32,steelMinRef);
     79a:	85 ef       	ldi	r24, 0xF5	; 245
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	15 d3       	rcall	.+1578   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
     7a0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <steelMinRef>
     7a4:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <steelMinRef+0x1>
     7a8:	40 e2       	ldi	r20, 0x20	; 32
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	68 e1       	ldi	r22, 0x18	; 24
     7ae:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawString(0,48,"A:");
     7b0:	85 ef       	ldi	r24, 0xF5	; 245
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	40 d3       	rcall	.+1664   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
     7b6:	21 e3       	ldi	r18, 0x31	; 49
     7b8:	31 e0       	ldi	r19, 0x01	; 1
     7ba:	40 e3       	ldi	r20, 0x30	; 48
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	60 e0       	ldi	r22, 0x00	; 0
	myDisplay.drawNumber(24,48,aluminumMinRef);
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	85 ef       	ldi	r24, 0xF5	; 245
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	01 d3       	rcall	.+1538   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
     7c8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <aluminumMinRef>
     7cc:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <aluminumMinRef+0x1>
     7d0:	40 e3       	ldi	r20, 0x30	; 48
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	68 e1       	ldi	r22, 0x18	; 24
     7d6:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.show();
     7d8:	85 ef       	ldi	r24, 0xF5	; 245
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	2c d3       	rcall	.+1624   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
     7de:	85 ef       	ldi	r24, 0xF5	; 245
	
	cli();
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	5b d2       	rcall	.+1206   	; 0xc9a <_ZN11Framebuffer4showEv>
     7e4:	f8 94       	cli
     7e6:	08 95       	ret

000007e8 <__vector_29>:
	the lowest reflection reading is and save it in
	lowestRefl. Then it will start another ADC reading.
	Speed = ~0xa -> 309 readings per block.
	Speed = 0xff -> ~195 readings per block
*/
ISR(ADC_vect) {
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	0f 92       	push	r0
     7f0:	11 24       	eor	r1, r1
     7f2:	0b b6       	in	r0, 0x3b	; 59
     7f4:	0f 92       	push	r0
     7f6:	2f 93       	push	r18
     7f8:	3f 93       	push	r19
     7fa:	8f 93       	push	r24
     7fc:	9f 93       	push	r25
     7fe:	ef 93       	push	r30
     800:	ff 93       	push	r31
// 	}
	
	//Simples method that will work great for sorting (as long as it is calibrated well)
	//Downside is that objects that have a reflectivity between the different kind of blocks 
	//won't be able to be detected.
	if(ADC < lowestRefl){
     802:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     806:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     80a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lowestRefl>
     80e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lowestRefl+0x1>
     812:	28 17       	cp	r18, r24
     814:	39 07       	cpc	r19, r25
     816:	40 f4       	brcc	.+16     	; 0x828 <__vector_29+0x40>
		lowestRefl = ADC;
     818:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     81c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     820:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <lowestRefl+0x1>
     824:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lowestRefl>
	//so if it stops with the sensor near the edge of the blok the reading will be
	//pulled higher than the actual value.
	//adcAverage = adcAverage + (ADC - adcAverage)/adcTotalCount;
			
	//Start another ADC conversion
	ADCSRA |= _BV(ADSC);
     828:	ea e7       	ldi	r30, 0x7A	; 122
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	80 64       	ori	r24, 0x40	; 64
     830:	80 83       	st	Z, r24
     832:	ff 91       	pop	r31
     834:	ef 91       	pop	r30
     836:	9f 91       	pop	r25
     838:	8f 91       	pop	r24
     83a:	3f 91       	pop	r19
     83c:	2f 91       	pop	r18
     83e:	0f 90       	pop	r0
     840:	0b be       	out	0x3b, r0	; 59
     842:	0f 90       	pop	r0
     844:	0f be       	out	0x3f, r0	; 63
     846:	0f 90       	pop	r0
     848:	1f 90       	pop	r1
     84a:	18 95       	reti

0000084c <_Z10initExtIntv>:
volatile char blockReady = 0;
volatile char stepperRdy = 1; //*** turn this into extern when adding stepper

void initExtInt(void){
	//External interrupts on pin 2,3
	DDRD &= 0b11110011; 
     84c:	8a b1       	in	r24, 0x0a	; 10
     84e:	83 7f       	andi	r24, 0xF3	; 243
     850:	8a b9       	out	0x0a, r24	; 10
	
	//Turn off interrupt while configuring
	EIMSK = 0;
     852:	1d ba       	out	0x1d, r1	; 29
	
	//Any edge interrupt on PD2 (EXT INT2)
	//Falling edge interrupt on PD3 (EXT INT3)
	EICRA |= 0b10010000;
     854:	e9 e6       	ldi	r30, 0x69	; 105
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	80 69       	ori	r24, 0x90	; 144
     85c:	80 83       	st	Z, r24
	
	//Turn on External Interrupt 2 and 3
	EIMSK = 0b1100;
     85e:	8c e0       	ldi	r24, 0x0C	; 12
     860:	8d bb       	out	0x1d, r24	; 29
     862:	08 95       	ret

00000864 <__vector_3>:
	reading was. Add item to front of FIFO queue.
	
	TODO: Add a low range for each classification to make it
	more rubust.
*/
ISR(INT2_vect){
     864:	1f 92       	push	r1
     866:	0f 92       	push	r0
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	0f 92       	push	r0
     86c:	11 24       	eor	r1, r1
     86e:	0b b6       	in	r0, 0x3b	; 59
     870:	0f 92       	push	r0
     872:	2f 93       	push	r18
     874:	3f 93       	push	r19
     876:	4f 93       	push	r20
     878:	5f 93       	push	r21
     87a:	6f 93       	push	r22
     87c:	7f 93       	push	r23
     87e:	8f 93       	push	r24
     880:	9f 93       	push	r25
     882:	af 93       	push	r26
     884:	bf 93       	push	r27
     886:	ef 93       	push	r30
     888:	ff 93       	push	r31
	//////////"Debounce" *** seems to work fine with 1 ms delay
	mTimer(5);
     88a:	85 e0       	ldi	r24, 0x05	; 5
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_Z6mTimeri>
	//////////
	
	//if(REF_SENSOR_PORT & REF_SENSOR_PIN){
	if(PIND & 0x4){
     892:	4a 9b       	sbis	0x09, 2	; 9
     894:	0f c0       	rjmp	.+30     	; 0x8b4 <__vector_3+0x50>
		//////////START ADC
		lowestRefl = 1023;
     896:	8f ef       	ldi	r24, 0xFF	; 255
     898:	93 e0       	ldi	r25, 0x03	; 3
     89a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <lowestRefl+0x1>
     89e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lowestRefl>
		//adcTotalCount = 0;
		//adcAverage = 0;
		//runningSum
		//Enable ADC interrupt
		ADCSRA |= _BV(ADIE);
     8a2:	ea e7       	ldi	r30, 0x7A	; 122
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	88 60       	ori	r24, 0x08	; 8
     8aa:	80 83       	st	Z, r24
		//Start ADC conversion
		ADCSRA |= _BV(ADSC);
     8ac:	80 81       	ld	r24, Z
     8ae:	80 64       	ori	r24, 0x40	; 64
     8b0:	80 83       	st	Z, r24
     8b2:	6a c0       	rjmp	.+212    	; 0x988 <__vector_3+0x124>
		
	}
	else if((PIND & 0x4) == 0){
     8b4:	4a 99       	sbic	0x09, 2	; 9
     8b6:	68 c0       	rjmp	.+208    	; 0x988 <__vector_3+0x124>
		char unsigned itemValue = 0;
		//////////STOP ADC
		//Disable ADC interrupt
		ADCSRA &= ~_BV(ADIE);
     8b8:	ea e7       	ldi	r30, 0x7A	; 122
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	87 7f       	andi	r24, 0xF7	; 247
     8c0:	80 83       	st	Z, r24
		//Cancel any pending ADC conversions
		ADCSRA &= ~_BV(ADSC);
     8c2:	80 81       	ld	r24, Z
     8c4:	8f 7b       	andi	r24, 0xBF	; 191
     8c6:	80 83       	st	Z, r24

		//////////CLASSIFY BLOCK
		if(lowestRefl > blackMinRef){
     8c8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     8cc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     8d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <blackMinRef>
     8d4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <blackMinRef+0x1>
     8d8:	82 17       	cp	r24, r18
     8da:	93 07       	cpc	r25, r19
     8dc:	18 f1       	brcs	.+70     	; 0x924 <__vector_3+0xc0>
			itemValue = BLACK;
		}
		else if(lowestRefl > whiteMinRef){
     8de:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     8e2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     8e6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <whiteMinRef>
     8ea:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <whiteMinRef+0x1>
     8ee:	82 17       	cp	r24, r18
     8f0:	93 07       	cpc	r25, r19
     8f2:	d0 f0       	brcs	.+52     	; 0x928 <__vector_3+0xc4>
			itemValue = WHITE;
		}
		else if (lowestRefl > steelMinRef){
     8f4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     8f8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     8fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <steelMinRef>
     900:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <steelMinRef+0x1>
     904:	82 17       	cp	r24, r18
     906:	93 07       	cpc	r25, r19
     908:	88 f0       	brcs	.+34     	; 0x92c <__vector_3+0xc8>
			itemValue = STEEL;
		}
		else if(lowestRefl > aluminumMinRef){
     90a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     90e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     912:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <aluminumMinRef>
     916:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <aluminumMinRef+0x1>
     91a:	82 17       	cp	r24, r18
     91c:	93 07       	cpc	r25, r19
     91e:	40 f0       	brcs	.+16     	; 0x930 <__vector_3+0xcc>
			itemValue = ALUMINUM;
		}
		else{
			itemValue = UNKNOWN;
     920:	94 e0       	ldi	r25, 0x04	; 4
     922:	07 c0       	rjmp	.+14     	; 0x932 <__vector_3+0xce>
		//Cancel any pending ADC conversions
		ADCSRA &= ~_BV(ADSC);

		//////////CLASSIFY BLOCK
		if(lowestRefl > blackMinRef){
			itemValue = BLACK;
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	05 c0       	rjmp	.+10     	; 0x932 <__vector_3+0xce>
		}
		else if(lowestRefl > whiteMinRef){
			itemValue = WHITE;
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	03 c0       	rjmp	.+6      	; 0x932 <__vector_3+0xce>
		}
		else if (lowestRefl > steelMinRef){
			itemValue = STEEL;
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	01 c0       	rjmp	.+2      	; 0x932 <__vector_3+0xce>
		}
		else if(lowestRefl > aluminumMinRef){
			itemValue = ALUMINUM;
     930:	93 e0       	ldi	r25, 0x03	; 3
			itemValue = UNKNOWN;
		}

		//////////ADD BLOCK TO QUEUE
		//Check to make sure we aren't passed max
		if(reflQueueCount > 7){ 
     932:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <reflQueueCount>
     936:	88 30       	cpi	r24, 0x08	; 8
     938:	18 f0       	brcs	.+6      	; 0x940 <__vector_3+0xdc>
			PORTC = 0xff;
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	88 b9       	out	0x08, r24	; 8
     93e:	24 c0       	rjmp	.+72     	; 0x988 <__vector_3+0x124>
		}
		else if(reflQueueCount == 0){
     940:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <reflQueueCount>
     944:	81 11       	cpse	r24, r1
     946:	0f c0       	rjmp	.+30     	; 0x966 <__vector_3+0x102>
			reflQueueCount++;
     948:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <reflQueueCount>
     94c:	8f 5f       	subi	r24, 0xFF	; 255
     94e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <reflQueueCount>
			reflQueue[backOfQueue] = itemValue;
     952:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <backOfQueue>
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	e3 51       	subi	r30, 0x13	; 19
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	90 83       	st	Z, r25
			reflQueueChange = 1;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <reflQueueChange>
     964:	11 c0       	rjmp	.+34     	; 0x988 <__vector_3+0x124>
		}
		else{
			reflQueueCount++;
     966:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <reflQueueCount>
     96a:	8f 5f       	subi	r24, 0xFF	; 255
     96c:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <reflQueueCount>
			backOfQueue = (backOfQueue + 1) & 7;
     970:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <backOfQueue>
     974:	8f 5f       	subi	r24, 0xFF	; 255
     976:	87 70       	andi	r24, 0x07	; 7
     978:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <backOfQueue>
			reflQueue[backOfQueue] = itemValue;
     97c:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <backOfQueue>
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	e3 51       	subi	r30, 0x13	; 19
     984:	fe 4f       	sbci	r31, 0xFE	; 254
     986:	90 83       	st	Z, r25
 		}	
		//Error checking for < 0? ***
		
	}
	//Clear interrupt flag
	EIFR = 0x4; 
     988:	84 e0       	ldi	r24, 0x04	; 4
     98a:	8c bb       	out	0x1c, r24	; 28
	
}
     98c:	ff 91       	pop	r31
     98e:	ef 91       	pop	r30
     990:	bf 91       	pop	r27
     992:	af 91       	pop	r26
     994:	9f 91       	pop	r25
     996:	8f 91       	pop	r24
     998:	7f 91       	pop	r23
     99a:	6f 91       	pop	r22
     99c:	5f 91       	pop	r21
     99e:	4f 91       	pop	r20
     9a0:	3f 91       	pop	r19
     9a2:	2f 91       	pop	r18
     9a4:	0f 90       	pop	r0
     9a6:	0b be       	out	0x3b, r0	; 59
     9a8:	0f 90       	pop	r0
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	0f 90       	pop	r0
     9ae:	1f 90       	pop	r1
     9b0:	18 95       	reti

000009b2 <__vector_4>:


ISR(INT3_vect){
     9b2:	1f 92       	push	r1
     9b4:	0f 92       	push	r0
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	0f 92       	push	r0
     9ba:	11 24       	eor	r1, r1
     9bc:	0b b6       	in	r0, 0x3b	; 59
     9be:	0f 92       	push	r0
     9c0:	2f 93       	push	r18
     9c2:	3f 93       	push	r19
     9c4:	4f 93       	push	r20
     9c6:	5f 93       	push	r21
     9c8:	6f 93       	push	r22
     9ca:	7f 93       	push	r23
     9cc:	8f 93       	push	r24
     9ce:	9f 93       	push	r25
     9d0:	af 93       	push	r26
     9d2:	bf 93       	push	r27
     9d4:	ef 93       	push	r30
     9d6:	ff 93       	push	r31
	char nextItem = 0;
	//////////"Debounce" *** seems to work fine with 1 ms delay
	mTimer(5);
     9d8:	85 e0       	ldi	r24, 0x05	; 5
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_Z6mTimeri>

	if((PIND & 0x8) == 0){
     9e0:	4b 99       	sbic	0x09, 3	; 9
     9e2:	6a c0       	rjmp	.+212    	; 0xab8 <__vector_4+0x106>
		if(stepperReady){
     9e4:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <stepperReady>
     9e8:	88 23       	and	r24, r24
     9ea:	09 f4       	brne	.+2      	; 0x9ee <__vector_4+0x3c>
     9ec:	5f c0       	rjmp	.+190    	; 0xaac <__vector_4+0xfa>
			//////////PUT BLOCK IN BIN (leave motor on) 
			
			//////////COUNT NUMBER OF EACH SORTED
			if(reflQueue[frontOfQueue] == BLACK){
     9ee:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <frontOfQueue>
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	e3 51       	subi	r30, 0x13	; 19
     9f6:	fe 4f       	sbci	r31, 0xFE	; 254
     9f8:	80 81       	ld	r24, Z
     9fa:	81 11       	cpse	r24, r1
     9fc:	06 c0       	rjmp	.+12     	; 0xa0a <__vector_4+0x58>
				blackCount++;
     9fe:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <blackCount>
     a02:	8f 5f       	subi	r24, 0xFF	; 255
     a04:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <blackCount>
     a08:	29 c0       	rjmp	.+82     	; 0xa5c <__vector_4+0xaa>
			}
			else if(reflQueue[frontOfQueue] == WHITE){
     a0a:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <frontOfQueue>
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	e3 51       	subi	r30, 0x13	; 19
     a12:	fe 4f       	sbci	r31, 0xFE	; 254
     a14:	80 81       	ld	r24, Z
     a16:	81 30       	cpi	r24, 0x01	; 1
     a18:	31 f4       	brne	.+12     	; 0xa26 <__vector_4+0x74>
				whiteCount++;
     a1a:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <whiteCount>
     a1e:	8f 5f       	subi	r24, 0xFF	; 255
     a20:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <whiteCount>
     a24:	1b c0       	rjmp	.+54     	; 0xa5c <__vector_4+0xaa>
			}
			else if(reflQueue[frontOfQueue] == STEEL){
     a26:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <frontOfQueue>
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	e3 51       	subi	r30, 0x13	; 19
     a2e:	fe 4f       	sbci	r31, 0xFE	; 254
     a30:	80 81       	ld	r24, Z
     a32:	82 30       	cpi	r24, 0x02	; 2
     a34:	31 f4       	brne	.+12     	; 0xa42 <__vector_4+0x90>
				steelCount++;
     a36:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <steelCount>
     a3a:	8f 5f       	subi	r24, 0xFF	; 255
     a3c:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <steelCount>
     a40:	0d c0       	rjmp	.+26     	; 0xa5c <__vector_4+0xaa>
			}
			else if(reflQueue[frontOfQueue] == ALUMINUM){
     a42:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <frontOfQueue>
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	e3 51       	subi	r30, 0x13	; 19
     a4a:	fe 4f       	sbci	r31, 0xFE	; 254
     a4c:	80 81       	ld	r24, Z
     a4e:	83 30       	cpi	r24, 0x03	; 3
     a50:	29 f4       	brne	.+10     	; 0xa5c <__vector_4+0xaa>
				aluminumCount++;
     a52:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <aluminumCount>
     a56:	8f 5f       	subi	r24, 0xFF	; 255
     a58:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <aluminumCount>
			}

			//////////DEQUEUE BLOCK
			if(reflQueueCount < 2){
     a5c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <reflQueueCount>
     a60:	82 30       	cpi	r24, 0x02	; 2
     a62:	18 f4       	brcc	.+6      	; 0xa6a <__vector_4+0xb8>
				reflQueueCount = 0;
     a64:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <reflQueueCount>
     a68:	27 c0       	rjmp	.+78     	; 0xab8 <__vector_4+0x106>
			}
			else{
				nextItem = (frontOfQueue+1) & 7; //& 7 implements a rotating array position
     a6a:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <frontOfQueue>
     a6e:	8f 5f       	subi	r24, 0xFF	; 255
     a70:	87 70       	andi	r24, 0x07	; 7
				if(reflQueue[frontOfQueue] != reflQueue[nextItem]){
     a72:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <frontOfQueue>
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	e3 51       	subi	r30, 0x13	; 19
     a7a:	fe 4f       	sbci	r31, 0xFE	; 254
     a7c:	20 81       	ld	r18, Z
     a7e:	e8 2f       	mov	r30, r24
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	e3 51       	subi	r30, 0x13	; 19
     a84:	fe 4f       	sbci	r31, 0xFE	; 254
     a86:	90 81       	ld	r25, Z
     a88:	29 17       	cp	r18, r25
     a8a:	29 f0       	breq	.+10     	; 0xa96 <__vector_4+0xe4>
					delayStepper = 1;
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <delayStepper>
					stepperReady = 0;
     a92:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <stepperReady>
				}
				frontOfQueue = nextItem; 
     a96:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <frontOfQueue>
				reflQueueCount--;
     a9a:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <reflQueueCount>
     a9e:	81 50       	subi	r24, 0x01	; 1
     aa0:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <reflQueueCount>
				reflQueueChange = 1;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <reflQueueChange>
     aaa:	06 c0       	rjmp	.+12     	; 0xab8 <__vector_4+0x106>
			}
		}
		else{
			//Motor brake
			MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_BRAKE;
     aac:	82 b1       	in	r24, 0x02	; 2
     aae:	8f 73       	andi	r24, 0x3F	; 63
     ab0:	82 b9       	out	0x02, r24	; 2
			blockReady = 1;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <__data_end>
		}
	}
	//Clear interrupt flag (else ISR runs twice)
	EIFR = 0x8; 
     ab8:	88 e0       	ldi	r24, 0x08	; 8
     aba:	8c bb       	out	0x1c, r24	; 28
}
     abc:	ff 91       	pop	r31
     abe:	ef 91       	pop	r30
     ac0:	bf 91       	pop	r27
     ac2:	af 91       	pop	r26
     ac4:	9f 91       	pop	r25
     ac6:	8f 91       	pop	r24
     ac8:	7f 91       	pop	r23
     aca:	6f 91       	pop	r22
     acc:	5f 91       	pop	r21
     ace:	4f 91       	pop	r20
     ad0:	3f 91       	pop	r19
     ad2:	2f 91       	pop	r18
     ad4:	0f 90       	pop	r0
     ad6:	0b be       	out	0x3b, r0	; 59
     ad8:	0f 90       	pop	r0
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	0f 90       	pop	r0
     ade:	1f 90       	pop	r1
     ae0:	18 95       	reti

00000ae2 <__vector_default>:

ISR(BADISR_vect){
     ae2:	1f 92       	push	r1
     ae4:	0f 92       	push	r0
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	0f 92       	push	r0
     aea:	11 24       	eor	r1, r1
     aec:	8f 93       	push	r24
	PORTC = 0xaa;
     aee:	8a ea       	ldi	r24, 0xAA	; 170
     af0:	88 b9       	out	0x08, r24	; 8
     af2:	8f 91       	pop	r24
     af4:	0f 90       	pop	r0
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	0f 90       	pop	r0
     afa:	1f 90       	pop	r1
     afc:	18 95       	reti

00000afe <_ZN11Framebuffer9drawPixelEhh>:
        this->buffer[buffer_location] = 0x00;
    }
}

void Framebuffer::invert(uint8_t status) {
    this->oled.invert(status);
     afe:	66 23       	and	r22, r22
     b00:	d4 f0       	brlt	.+52     	; 0xb36 <_ZN11Framebuffer9drawPixelEhh+0x38>
     b02:	40 34       	cpi	r20, 0x40	; 64
     b04:	c0 f4       	brcc	.+48     	; 0xb36 <_ZN11Framebuffer9drawPixelEhh+0x38>
     b06:	24 2f       	mov	r18, r20
     b08:	26 95       	lsr	r18
     b0a:	26 95       	lsr	r18
     b0c:	26 95       	lsr	r18
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	30 e8       	ldi	r19, 0x80	; 128
     b12:	23 9f       	mul	r18, r19
     b14:	60 0d       	add	r22, r0
     b16:	71 1d       	adc	r23, r1
     b18:	11 24       	eor	r1, r1
     b1a:	fc 01       	movw	r30, r24
     b1c:	e6 0f       	add	r30, r22
     b1e:	f7 1f       	adc	r31, r23
     b20:	47 70       	andi	r20, 0x07	; 7
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <_ZN11Framebuffer9drawPixelEhh+0x2e>
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	4a 95       	dec	r20
     b2e:	e2 f7       	brpl	.-8      	; 0xb28 <_ZN11Framebuffer9drawPixelEhh+0x2a>
     b30:	90 81       	ld	r25, Z
     b32:	89 2b       	or	r24, r25
     b34:	80 83       	st	Z, r24
     b36:	08 95       	ret

00000b38 <_ZN11Framebuffer9drawVLineEhhh>:
     b38:	ff 92       	push	r15
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	22 23       	and	r18, r18
     b44:	61 f0       	breq	.+24     	; 0xb5e <_ZN11Framebuffer9drawVLineEhhh+0x26>
     b46:	c4 2f       	mov	r28, r20
     b48:	f6 2e       	mov	r15, r22
     b4a:	8c 01       	movw	r16, r24
     b4c:	d2 2f       	mov	r29, r18
     b4e:	d4 0f       	add	r29, r20
     b50:	4c 2f       	mov	r20, r28
     b52:	6f 2d       	mov	r22, r15
     b54:	c8 01       	movw	r24, r16
     b56:	d3 df       	rcall	.-90     	; 0xafe <_ZN11Framebuffer9drawPixelEhh>
     b58:	cf 5f       	subi	r28, 0xFF	; 255
     b5a:	cd 13       	cpse	r28, r29
     b5c:	f9 cf       	rjmp	.-14     	; 0xb50 <_ZN11Framebuffer9drawVLineEhhh+0x18>
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	08 95       	ret

00000b6a <_ZN11Framebuffer9drawHLineEhhh>:
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	22 23       	and	r18, r18
     b76:	61 f0       	breq	.+24     	; 0xb90 <_ZN11Framebuffer9drawHLineEhhh+0x26>
     b78:	f4 2e       	mov	r15, r20
     b7a:	c6 2f       	mov	r28, r22
     b7c:	8c 01       	movw	r16, r24
     b7e:	d2 2f       	mov	r29, r18
     b80:	d6 0f       	add	r29, r22
     b82:	4f 2d       	mov	r20, r15
     b84:	6c 2f       	mov	r22, r28
     b86:	c8 01       	movw	r24, r16
     b88:	ba df       	rcall	.-140    	; 0xafe <_ZN11Framebuffer9drawPixelEhh>
     b8a:	cf 5f       	subi	r28, 0xFF	; 255
     b8c:	cd 13       	cpse	r28, r29
     b8e:	f9 cf       	rjmp	.-14     	; 0xb82 <_ZN11Framebuffer9drawHLineEhhh+0x18>
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	08 95       	ret

00000b9c <_ZN11Framebuffer13drawRectangleEhhhh>:
     b9c:	cf 92       	push	r12
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	ec 01       	movw	r28, r24
     bae:	f6 2e       	mov	r15, r22
     bb0:	14 2f       	mov	r17, r20
     bb2:	d2 2e       	mov	r13, r18
     bb4:	e2 2e       	mov	r14, r18
     bb6:	e6 1a       	sub	r14, r22
     bb8:	e3 94       	inc	r14
     bba:	c0 2e       	mov	r12, r16
     bbc:	c4 1a       	sub	r12, r20
     bbe:	2e 2d       	mov	r18, r14
     bc0:	d4 df       	rcall	.-88     	; 0xb6a <_ZN11Framebuffer9drawHLineEhhh>
     bc2:	2e 2d       	mov	r18, r14
     bc4:	40 2f       	mov	r20, r16
     bc6:	6f 2d       	mov	r22, r15
     bc8:	ce 01       	movw	r24, r28
     bca:	cf df       	rcall	.-98     	; 0xb6a <_ZN11Framebuffer9drawHLineEhhh>
     bcc:	2c 2d       	mov	r18, r12
     bce:	41 2f       	mov	r20, r17
     bd0:	6f 2d       	mov	r22, r15
     bd2:	ce 01       	movw	r24, r28
     bd4:	b1 df       	rcall	.-158    	; 0xb38 <_ZN11Framebuffer9drawVLineEhhh>
     bd6:	2c 2d       	mov	r18, r12
     bd8:	41 2f       	mov	r20, r17
     bda:	6d 2d       	mov	r22, r13
     bdc:	ce 01       	movw	r24, r28
     bde:	ac df       	rcall	.-168    	; 0xb38 <_ZN11Framebuffer9drawVLineEhhh>
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	08 95       	ret

00000bf2 <_ZN11Framebuffer13drawRectangleEhhhhh>:
     bf2:	6f 92       	push	r6
     bf4:	7f 92       	push	r7
     bf6:	8f 92       	push	r8
     bf8:	9f 92       	push	r9
     bfa:	af 92       	push	r10
     bfc:	bf 92       	push	r11
     bfe:	cf 92       	push	r12
     c00:	df 92       	push	r13
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	6c 01       	movw	r12, r24
     c10:	64 2e       	mov	r6, r20
     c12:	e1 10       	cpse	r14, r1
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <_ZN11Framebuffer13drawRectangleEhhhhh+0x28>
     c16:	c2 df       	rcall	.-124    	; 0xb9c <_ZN11Framebuffer13drawRectangleEhhhh>
     c18:	20 c0       	rjmp	.+64     	; 0xc5a <_ZN11Framebuffer13drawRectangleEhhhhh+0x68>
     c1a:	04 1b       	sub	r16, r20
     c1c:	2f 5f       	subi	r18, 0xFF	; 255
     c1e:	26 1b       	sub	r18, r22
     c20:	82 2e       	mov	r8, r18
     c22:	91 2c       	mov	r9, r1
     c24:	18 14       	cp	r1, r8
     c26:	19 04       	cpc	r1, r9
     c28:	c4 f4       	brge	.+48     	; 0xc5a <_ZN11Framebuffer13drawRectangleEhhhhh+0x68>
     c2a:	76 2e       	mov	r7, r22
     c2c:	a1 2c       	mov	r10, r1
     c2e:	b1 2c       	mov	r11, r1
     c30:	e0 2e       	mov	r14, r16
     c32:	f1 2c       	mov	r15, r1
     c34:	16 2d       	mov	r17, r6
     c36:	c0 e0       	ldi	r28, 0x00	; 0
     c38:	d0 e0       	ldi	r29, 0x00	; 0
     c3a:	41 2f       	mov	r20, r17
     c3c:	67 2d       	mov	r22, r7
     c3e:	c6 01       	movw	r24, r12
     c40:	5e df       	rcall	.-324    	; 0xafe <_ZN11Framebuffer9drawPixelEhh>
     c42:	21 96       	adiw	r28, 0x01	; 1
     c44:	1f 5f       	subi	r17, 0xFF	; 255
     c46:	ec 16       	cp	r14, r28
     c48:	fd 06       	cpc	r15, r29
     c4a:	bc f7       	brge	.-18     	; 0xc3a <_ZN11Framebuffer13drawRectangleEhhhhh+0x48>
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	a8 1a       	sub	r10, r24
     c50:	b8 0a       	sbc	r11, r24
     c52:	73 94       	inc	r7
     c54:	a8 14       	cp	r10, r8
     c56:	b9 04       	cpc	r11, r9
     c58:	69 f7       	brne	.-38     	; 0xc34 <_ZN11Framebuffer13drawRectangleEhhhhh+0x42>
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	df 90       	pop	r13
     c68:	cf 90       	pop	r12
     c6a:	bf 90       	pop	r11
     c6c:	af 90       	pop	r10
     c6e:	9f 90       	pop	r9
     c70:	8f 90       	pop	r8
     c72:	7f 90       	pop	r7
     c74:	6f 90       	pop	r6
     c76:	08 95       	ret

00000c78 <_ZN11Framebuffer5clearEv>:
     c78:	fc 01       	movw	r30, r24
     c7a:	9c 5f       	subi	r25, 0xFC	; 252
     c7c:	11 92       	st	Z+, r1
     c7e:	e8 17       	cp	r30, r24
     c80:	f9 07       	cpc	r31, r25
     c82:	e1 f7       	brne	.-8      	; 0xc7c <_ZN11Framebuffer5clearEv+0x4>
     c84:	08 95       	ret

00000c86 <_ZN11FramebufferC1Ev>:
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	ec 01       	movw	r28, r24
     c8c:	9c 5f       	subi	r25, 0xFC	; 252
     c8e:	c0 d4       	rcall	.+2432   	; 0x1610 <_ZN7SSD1306C1Ev>
     c90:	ce 01       	movw	r24, r28
     c92:	f2 df       	rcall	.-28     	; 0xc78 <_ZN11Framebuffer5clearEv>
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <_ZN11Framebuffer4showEv>:
}

void Framebuffer::show() {
    this->oled.sendFramebuffer(this->buffer);
     c9a:	bc 01       	movw	r22, r24
     c9c:	9c 5f       	subi	r25, 0xFC	; 252
     c9e:	0d c5       	rjmp	.+2586   	; 0x16ba <_ZN7SSD130615sendFramebufferEPh>
     ca0:	08 95       	ret

00000ca2 <_ZN11Framebuffer8drawCharEiihjjh>:

// Draw a character ***turn to uint8_t ?
//For size 2 the bottom right max is 117,50
//Size 2 fits 4 lines, at y= 0, 16, 32, 48
//fits 10 characters per line at multiples of 12
void Framebuffer::drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size) {
     ca2:	2f 92       	push	r2
     ca4:	3f 92       	push	r3
     ca6:	4f 92       	push	r4
     ca8:	5f 92       	push	r5
     caa:	6f 92       	push	r6
     cac:	7f 92       	push	r7
     cae:	8f 92       	push	r8
     cb0:	9f 92       	push	r9
     cb2:	af 92       	push	r10
     cb4:	bf 92       	push	r11
     cb6:	cf 92       	push	r12
     cb8:	df 92       	push	r13
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <_ZN11Framebuffer8drawCharEiihjjh+0x26>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <_ZN11Framebuffer8drawCharEiihjjh+0x28>
     cca:	1f 92       	push	r1
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	5c 01       	movw	r10, r24
     cd2:	4b 83       	std	Y+3, r20	; 0x03
     cd4:	48 01       	movw	r8, r16
     cd6:	37 01       	movw	r6, r14
     cd8:	cd 82       	std	Y+5, r12	; 0x05
     cda:	6a 83       	std	Y+2, r22	; 0x02
     cdc:	2c 2c       	mov	r2, r12
     cde:	26 0e       	add	r2, r22
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	69 01       	movw	r12, r18
     ce4:	cc 0c       	add	r12, r12
     ce6:	dd 1c       	adc	r13, r13
     ce8:	cc 0c       	add	r12, r12
     cea:	dd 1c       	adc	r13, r13
     cec:	2c 0d       	add	r18, r12
     cee:	3d 1d       	adc	r19, r13
     cf0:	c9 01       	movw	r24, r18
     cf2:	88 56       	subi	r24, 0x68	; 104
     cf4:	9f 4f       	sbci	r25, 0xFF	; 255
     cf6:	6c 01       	movw	r12, r24
    for (int8_t i=0; i<6; i++ ) {
        uint8_t line;
        if (i == 5)
        line = 0x0;
        else
        line = pgm_read_byte(font+(c*5)+i);
     cf8:	36 2e       	mov	r3, r22
//  (y >= _height)           || // Clip bottom
//  ((x + 6 * size - 1) < 0) || // Clip left
//  ((y + 8 * size - 1) < 0))   // Clip top
//  return;

    for (int8_t i=0; i<6; i++ ) {
     cfa:	19 82       	std	Y+1, r1	; 0x01
     cfc:	44 2e       	mov	r4, r20
     cfe:	98 e0       	ldi	r25, 0x08	; 8
     d00:	49 0e       	add	r4, r25
        uint8_t line;
        if (i == 5)
     d02:	e9 81       	ldd	r30, Y+1	; 0x01
     d04:	e5 30       	cpi	r30, 0x05	; 5
     d06:	09 f4       	brne	.+2      	; 0xd0a <_ZN11Framebuffer8drawCharEiihjjh+0x68>
     d08:	41 c0       	rjmp	.+130    	; 0xd8c <_ZN11Framebuffer8drawCharEiihjjh+0xea>
        line = 0x0;
        else
        line = pgm_read_byte(font+(c*5)+i);
     d0a:	f6 01       	movw	r30, r12
     d0c:	14 91       	lpm	r17, Z
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <_ZN11Framebuffer8drawCharEiihjjh+0xec>
        for (int8_t j = 0; j<8; j++) {
            if (line & 0x1) {
     d10:	10 ff       	sbrs	r17, 0
     d12:	11 c0       	rjmp	.+34     	; 0xd36 <_ZN11Framebuffer8drawCharEiihjjh+0x94>
                if (size == 1) // default size
     d14:	fd 81       	ldd	r31, Y+5	; 0x05
     d16:	f1 30       	cpi	r31, 0x01	; 1
     d18:	29 f4       	brne	.+10     	; 0xd24 <_ZN11Framebuffer8drawCharEiihjjh+0x82>
                drawPixel(x+i, y+j); //removed color***
     d1a:	4c 81       	ldd	r20, Y+4	; 0x04
     d1c:	6a 81       	ldd	r22, Y+2	; 0x02
     d1e:	c5 01       	movw	r24, r10
     d20:	ee de       	rcall	.-548    	; 0xafe <_ZN11Framebuffer9drawPixelEhh>
     d22:	1c c0       	rjmp	.+56     	; 0xd5c <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                else {  // big size
                    drawRectangle(x+(i*size), y+(j*size), size+x+(i*size), size+y+(j*size), 1);
     d24:	ee 24       	eor	r14, r14
     d26:	e3 94       	inc	r14
     d28:	0f 2d       	mov	r16, r15
     d2a:	22 2d       	mov	r18, r2
     d2c:	45 2d       	mov	r20, r5
     d2e:	63 2d       	mov	r22, r3
     d30:	c5 01       	movw	r24, r10
     d32:	5f df       	rcall	.-322    	; 0xbf2 <_ZN11Framebuffer13drawRectangleEhhhhh>
     d34:	13 c0       	rjmp	.+38     	; 0xd5c <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                }
                } else if (bg != color) { //*** remove?
     d36:	68 14       	cp	r6, r8
     d38:	79 04       	cpc	r7, r9
     d3a:	81 f0       	breq	.+32     	; 0xd5c <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                if (size == 1) // default size
     d3c:	8d 81       	ldd	r24, Y+5	; 0x05
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	29 f4       	brne	.+10     	; 0xd4c <_ZN11Framebuffer8drawCharEiihjjh+0xaa>
                drawPixel(x+i, y+j); //removed color
     d42:	4c 81       	ldd	r20, Y+4	; 0x04
     d44:	6a 81       	ldd	r22, Y+2	; 0x02
     d46:	c5 01       	movw	r24, r10
     d48:	da de       	rcall	.-588    	; 0xafe <_ZN11Framebuffer9drawPixelEhh>
     d4a:	08 c0       	rjmp	.+16     	; 0xd5c <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                else {  // big size
                    drawRectangle(x+i*size, y+j*size, size+x+(i*size), size+y+(j*size), 1);
     d4c:	ee 24       	eor	r14, r14
     d4e:	e3 94       	inc	r14
     d50:	0f 2d       	mov	r16, r15
     d52:	22 2d       	mov	r18, r2
     d54:	45 2d       	mov	r20, r5
     d56:	63 2d       	mov	r22, r3
     d58:	c5 01       	movw	r24, r10
     d5a:	4b df       	rcall	.-362    	; 0xbf2 <_ZN11Framebuffer13drawRectangleEhhhhh>
                }
            }
            line >>= 1;
     d5c:	16 95       	lsr	r17
     d5e:	9d 81       	ldd	r25, Y+5	; 0x05
     d60:	59 0e       	add	r5, r25
     d62:	f9 0e       	add	r15, r25
     d64:	ec 81       	ldd	r30, Y+4	; 0x04
     d66:	ef 5f       	subi	r30, 0xFF	; 255
     d68:	ec 83       	std	Y+4, r30	; 0x04
        uint8_t line;
        if (i == 5)
        line = 0x0;
        else
        line = pgm_read_byte(font+(c*5)+i);
        for (int8_t j = 0; j<8; j++) {
     d6a:	e4 11       	cpse	r30, r4
     d6c:	d1 cf       	rjmp	.-94     	; 0xd10 <_ZN11Framebuffer8drawCharEiihjjh+0x6e>
     d6e:	f9 81       	ldd	r31, Y+1	; 0x01
     d70:	ff 5f       	subi	r31, 0xFF	; 255
     d72:	f9 83       	std	Y+1, r31	; 0x01
     d74:	39 0e       	add	r3, r25
     d76:	29 0e       	add	r2, r25
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	8f 5f       	subi	r24, 0xFF	; 255
     d7c:	8a 83       	std	Y+2, r24	; 0x02
     d7e:	9f ef       	ldi	r25, 0xFF	; 255
     d80:	c9 1a       	sub	r12, r25
     d82:	d9 0a       	sbc	r13, r25
//  (y >= _height)           || // Clip bottom
//  ((x + 6 * size - 1) < 0) || // Clip left
//  ((y + 8 * size - 1) < 0))   // Clip top
//  return;

    for (int8_t i=0; i<6; i++ ) {
     d84:	f6 30       	cpi	r31, 0x06	; 6
     d86:	09 f0       	breq	.+2      	; 0xd8a <_ZN11Framebuffer8drawCharEiihjjh+0xe8>
     d88:	bc cf       	rjmp	.-136    	; 0xd02 <_ZN11Framebuffer8drawCharEiihjjh+0x60>
     d8a:	07 c0       	rjmp	.+14     	; 0xd9a <_ZN11Framebuffer8drawCharEiihjjh+0xf8>
        uint8_t line;
        if (i == 5)
        line = 0x0;
     d8c:	10 e0       	ldi	r17, 0x00	; 0
     d8e:	5b 80       	ldd	r5, Y+3	; 0x03
     d90:	f5 2c       	mov	r15, r5
     d92:	ed 81       	ldd	r30, Y+5	; 0x05
     d94:	fe 0e       	add	r15, r30
//  (y >= _height)           || // Clip bottom
//  ((x + 6 * size - 1) < 0) || // Clip left
//  ((y + 8 * size - 1) < 0))   // Clip top
//  return;

    for (int8_t i=0; i<6; i++ ) {
     d96:	5c 82       	std	Y+4, r5	; 0x04
     d98:	bb cf       	rjmp	.-138    	; 0xd10 <_ZN11Framebuffer8drawCharEiihjjh+0x6e>
                }
            }
            line >>= 1;
        }
    }
}
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	ff 90       	pop	r15
     dae:	ef 90       	pop	r14
     db0:	df 90       	pop	r13
     db2:	cf 90       	pop	r12
     db4:	bf 90       	pop	r11
     db6:	af 90       	pop	r10
     db8:	9f 90       	pop	r9
     dba:	8f 90       	pop	r8
     dbc:	7f 90       	pop	r7
     dbe:	6f 90       	pop	r6
     dc0:	5f 90       	pop	r5
     dc2:	4f 90       	pop	r4
     dc4:	3f 90       	pop	r3
     dc6:	2f 90       	pop	r2
     dc8:	08 95       	ret

00000dca <_ZN11Framebuffer10drawStringEiiPKc>:

// Draw a string
void Framebuffer::drawString(int16_t x, int16_t y, const char *string){
     dca:	6f 92       	push	r6
     dcc:	7f 92       	push	r7
     dce:	8f 92       	push	r8
     dd0:	9f 92       	push	r9
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	f9 01       	movw	r30, r18

    for(char j=x; *string; string++,j+=12){
     de4:	c6 2f       	mov	r28, r22
     de6:	20 81       	ld	r18, Z
     de8:	22 23       	and	r18, r18
     dea:	c1 f0       	breq	.+48     	; 0xe1c <_ZN11Framebuffer10drawStringEiiPKc+0x52>
     dec:	5f 01       	movw	r10, r30
     dee:	3a 01       	movw	r6, r20
     df0:	4c 01       	movw	r8, r24
     df2:	8f ef       	ldi	r24, 0xFF	; 255
     df4:	a8 1a       	sub	r10, r24
     df6:	b8 0a       	sbc	r11, r24
        //(x,y,char,color,bg,size)
        this->drawChar(j,y,*string,0,0,2);
     df8:	6c 2f       	mov	r22, r28
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	68 94       	set
     dfe:	cc 24       	eor	r12, r12
     e00:	c1 f8       	bld	r12, 1
     e02:	e1 2c       	mov	r14, r1
     e04:	f1 2c       	mov	r15, r1
     e06:	00 e0       	ldi	r16, 0x00	; 0
     e08:	10 e0       	ldi	r17, 0x00	; 0
     e0a:	a3 01       	movw	r20, r6
     e0c:	c4 01       	movw	r24, r8
     e0e:	49 df       	rcall	.-366    	; 0xca2 <_ZN11Framebuffer8drawCharEiihjjh>
}

// Draw a string
void Framebuffer::drawString(int16_t x, int16_t y, const char *string){

    for(char j=x; *string; string++,j+=12){
     e10:	c4 5f       	subi	r28, 0xF4	; 244
     e12:	f5 01       	movw	r30, r10
     e14:	21 91       	ld	r18, Z+
     e16:	5f 01       	movw	r10, r30
     e18:	21 11       	cpse	r18, r1
     e1a:	ee cf       	rjmp	.-36     	; 0xdf8 <_ZN11Framebuffer10drawStringEiiPKc+0x2e>
        //(x,y,char,color,bg,size)
        this->drawChar(j,y,*string,0,0,2);
    }
    
}
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	cf 90       	pop	r12
     e28:	bf 90       	pop	r11
     e2a:	af 90       	pop	r10
     e2c:	9f 90       	pop	r9
     e2e:	8f 90       	pop	r8
     e30:	7f 90       	pop	r7
     e32:	6f 90       	pop	r6
     e34:	08 95       	ret

00000e36 <_ZN11Framebuffer10drawNumberEiii>:

void Framebuffer::drawNumber(int16_t x, int16_t y, int number){
     e36:	8f 92       	push	r8
     e38:	9f 92       	push	r9
     e3a:	af 92       	push	r10
     e3c:	bf 92       	push	r11
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	6c 01       	movw	r12, r24
     e54:	5b 01       	movw	r10, r22
     e56:	4a 01       	movw	r8, r20
		i = 7;
	}
	char str[i];
	sprintf(str,"%i",number);
	this->drawString(x,y,str);
}
     e58:	ed b6       	in	r14, 0x3d	; 61
     e5a:	fe b6       	in	r15, 0x3e	; 62
    
}

void Framebuffer::drawNumber(int16_t x, int16_t y, int number){
	char i;
	if(number<10){
     e5c:	2a 30       	cpi	r18, 0x0A	; 10
     e5e:	31 05       	cpc	r19, r1
     e60:	4c f0       	brlt	.+18     	; 0xe74 <_ZN11Framebuffer10drawNumberEiii+0x3e>
		i = 2;
	}
	else if(number < 100){
     e62:	24 36       	cpi	r18, 0x64	; 100
     e64:	31 05       	cpc	r19, r1
     e66:	44 f0       	brlt	.+16     	; 0xe78 <_ZN11Framebuffer10drawNumberEiii+0x42>
		i = 3;
	}
	else if(number <1000){
     e68:	28 3e       	cpi	r18, 0xE8	; 232
     e6a:	43 e0       	ldi	r20, 0x03	; 3
     e6c:	34 07       	cpc	r19, r20
     e6e:	34 f0       	brlt	.+12     	; 0xe7c <_ZN11Framebuffer10drawNumberEiii+0x46>
		i = 4;
	}
	else{
		i = 7;
     e70:	87 e0       	ldi	r24, 0x07	; 7
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <_ZN11Framebuffer10drawNumberEiii+0x48>
}

void Framebuffer::drawNumber(int16_t x, int16_t y, int number){
	char i;
	if(number<10){
		i = 2;
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	03 c0       	rjmp	.+6      	; 0xe7e <_ZN11Framebuffer10drawNumberEiii+0x48>
	}
	else if(number < 100){
		i = 3;
     e78:	83 e0       	ldi	r24, 0x03	; 3
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <_ZN11Framebuffer10drawNumberEiii+0x48>
	}
	else if(number <1000){
		i = 4;
     e7c:	84 e0       	ldi	r24, 0x04	; 4
	}
	else{
		i = 7;
	}
	char str[i];
     e7e:	4d b7       	in	r20, 0x3d	; 61
     e80:	5e b7       	in	r21, 0x3e	; 62
     e82:	48 1b       	sub	r20, r24
     e84:	51 09       	sbc	r21, r1
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	5e bf       	out	0x3e, r21	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	4d bf       	out	0x3d, r20	; 61
     e90:	0d b7       	in	r16, 0x3d	; 61
     e92:	1e b7       	in	r17, 0x3e	; 62
     e94:	0f 5f       	subi	r16, 0xFF	; 255
     e96:	1f 4f       	sbci	r17, 0xFF	; 255
	sprintf(str,"%i",number);
     e98:	3f 93       	push	r19
     e9a:	2f 93       	push	r18
     e9c:	84 e3       	ldi	r24, 0x34	; 52
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	9f 93       	push	r25
     ea2:	8f 93       	push	r24
     ea4:	1f 93       	push	r17
     ea6:	0f 93       	push	r16
     ea8:	48 d6       	rcall	.+3216   	; 0x1b3a <sprintf>
	this->drawString(x,y,str);
     eaa:	20 2f       	mov	r18, r16
     eac:	31 2f       	mov	r19, r17
     eae:	a4 01       	movw	r20, r8
     eb0:	b5 01       	movw	r22, r10
     eb2:	c6 01       	movw	r24, r12
     eb4:	8a df       	rcall	.-236    	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	fe be       	out	0x3e, r15	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	ed be       	out	0x3d, r14	; 61
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	bf 90       	pop	r11
     ede:	af 90       	pop	r10
     ee0:	9f 90       	pop	r9
     ee2:	8f 90       	pop	r8
     ee4:	08 95       	ret

00000ee6 <_ZN3I2CC1Ev>:

#include "I2C.h"

#define F_CPU 8000000

I2C::I2C() {}
     ee6:	08 95       	ret

00000ee8 <_ZN3I2C4initEh>:

void I2C::init(uint8_t address) {
    this->address = address;
     ee8:	fc 01       	movw	r30, r24
     eea:	60 83       	st	Z, r22
    TWSR = 0;
     eec:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR = ((F_CPU/SCL_CLOCK)-16)/2;
     ef0:	80 e2       	ldi	r24, 0x20	; 32
     ef2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     ef6:	08 95       	ret

00000ef8 <_ZN3I2C5startEv>:
}

uint8_t I2C::start() {
     ef8:	dc 01       	movw	r26, r24
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     efa:	84 ea       	ldi	r24, 0xA4	; 164
     efc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while(!(TWCR & (1<<TWINT)));
     f00:	ec eb       	ldi	r30, 0xBC	; 188
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	90 81       	ld	r25, Z
     f06:	99 23       	and	r25, r25
     f08:	ec f7       	brge	.-6      	; 0xf04 <_ZN3I2C5startEv+0xc>

    twi_status_register = TW_STATUS & 0xF8;
     f0a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f0e:	98 7f       	andi	r25, 0xF8	; 248
     f10:	11 96       	adiw	r26, 0x01	; 1
     f12:	9c 93       	st	X, r25
     f14:	11 97       	sbiw	r26, 0x01	; 1
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
     f16:	98 30       	cpi	r25, 0x08	; 8
     f18:	11 f0       	breq	.+4      	; 0xf1e <_ZN3I2C5startEv+0x26>
     f1a:	90 31       	cpi	r25, 0x10	; 16
     f1c:	b9 f4       	brne	.+46     	; 0xf4c <_ZN3I2C5startEv+0x54>
        return 1;
    }

    TWDR = address;
     f1e:	8c 91       	ld	r24, X
     f20:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = (1<<TWINT) | (1<<TWEN);
     f24:	84 e8       	ldi	r24, 0x84	; 132
     f26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    while(!(TWCR & (1<<TWINT)));
     f2a:	ec eb       	ldi	r30, 0xBC	; 188
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	90 81       	ld	r25, Z
     f30:	99 23       	and	r25, r25
     f32:	ec f7       	brge	.-6      	; 0xf2e <_ZN3I2C5startEv+0x36>

    this->twi_status_register = TW_STATUS & 0xF8;
     f34:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f38:	98 7f       	andi	r25, 0xF8	; 248
     f3a:	11 96       	adiw	r26, 0x01	; 1
     f3c:	9c 93       	st	X, r25
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
     f3e:	98 31       	cpi	r25, 0x18	; 24
     f40:	39 f0       	breq	.+14     	; 0xf50 <_ZN3I2C5startEv+0x58>
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    while(!(TWCR & (1<<TWINT)));

    twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
        return 1;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 34       	cpi	r25, 0x40	; 64
     f46:	29 f4       	brne	.+10     	; 0xf52 <_ZN3I2C5startEv+0x5a>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	08 95       	ret
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	08 95       	ret
    this->twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
        return 1;
    }

    return 0;
     f50:	80 e0       	ldi	r24, 0x00	; 0
}
     f52:	08 95       	ret

00000f54 <_ZN3I2C5writeEh>:

uint8_t I2C::write(uint8_t data) {
     f54:	dc 01       	movw	r26, r24
    TWDR = data;
     f56:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = (1<<TWINT) | (1<<TWEN);
     f5a:	84 e8       	ldi	r24, 0x84	; 132
     f5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    while(!(TWCR & (1<<TWINT)));
     f60:	ec eb       	ldi	r30, 0xBC	; 188
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	90 81       	ld	r25, Z
     f66:	99 23       	and	r25, r25
     f68:	ec f7       	brge	.-6      	; 0xf64 <_ZN3I2C5writeEh+0x10>

    this->twi_status_register = TW_STATUS & 0xF8;
     f6a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f6e:	98 7f       	andi	r25, 0xF8	; 248
     f70:	11 96       	adiw	r26, 0x01	; 1
     f72:	9c 93       	st	X, r25
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	98 32       	cpi	r25, 0x28	; 40
     f78:	09 f4       	brne	.+2      	; 0xf7c <_ZN3I2C5writeEh+0x28>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
    if (this->twi_status_register != TW_MT_DATA_ACK) {
        return 1;
    } else {
        return 0;
    }
}
     f7c:	08 95       	ret

00000f7e <_ZN3I2C4stopEv>:

void I2C::stop(void) {
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     f7e:	84 e9       	ldi	r24, 0x94	; 148
     f80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while(TWCR & (1<<TWSTO));
     f84:	ec eb       	ldi	r30, 0xBC	; 188
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	84 fd       	sbrc	r24, 4
     f8c:	fd cf       	rjmp	.-6      	; 0xf88 <_ZN3I2C4stopEv+0xa>
     f8e:	08 95       	ret

00000f90 <main>:
Framebuffer myDisplay;

int main(void){
	unsigned char menuSelector = 0;
	
	cli(); //Ensure interrupts are turned off
     f90:	f8 94       	cli
	//Set system clock to 8MHz
	CLKPR = _BV(CLKPCE);
     f92:	e1 e6       	ldi	r30, 0x61	; 97
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 e8       	ldi	r24, 0x80	; 128
     f98:	80 83       	st	Z, r24
	CLKPR = 0;
     f9a:	10 82       	st	Z, r1
	
	//pin 6 input for stepper calibration pin
	DDRE &= 0x0e; 
     f9c:	8d b1       	in	r24, 0x0d	; 13
     f9e:	8e 70       	andi	r24, 0x0E	; 14
     fa0:	8d b9       	out	0x0d, r24	; 13
	//Leds output
	DDRC |= 0xff;
     fa2:	87 b1       	in	r24, 0x07	; 7
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	87 b9       	out	0x07, r24	; 7
	//Joystick input w/ pullup up(pin7) left(pin6) select(pin5) 
	DDRB &= ~JS_UP_PIN & ~JS_LEFT_PIN & ~JS_SELECT_PIN; 
     fa8:	84 b1       	in	r24, 0x04	; 4
     faa:	8f 71       	andi	r24, 0x1F	; 31
     fac:	84 b9       	out	0x04, r24	; 4
	PORTB |= JS_UP_PIN | JS_LEFT_PIN | JS_SELECT_PIN;
     fae:	85 b1       	in	r24, 0x05	; 5
     fb0:	80 6e       	ori	r24, 0xE0	; 224
     fb2:	85 b9       	out	0x05, r24	; 5
	//Joystick input w/ pullup down(pin5) right(pin4)
	DDRE &= ~JS_DOWN_PIN & ~JS_RIGHT_PIN;
     fb4:	8d b1       	in	r24, 0x0d	; 13
     fb6:	8f 7c       	andi	r24, 0xCF	; 207
     fb8:	8d b9       	out	0x0d, r24	; 13
	PORTE |= JS_DOWN_PIN | JS_RIGHT_PIN;
     fba:	8e b1       	in	r24, 0x0e	; 14
     fbc:	80 63       	ori	r24, 0x30	; 48
	
	initADC();
	initMotor();
	initTimer();
     fbe:	8e b9       	out	0x0e, r24	; 14
     fc0:	14 db       	rcall	.-2520   	; 0x5ea <_Z7initADCv>
     fc2:	ed d2       	rcall	.+1498   	; 0x159e <_Z9initMotorv>
     fc4:	87 d5       	rcall	.+2830   	; 0x1ad4 <_Z9initTimerv>
     fc6:	42 dc       	rcall	.-1916   	; 0x84c <_Z10initExtIntv>
     fc8:	ea d2       	rcall	.+1492   	; 0x159e <_Z9initMotorv>
     fca:	bd d3       	rcall	.+1914   	; 0x1746 <_Z11initStepperv>
     fcc:	0b d3       	rcall	.+1558   	; 0x15e4 <_Z10motorBrakev>
     fce:	8f ea       	ldi	r24, 0xAF	; 175
     fd0:	ff d2       	rcall	.+1534   	; 0x15d0 <_Z10motorSpeedc>
     fd2:	c0 e0       	ldi	r28, 0x00	; 0
     fd4:	cc 24       	eor	r12, r12
     fd6:	c3 94       	inc	r12
     fd8:	dc 2e       	mov	r13, r28
     fda:	02 e0       	ldi	r16, 0x02	; 2
     fdc:	e0 2e       	mov	r14, r16
     fde:	14 e0       	ldi	r17, 0x04	; 4
     fe0:	0f 2e       	mov	r0, r31
     fe2:	f3 e0       	ldi	r31, 0x03	; 3
     fe4:	ff 2e       	mov	r15, r31
     fe6:	f0 2d       	mov	r31, r0
     fe8:	e7 d0       	rcall	.+462    	; 0x11b8 <_Z10menu1Startv>
     fea:	dc 2f       	mov	r29, r28
     fec:	65 99       	sbic	0x0c, 5	; 12
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <main+0x64>
     ff0:	12 d1       	rcall	.+548    	; 0x1216 <_Z16menu1Calibrationv>
     ff2:	dc 2d       	mov	r29, r12
     ff4:	1f 99       	sbic	0x03, 7	; 3
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <main+0x6c>
     ff8:	df d0       	rcall	.+446    	; 0x11b8 <_Z10menu1Startv>
     ffa:	dd 2d       	mov	r29, r13
     ffc:	1d 99       	sbic	0x03, 5	; 3
     ffe:	f6 cf       	rjmp	.-20     	; 0xfec <main+0x5c>
    1000:	84 e1       	ldi	r24, 0x14	; 20
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	73 d5       	rcall	.+2790   	; 0x1aec <_Z6mTimeri>
    1006:	1d 9b       	sbis	0x03, 5	; 3
    1008:	fe cf       	rjmp	.-4      	; 0x1006 <main+0x76>
    100a:	84 e1       	ldi	r24, 0x14	; 20
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	6e d5       	rcall	.+2780   	; 0x1aec <_Z6mTimeri>
    1010:	d1 30       	cpi	r29, 0x01	; 1
    1012:	09 f0       	breq	.+2      	; 0x1016 <main+0x86>
    1014:	4e c0       	rjmp	.+156    	; 0x10b2 <main+0x122>
    1016:	2e d1       	rcall	.+604    	; 0x1274 <_Z9menu2Homev>
    1018:	80 2f       	mov	r24, r16
    101a:	65 99       	sbic	0x0c, 5	; 12
    101c:	ac c0       	rjmp	.+344    	; 0x1176 <main+0x1e6>
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	09 f0       	breq	.+2      	; 0x1024 <main+0x94>
    1022:	a9 c0       	rjmp	.+338    	; 0x1176 <main+0x1e6>
    1024:	ab c0       	rjmp	.+342    	; 0x117c <main+0x1ec>
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	09 f0       	breq	.+2      	; 0x102c <main+0x9c>
    102a:	ab c0       	rjmp	.+342    	; 0x1182 <main+0x1f2>
    102c:	ad c0       	rjmp	.+346    	; 0x1188 <main+0x1f8>
    102e:	65 9b       	sbis	0x0c, 5	; 12
    1030:	fe cf       	rjmp	.-4      	; 0x102e <main+0x9e>
    1032:	84 e1       	ldi	r24, 0x14	; 20
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	5a d5       	rcall	.+2740   	; 0x1aec <_Z6mTimeri>
    1038:	3f d1       	rcall	.+638    	; 0x12b8 <_Z12menu2Stepperv>
    103a:	81 2f       	mov	r24, r17
    103c:	b6 c0       	rjmp	.+364    	; 0x11aa <main+0x21a>
    103e:	83 30       	cpi	r24, 0x03	; 3
    1040:	09 f0       	breq	.+2      	; 0x1044 <main+0xb4>
    1042:	a6 c0       	rjmp	.+332    	; 0x1190 <main+0x200>
    1044:	a8 c0       	rjmp	.+336    	; 0x1196 <main+0x206>
    1046:	1f 9b       	sbis	0x03, 7	; 3
    1048:	fe cf       	rjmp	.-4      	; 0x1046 <main+0xb6>
    104a:	84 e1       	ldi	r24, 0x14	; 20
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	4e d5       	rcall	.+2716   	; 0x1aec <_Z6mTimeri>
    1050:	33 d1       	rcall	.+614    	; 0x12b8 <_Z12menu2Stepperv>
    1052:	81 2f       	mov	r24, r17
    1054:	aa c0       	rjmp	.+340    	; 0x11aa <main+0x21a>
    1056:	84 30       	cpi	r24, 0x04	; 4
    1058:	09 f0       	breq	.+2      	; 0x105c <main+0xcc>
    105a:	a4 c0       	rjmp	.+328    	; 0x11a4 <main+0x214>
    105c:	a0 c0       	rjmp	.+320    	; 0x119e <main+0x20e>
    105e:	1d 99       	sbic	0x03, 5	; 3
    1060:	dc cf       	rjmp	.-72     	; 0x101a <main+0x8a>
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	d1 f4       	brne	.+52     	; 0x109a <main+0x10a>
    1066:	14 db       	rcall	.-2520   	; 0x690 <_Z12calibrateADCv>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	fc 01       	movw	r30, r24
    106e:	e3 51       	subi	r30, 0x13	; 19
    1070:	fe 4f       	sbci	r31, 0xFE	; 254
    1072:	10 82       	st	Z, r1
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	88 30       	cpi	r24, 0x08	; 8
    1078:	91 05       	cpc	r25, r1
    107a:	c1 f7       	brne	.-16     	; 0x106c <main+0xdc>
    107c:	c0 93 eb 01 	sts	0x01EB, r28	; 0x8001eb <frontOfQueue>
    1080:	c0 93 ea 01 	sts	0x01EA, r28	; 0x8001ea <backOfQueue>
    1084:	1d 99       	sbic	0x03, 5	; 3
    1086:	fe cf       	rjmp	.-4      	; 0x1084 <main+0xf4>
    1088:	84 e1       	ldi	r24, 0x14	; 20
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	2f d5       	rcall	.+2654   	; 0x1aec <_Z6mTimeri>
    108e:	1d 9b       	sbis	0x03, 5	; 3
    1090:	fe cf       	rjmp	.-4      	; 0x108e <main+0xfe>
    1092:	84 e1       	ldi	r24, 0x14	; 20
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	2a d5       	rcall	.+2644   	; 0x1aec <_Z6mTimeri>
    1098:	be cf       	rjmp	.-132    	; 0x1016 <main+0x86>
    109a:	e5 d3       	rcall	.+1994   	; 0x1866 <_Z11homeStepperv>
    109c:	a5 cf       	rjmp	.-182    	; 0xfe8 <main+0x58>
    109e:	1e 9b       	sbis	0x03, 6	; 3
    10a0:	16 c0       	rjmp	.+44     	; 0x10ce <main+0x13e>
    10a2:	1f 99       	sbic	0x03, 7	; 3
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <main+0x11a>
    10a6:	4c d1       	rcall	.+664    	; 0x1340 <_Z10menuDebugQv>
    10a8:	fa cf       	rjmp	.-12     	; 0x109e <main+0x10e>
    10aa:	65 99       	sbic	0x0c, 5	; 12
    10ac:	f8 cf       	rjmp	.-16     	; 0x109e <main+0x10e>
    10ae:	ee d1       	rcall	.+988    	; 0x148c <_Z20menuDisplayItemCountv>
    10b0:	f6 cf       	rjmp	.-20     	; 0x109e <main+0x10e>
    10b2:	0f 2e       	mov	r0, r31
    10b4:	f4 e6       	ldi	r31, 0x64	; 100
    10b6:	cf 2e       	mov	r12, r31
    10b8:	f0 2d       	mov	r31, r0
    10ba:	d1 2c       	mov	r13, r1
    10bc:	0f 2e       	mov	r0, r31
    10be:	f2 e3       	ldi	r31, 0x32	; 50
    10c0:	ef 2e       	mov	r14, r31
    10c2:	f1 2c       	mov	r15, r1
    10c4:	f0 2d       	mov	r31, r0
    10c6:	06 e9       	ldi	r16, 0x96	; 150
    10c8:	10 e0       	ldi	r17, 0x00	; 0
    10ca:	cc 2d       	mov	r28, r12
    10cc:	dd 2d       	mov	r29, r13
    10ce:	85 d2       	rcall	.+1290   	; 0x15da <_Z12motorForwardv>
    10d0:	44 d3       	rcall	.+1672   	; 0x175a <_Z12startStepperv>
    10d2:	78 94       	sei
    10d4:	35 d1       	rcall	.+618    	; 0x1340 <_Z10menuDebugQv>
    10d6:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <reflQueueChange>
    10da:	88 23       	and	r24, r24
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <main+0x150>
    10de:	40 c0       	rjmp	.+128    	; 0x1160 <main+0x1d0>
    10e0:	f8 94       	cli
    10e2:	80 91 f7 05 	lds	r24, 0x05F7	; 0x8005f7 <delayStepper>
    10e6:	88 23       	and	r24, r24
    10e8:	29 f0       	breq	.+10     	; 0x10f4 <main+0x164>
    10ea:	8a e0       	ldi	r24, 0x0A	; 10
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	fe d4       	rcall	.+2556   	; 0x1aec <_Z6mTimeri>
    10f0:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <delayStepper>
    10f4:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <frontOfQueue>
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	e3 51       	subi	r30, 0x13	; 19
    10fc:	fe 4f       	sbci	r31, 0xFE	; 254
    10fe:	80 81       	ld	r24, Z
    1100:	81 11       	cpse	r24, r1
    1102:	05 c0       	rjmp	.+10     	; 0x110e <main+0x17e>
    1104:	10 92 fc 05 	sts	0x05FC, r1	; 0x8005fc <stepGoalPosition+0x1>
    1108:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <stepGoalPosition>
    110c:	26 c0       	rjmp	.+76     	; 0x115a <main+0x1ca>
    110e:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <frontOfQueue>
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	e3 51       	subi	r30, 0x13	; 19
    1116:	fe 4f       	sbci	r31, 0xFE	; 254
    1118:	80 81       	ld	r24, Z
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	29 f4       	brne	.+10     	; 0x1128 <main+0x198>
    111e:	d0 93 fc 05 	sts	0x05FC, r29	; 0x8005fc <stepGoalPosition+0x1>
    1122:	c0 93 fb 05 	sts	0x05FB, r28	; 0x8005fb <stepGoalPosition>
    1126:	19 c0       	rjmp	.+50     	; 0x115a <main+0x1ca>
    1128:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <frontOfQueue>
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	e3 51       	subi	r30, 0x13	; 19
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	80 81       	ld	r24, Z
    1134:	82 30       	cpi	r24, 0x02	; 2
    1136:	29 f4       	brne	.+10     	; 0x1142 <main+0x1b2>
    1138:	10 93 fc 05 	sts	0x05FC, r17	; 0x8005fc <stepGoalPosition+0x1>
    113c:	00 93 fb 05 	sts	0x05FB, r16	; 0x8005fb <stepGoalPosition>
    1140:	0c c0       	rjmp	.+24     	; 0x115a <main+0x1ca>
    1142:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <frontOfQueue>
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	e3 51       	subi	r30, 0x13	; 19
    114a:	fe 4f       	sbci	r31, 0xFE	; 254
    114c:	80 81       	ld	r24, Z
    114e:	83 30       	cpi	r24, 0x03	; 3
    1150:	21 f4       	brne	.+8      	; 0x115a <main+0x1ca>
    1152:	f0 92 fc 05 	sts	0x05FC, r15	; 0x8005fc <stepGoalPosition+0x1>
    1156:	e0 92 fb 05 	sts	0x05FB, r14	; 0x8005fb <stepGoalPosition>
    115a:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <reflQueueChange>
    115e:	78 94       	sei
    1160:	64 99       	sbic	0x0c, 4	; 12
    1162:	b8 cf       	rjmp	.-144    	; 0x10d4 <main+0x144>
    1164:	82 b1       	in	r24, 0x02	; 2
    1166:	8f 73       	andi	r24, 0x3F	; 63
    1168:	82 b9       	out	0x02, r24	; 2
    116a:	8c 2d       	mov	r24, r12
    116c:	9d 2d       	mov	r25, r13
    116e:	be d4       	rcall	.+2428   	; 0x1aec <_Z6mTimeri>
    1170:	f8 94       	cli
    1172:	8c d1       	rcall	.+792    	; 0x148c <_Z20menuDisplayItemCountv>
    1174:	94 cf       	rjmp	.-216    	; 0x109e <main+0x10e>
    1176:	65 9b       	sbis	0x0c, 5	; 12
    1178:	56 cf       	rjmp	.-340    	; 0x1026 <main+0x96>
    117a:	03 c0       	rjmp	.+6      	; 0x1182 <main+0x1f2>
    117c:	bf d0       	rcall	.+382    	; 0x12fc <_Z9menu2Reflv>
    117e:	8f 2d       	mov	r24, r15
    1180:	6e cf       	rjmp	.-292    	; 0x105e <main+0xce>
    1182:	1f 9b       	sbis	0x03, 7	; 3
    1184:	5c cf       	rjmp	.-328    	; 0x103e <main+0xae>
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <main+0x200>
    1188:	84 e1       	ldi	r24, 0x14	; 20
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	af d4       	rcall	.+2398   	; 0x1aec <_Z6mTimeri>
    118e:	4f cf       	rjmp	.-354    	; 0x102e <main+0x9e>
    1190:	1f 9b       	sbis	0x03, 7	; 3
    1192:	61 cf       	rjmp	.-318    	; 0x1056 <main+0xc6>
    1194:	07 c0       	rjmp	.+14     	; 0x11a4 <main+0x214>
    1196:	84 e1       	ldi	r24, 0x14	; 20
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a8 d4       	rcall	.+2384   	; 0x1aec <_Z6mTimeri>
    119c:	54 cf       	rjmp	.-344    	; 0x1046 <main+0xb6>
    119e:	6a d0       	rcall	.+212    	; 0x1274 <_Z9menu2Homev>
    11a0:	8e 2d       	mov	r24, r14
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <main+0x21a>
    11a4:	1e 99       	sbic	0x03, 6	; 3
    11a6:	5b cf       	rjmp	.-330    	; 0x105e <main+0xce>
    11a8:	1f cf       	rjmp	.-450    	; 0xfe8 <main+0x58>
    11aa:	1d 99       	sbic	0x03, 5	; 3
    11ac:	36 cf       	rjmp	.-404    	; 0x101a <main+0x8a>
    11ae:	75 cf       	rjmp	.-278    	; 0x109a <main+0x10a>

000011b0 <_GLOBAL__sub_I_debug>:
    11b0:	85 ef       	ldi	r24, 0xF5	; 245
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	68 cd       	rjmp	.-1328   	; 0xc86 <_ZN11FramebufferC1Ev>
    11b6:	08 95       	ret

000011b8 <_Z10menu1Startv>:
	myDisplay.drawNumber(60,0,stepGoalPosition);
	myDisplay.drawString(0,16,"Cur:");
	myDisplay.drawNumber(60,16,stepGoalPosition);
	myDisplay.drawString(0,32,"Delay:");
	myDisplay.drawNumber(72,32,stepperDelay);
	myDisplay.show();
    11b8:	ef 92       	push	r14
    11ba:	0f 93       	push	r16
    11bc:	85 ef       	ldi	r24, 0xF5	; 245
    11be:	91 e0       	ldi	r25, 0x01	; 1
    11c0:	5b dd       	rcall	.-1354   	; 0xc78 <_ZN11Framebuffer5clearEv>
    11c2:	27 e3       	ldi	r18, 0x37	; 55
    11c4:	31 e0       	ldi	r19, 0x01	; 1
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	85 ef       	ldi	r24, 0xF5	; 245
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	fb dd       	rcall	.-1034   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    11d4:	ee 24       	eor	r14, r14
    11d6:	e3 94       	inc	r14
    11d8:	01 e1       	ldi	r16, 0x11	; 17
    11da:	2f e7       	ldi	r18, 0x7F	; 127
    11dc:	40 e1       	ldi	r20, 0x10	; 16
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	85 ef       	ldi	r24, 0xF5	; 245
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	06 dd       	rcall	.-1524   	; 0xbf2 <_ZN11Framebuffer13drawRectangleEhhhhh>
    11e6:	23 e4       	ldi	r18, 0x43	; 67
    11e8:	31 e0       	ldi	r19, 0x01	; 1
    11ea:	44 e1       	ldi	r20, 0x14	; 20
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	85 ef       	ldi	r24, 0xF5	; 245
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	e9 dd       	rcall	.-1070   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    11f8:	2a e4       	ldi	r18, 0x4A	; 74
    11fa:	31 e0       	ldi	r19, 0x01	; 1
    11fc:	44 e2       	ldi	r20, 0x24	; 36
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	85 ef       	ldi	r24, 0xF5	; 245
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	e0 dd       	rcall	.-1088   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    120a:	85 ef       	ldi	r24, 0xF5	; 245
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	45 dd       	rcall	.-1398   	; 0xc9a <_ZN11Framebuffer4showEv>
    1210:	0f 91       	pop	r16
    1212:	ef 90       	pop	r14
    1214:	08 95       	ret

00001216 <_Z16menu1Calibrationv>:
    1216:	ef 92       	push	r14
    1218:	0f 93       	push	r16
    121a:	85 ef       	ldi	r24, 0xF5	; 245
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	2c dd       	rcall	.-1448   	; 0xc78 <_ZN11Framebuffer5clearEv>
    1220:	27 e3       	ldi	r18, 0x37	; 55
    1222:	31 e0       	ldi	r19, 0x01	; 1
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	85 ef       	ldi	r24, 0xF5	; 245
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	cc dd       	rcall	.-1128   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    1232:	ee 24       	eor	r14, r14
    1234:	e3 94       	inc	r14
    1236:	01 e1       	ldi	r16, 0x11	; 17
    1238:	2f e7       	ldi	r18, 0x7F	; 127
    123a:	40 e1       	ldi	r20, 0x10	; 16
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	85 ef       	ldi	r24, 0xF5	; 245
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	d7 dc       	rcall	.-1618   	; 0xbf2 <_ZN11Framebuffer13drawRectangleEhhhhh>
    1244:	25 e5       	ldi	r18, 0x55	; 85
    1246:	31 e0       	ldi	r19, 0x01	; 1
    1248:	44 e1       	ldi	r20, 0x14	; 20
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	85 ef       	ldi	r24, 0xF5	; 245
    1252:	91 e0       	ldi	r25, 0x01	; 1
    1254:	ba dd       	rcall	.-1164   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    1256:	2c e5       	ldi	r18, 0x5C	; 92
    1258:	31 e0       	ldi	r19, 0x01	; 1
    125a:	44 e2       	ldi	r20, 0x24	; 36
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	85 ef       	ldi	r24, 0xF5	; 245
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	b1 dd       	rcall	.-1182   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    1268:	85 ef       	ldi	r24, 0xF5	; 245
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	16 dd       	rcall	.-1492   	; 0xc9a <_ZN11Framebuffer4showEv>
    126e:	0f 91       	pop	r16
    1270:	ef 90       	pop	r14
    1272:	08 95       	ret

00001274 <_Z9menu2Homev>:
    1274:	85 ef       	ldi	r24, 0xF5	; 245
    1276:	91 e0       	ldi	r25, 0x01	; 1
    1278:	ff dc       	rcall	.-1538   	; 0xc78 <_ZN11Framebuffer5clearEv>
    127a:	27 e6       	ldi	r18, 0x67	; 103
    127c:	31 e0       	ldi	r19, 0x01	; 1
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	85 ef       	ldi	r24, 0xF5	; 245
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	9f dd       	rcall	.-1218   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    128c:	22 e7       	ldi	r18, 0x72	; 114
    128e:	31 e0       	ldi	r19, 0x01	; 1
    1290:	40 e1       	ldi	r20, 0x10	; 16
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	85 ef       	ldi	r24, 0xF5	; 245
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	96 dd       	rcall	.-1236   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    129e:	2b e7       	ldi	r18, 0x7B	; 123
    12a0:	31 e0       	ldi	r19, 0x01	; 1
    12a2:	40 e2       	ldi	r20, 0x20	; 32
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	85 ef       	ldi	r24, 0xF5	; 245
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	8d dd       	rcall	.-1254   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    12b0:	85 ef       	ldi	r24, 0xF5	; 245
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	f2 cc       	rjmp	.-1564   	; 0xc9a <_ZN11Framebuffer4showEv>
    12b6:	08 95       	ret

000012b8 <_Z12menu2Stepperv>:
    12b8:	85 ef       	ldi	r24, 0xF5	; 245
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	dd dc       	rcall	.-1606   	; 0xc78 <_ZN11Framebuffer5clearEv>
    12be:	26 e8       	ldi	r18, 0x86	; 134
    12c0:	31 e0       	ldi	r19, 0x01	; 1
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	85 ef       	ldi	r24, 0xF5	; 245
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	7d dd       	rcall	.-1286   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    12d0:	21 e9       	ldi	r18, 0x91	; 145
    12d2:	31 e0       	ldi	r19, 0x01	; 1
    12d4:	40 e1       	ldi	r20, 0x10	; 16
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	85 ef       	ldi	r24, 0xF5	; 245
    12de:	91 e0       	ldi	r25, 0x01	; 1
    12e0:	74 dd       	rcall	.-1304   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    12e2:	2b e7       	ldi	r18, 0x7B	; 123
    12e4:	31 e0       	ldi	r19, 0x01	; 1
    12e6:	40 e2       	ldi	r20, 0x20	; 32
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	85 ef       	ldi	r24, 0xF5	; 245
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	6b dd       	rcall	.-1322   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    12f4:	85 ef       	ldi	r24, 0xF5	; 245
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	d0 cc       	rjmp	.-1632   	; 0xc9a <_ZN11Framebuffer4showEv>
    12fa:	08 95       	ret

000012fc <_Z9menu2Reflv>:
    12fc:	85 ef       	ldi	r24, 0xF5	; 245
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	bb dc       	rcall	.-1674   	; 0xc78 <_ZN11Framebuffer5clearEv>
    1302:	26 e8       	ldi	r18, 0x86	; 134
    1304:	31 e0       	ldi	r19, 0x01	; 1
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	85 ef       	ldi	r24, 0xF5	; 245
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	5b dd       	rcall	.-1354   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    1314:	22 e7       	ldi	r18, 0x72	; 114
    1316:	31 e0       	ldi	r19, 0x01	; 1
    1318:	40 e1       	ldi	r20, 0x10	; 16
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	85 ef       	ldi	r24, 0xF5	; 245
    1322:	91 e0       	ldi	r25, 0x01	; 1
    1324:	52 dd       	rcall	.-1372   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    1326:	2a e9       	ldi	r18, 0x9A	; 154
    1328:	31 e0       	ldi	r19, 0x01	; 1
    132a:	40 e2       	ldi	r20, 0x20	; 32
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	85 ef       	ldi	r24, 0xF5	; 245
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	49 dd       	rcall	.-1390   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    1338:	85 ef       	ldi	r24, 0xF5	; 245
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	ae cc       	rjmp	.-1700   	; 0xc9a <_ZN11Framebuffer4showEv>
    133e:	08 95       	ret

00001340 <_Z10menuDebugQv>:
    1340:	ef 92       	push	r14
    1342:	0f 93       	push	r16
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	85 ef       	ldi	r24, 0xF5	; 245
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	95 dc       	rcall	.-1750   	; 0xc78 <_ZN11Framebuffer5clearEv>
    134e:	25 ea       	ldi	r18, 0xA5	; 165
    1350:	31 e0       	ldi	r19, 0x01	; 1
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	85 ef       	ldi	r24, 0xF5	; 245
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	35 dd       	rcall	.-1430   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    1360:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
    1364:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	68 e4       	ldi	r22, 0x48	; 72
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	85 ef       	ldi	r24, 0xF5	; 245
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	60 dd       	rcall	.-1344   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
    1376:	ee 24       	eor	r14, r14
    1378:	e3 94       	inc	r14
    137a:	01 e1       	ldi	r16, 0x11	; 17
    137c:	2f e7       	ldi	r18, 0x7F	; 127
    137e:	40 e1       	ldi	r20, 0x10	; 16
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	85 ef       	ldi	r24, 0xF5	; 245
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	35 dc       	rcall	.-1942   	; 0xbf2 <_ZN11Framebuffer13drawRectangleEhhhhh>
    1388:	cd ee       	ldi	r28, 0xED	; 237
    138a:	d1 e0       	ldi	r29, 0x01	; 1
    138c:	28 81       	ld	r18, Y
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	44 e1       	ldi	r20, 0x14	; 20
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	85 ef       	ldi	r24, 0xF5	; 245
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	4c dd       	rcall	.-1384   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
    139e:	29 81       	ldd	r18, Y+1	; 0x01
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	44 e1       	ldi	r20, 0x14	; 20
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	6c e0       	ldi	r22, 0x0C	; 12
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	85 ef       	ldi	r24, 0xF5	; 245
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	43 dd       	rcall	.-1402   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
    13b0:	2a 81       	ldd	r18, Y+2	; 0x02
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	44 e1       	ldi	r20, 0x14	; 20
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	68 e1       	ldi	r22, 0x18	; 24
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	85 ef       	ldi	r24, 0xF5	; 245
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	3a dd       	rcall	.-1420   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
    13c2:	2b 81       	ldd	r18, Y+3	; 0x03
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	44 e1       	ldi	r20, 0x14	; 20
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	64 e2       	ldi	r22, 0x24	; 36
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	85 ef       	ldi	r24, 0xF5	; 245
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	31 dd       	rcall	.-1438   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
    13d4:	2c 81       	ldd	r18, Y+4	; 0x04
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	44 e1       	ldi	r20, 0x14	; 20
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	60 e3       	ldi	r22, 0x30	; 48
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	85 ef       	ldi	r24, 0xF5	; 245
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	28 dd       	rcall	.-1456   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
    13e6:	2d 81       	ldd	r18, Y+5	; 0x05
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	44 e1       	ldi	r20, 0x14	; 20
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	6c e3       	ldi	r22, 0x3C	; 60
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	85 ef       	ldi	r24, 0xF5	; 245
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	1f dd       	rcall	.-1474   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
    13f8:	2e 81       	ldd	r18, Y+6	; 0x06
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	44 e1       	ldi	r20, 0x14	; 20
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	68 e4       	ldi	r22, 0x48	; 72
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	85 ef       	ldi	r24, 0xF5	; 245
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	16 dd       	rcall	.-1492   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
    140a:	2f 81       	ldd	r18, Y+7	; 0x07
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	44 e1       	ldi	r20, 0x14	; 20
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	64 e5       	ldi	r22, 0x54	; 84
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	85 ef       	ldi	r24, 0xF5	; 245
    1418:	91 e0       	ldi	r25, 0x01	; 1
    141a:	0d dd       	rcall	.-1510   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
    141c:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <reflQueueCount>
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	44 e1       	ldi	r20, 0x14	; 20
    1424:	50 e0       	ldi	r21, 0x00	; 0
    1426:	6c e6       	ldi	r22, 0x6C	; 108
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	85 ef       	ldi	r24, 0xF5	; 245
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	03 dd       	rcall	.-1530   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
    1430:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <frontOfQueue>
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	cb 01       	movw	r24, r22
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	68 0f       	add	r22, r24
    143e:	79 1f       	adc	r23, r25
    1440:	66 0f       	add	r22, r22
    1442:	77 1f       	adc	r23, r23
    1444:	66 0f       	add	r22, r22
    1446:	77 1f       	adc	r23, r23
    1448:	2b ea       	ldi	r18, 0xAB	; 171
    144a:	31 e0       	ldi	r19, 0x01	; 1
    144c:	44 e2       	ldi	r20, 0x24	; 36
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	85 ef       	ldi	r24, 0xF5	; 245
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	ba dc       	rcall	.-1676   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    1456:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <backOfQueue>
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	cb 01       	movw	r24, r22
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	68 0f       	add	r22, r24
    1464:	79 1f       	adc	r23, r25
    1466:	66 0f       	add	r22, r22
    1468:	77 1f       	adc	r23, r23
    146a:	66 0f       	add	r22, r22
    146c:	77 1f       	adc	r23, r23
    146e:	2d ea       	ldi	r18, 0xAD	; 173
    1470:	31 e0       	ldi	r19, 0x01	; 1
    1472:	44 e2       	ldi	r20, 0x24	; 36
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	85 ef       	ldi	r24, 0xF5	; 245
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	a7 dc       	rcall	.-1714   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    147c:	85 ef       	ldi	r24, 0xF5	; 245
    147e:	91 e0       	ldi	r25, 0x01	; 1
    1480:	0c dc       	rcall	.-2024   	; 0xc9a <_ZN11Framebuffer4showEv>
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	0f 91       	pop	r16
    1488:	ef 90       	pop	r14
    148a:	08 95       	ret

0000148c <_Z20menuDisplayItemCountv>:
}

void menuDisplayItemCount(){
	myDisplay.clear();
    148c:	85 ef       	ldi	r24, 0xF5	; 245
    148e:	91 e0       	ldi	r25, 0x01	; 1
    1490:	f3 db       	rcall	.-2074   	; 0xc78 <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(column(1),row(1),"On Belt:");
    1492:	21 ec       	ldi	r18, 0xC1	; 193
    1494:	31 e0       	ldi	r19, 0x01	; 1
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	50 e0       	ldi	r21, 0x00	; 0
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	70 e0       	ldi	r23, 0x00	; 0
    149e:	85 ef       	ldi	r24, 0xF5	; 245
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	93 dc       	rcall	.-1754   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(9),row(1),reflQueueCount);
    14a4:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <reflQueueCount>
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	60 e6       	ldi	r22, 0x60	; 96
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	85 ef       	ldi	r24, 0xF5	; 245
    14b4:	91 e0       	ldi	r25, 0x01	; 1
    14b6:	bf dc       	rcall	.-1666   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(column(1),row(2),"TSorted:");
    14b8:	2a ec       	ldi	r18, 0xCA	; 202
    14ba:	31 e0       	ldi	r19, 0x01	; 1
    14bc:	40 e1       	ldi	r20, 0x10	; 16
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	85 ef       	ldi	r24, 0xF5	; 245
    14c6:	91 e0       	ldi	r25, 0x01	; 1
    14c8:	80 dc       	rcall	.-1792   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(9),row(2),(reflQueueCount+blackCount+whiteCount+steelCount+aluminumCount));
    14ca:	50 91 ec 01 	lds	r21, 0x01EC	; 0x8001ec <reflQueueCount>
    14ce:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <blackCount>
    14d2:	40 91 e7 01 	lds	r20, 0x01E7	; 0x8001e7 <whiteCount>
    14d6:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <steelCount>
    14da:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <aluminumCount>
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	25 0f       	add	r18, r21
    14e2:	31 1d       	adc	r19, r1
    14e4:	24 0f       	add	r18, r20
    14e6:	31 1d       	adc	r19, r1
    14e8:	29 0f       	add	r18, r25
    14ea:	31 1d       	adc	r19, r1
    14ec:	28 0f       	add	r18, r24
    14ee:	31 1d       	adc	r19, r1
    14f0:	40 e1       	ldi	r20, 0x10	; 16
    14f2:	50 e0       	ldi	r21, 0x00	; 0
    14f4:	60 e6       	ldi	r22, 0x60	; 96
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	85 ef       	ldi	r24, 0xF5	; 245
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	9c dc       	rcall	.-1736   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(column(1),row(3),"B=");
    14fe:	23 ed       	ldi	r18, 0xD3	; 211
    1500:	31 e0       	ldi	r19, 0x01	; 1
    1502:	40 e2       	ldi	r20, 0x20	; 32
    1504:	50 e0       	ldi	r21, 0x00	; 0
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	85 ef       	ldi	r24, 0xF5	; 245
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	5d dc       	rcall	.-1862   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(3),row(3),blackCount);
    1510:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <blackCount>
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e2       	ldi	r20, 0x20	; 32
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	68 e1       	ldi	r22, 0x18	; 24
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	85 ef       	ldi	r24, 0xF5	; 245
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	89 dc       	rcall	.-1774   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(column(6),row(3),"W=");
    1524:	26 ed       	ldi	r18, 0xD6	; 214
    1526:	31 e0       	ldi	r19, 0x01	; 1
    1528:	40 e2       	ldi	r20, 0x20	; 32
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	6c e3       	ldi	r22, 0x3C	; 60
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	85 ef       	ldi	r24, 0xF5	; 245
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	4a dc       	rcall	.-1900   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(8),row(3),whiteCount);
    1536:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <whiteCount>
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e2       	ldi	r20, 0x20	; 32
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	64 e5       	ldi	r22, 0x54	; 84
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	85 ef       	ldi	r24, 0xF5	; 245
    1546:	91 e0       	ldi	r25, 0x01	; 1
	myDisplay.drawString(column(1),row(4),"S=");
    1548:	76 dc       	rcall	.-1812   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
    154a:	29 ed       	ldi	r18, 0xD9	; 217
    154c:	31 e0       	ldi	r19, 0x01	; 1
    154e:	40 e3       	ldi	r20, 0x30	; 48
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	85 ef       	ldi	r24, 0xF5	; 245
    1558:	91 e0       	ldi	r25, 0x01	; 1
	myDisplay.drawNumber(column(3),row(4),steelCount);
    155a:	37 dc       	rcall	.-1938   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    155c:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <steelCount>
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e3       	ldi	r20, 0x30	; 48
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	68 e1       	ldi	r22, 0x18	; 24
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	85 ef       	ldi	r24, 0xF5	; 245
    156c:	91 e0       	ldi	r25, 0x01	; 1
	myDisplay.drawString(column(6),row(4),"A=");
    156e:	63 dc       	rcall	.-1850   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
    1570:	2c ed       	ldi	r18, 0xDC	; 220
    1572:	31 e0       	ldi	r19, 0x01	; 1
    1574:	40 e3       	ldi	r20, 0x30	; 48
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	6c e3       	ldi	r22, 0x3C	; 60
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	85 ef       	ldi	r24, 0xF5	; 245
	myDisplay.drawNumber(column(8),row(4),aluminumCount);
    157e:	91 e0       	ldi	r25, 0x01	; 1
    1580:	24 dc       	rcall	.-1976   	; 0xdca <_ZN11Framebuffer10drawStringEiiPKc>
    1582:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <aluminumCount>
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	40 e3       	ldi	r20, 0x30	; 48
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	64 e5       	ldi	r22, 0x54	; 84
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	85 ef       	ldi	r24, 0xF5	; 245
	myDisplay.show();
    1592:	91 e0       	ldi	r25, 0x01	; 1
    1594:	50 dc       	rcall	.-1888   	; 0xe36 <_ZN11Framebuffer10drawNumberEiii>
    1596:	85 ef       	ldi	r24, 0xF5	; 245
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	7f cb       	rjmp	.-2306   	; 0xc9a <_ZN11Framebuffer4showEv>
    159c:	08 95       	ret

0000159e <_Z9initMotorv>:
void motorForward(){
	MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_FORWARD;
}

void motorReverse(){
	MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_REVERSE;
    159e:	84 b1       	in	r24, 0x04	; 4
    15a0:	81 61       	ori	r24, 0x11	; 17
    15a2:	84 b9       	out	0x04, r24	; 4
    15a4:	81 b1       	in	r24, 0x01	; 1
    15a6:	80 6c       	ori	r24, 0xC0	; 192
    15a8:	81 b9       	out	0x01, r24	; 1
    15aa:	20 9a       	sbi	0x04, 0	; 4
    15ac:	e0 eb       	ldi	r30, 0xB0	; 176
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	83 60       	ori	r24, 0x03	; 3
    15b4:	80 83       	st	Z, r24
    15b6:	80 81       	ld	r24, Z
    15b8:	80 68       	ori	r24, 0x80	; 128
    15ba:	80 83       	st	Z, r24
    15bc:	e1 eb       	ldi	r30, 0xB1	; 177
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	81 60       	ori	r24, 0x01	; 1
    15c4:	80 83       	st	Z, r24
    15c6:	80 e8       	ldi	r24, 0x80	; 128
    15c8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    15cc:	28 98       	cbi	0x05, 0	; 5
    15ce:	08 95       	ret

000015d0 <_Z10motorSpeedc>:
    15d0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    15d4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    15d8:	08 95       	ret

000015da <_Z12motorForwardv>:
    15da:	82 b1       	in	r24, 0x02	; 2
    15dc:	8f 73       	andi	r24, 0x3F	; 63
    15de:	80 64       	ori	r24, 0x40	; 64
    15e0:	82 b9       	out	0x02, r24	; 2
    15e2:	08 95       	ret

000015e4 <_Z10motorBrakev>:
}

void motorBrake(){
	MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_BRAKE;
    15e4:	82 b1       	in	r24, 0x02	; 2
    15e6:	8f 73       	andi	r24, 0x3F	; 63
    15e8:	82 b9       	out	0x02, r24	; 2
    15ea:	08 95       	ret

000015ec <_ZN7SSD130611sendCommandEh>:

void SSD1306::invert(uint8_t inverted) {
    if (inverted) {
        sendCommand(SSD1306_INVERTDISPLAY);
    } else {
        sendCommand(SSD1306_NORMALDISPLAY);
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	ec 01       	movw	r28, r24
    15f4:	16 2f       	mov	r17, r22
    15f6:	80 dc       	rcall	.-1792   	; 0xef8 <_ZN3I2C5startEv>
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	ce 01       	movw	r24, r28
    15fc:	ab dc       	rcall	.-1706   	; 0xf54 <_ZN3I2C5writeEh>
    15fe:	61 2f       	mov	r22, r17
    1600:	ce 01       	movw	r24, r28
    1602:	a8 dc       	rcall	.-1712   	; 0xf54 <_ZN3I2C5writeEh>
    1604:	ce 01       	movw	r24, r28
    1606:	bb dc       	rcall	.-1674   	; 0xf7e <_ZN3I2C4stopEv>
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	08 95       	ret

00001610 <_ZN7SSD1306C1Ev>:
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	ec 01       	movw	r28, r24
    1616:	67 dc       	rcall	.-1842   	; 0xee6 <_ZN3I2CC1Ev>
    1618:	68 e7       	ldi	r22, 0x78	; 120
    161a:	ce 01       	movw	r24, r28
    161c:	65 dc       	rcall	.-1846   	; 0xee8 <_ZN3I2C4initEh>
    161e:	6e ea       	ldi	r22, 0xAE	; 174
    1620:	ce 01       	movw	r24, r28
    1622:	e4 df       	rcall	.-56     	; 0x15ec <_ZN7SSD130611sendCommandEh>
    1624:	65 ed       	ldi	r22, 0xD5	; 213
    1626:	ce 01       	movw	r24, r28
    1628:	e1 df       	rcall	.-62     	; 0x15ec <_ZN7SSD130611sendCommandEh>
    162a:	60 e8       	ldi	r22, 0x80	; 128
    162c:	ce 01       	movw	r24, r28
    162e:	de df       	rcall	.-68     	; 0x15ec <_ZN7SSD130611sendCommandEh>
    1630:	68 ea       	ldi	r22, 0xA8	; 168
    1632:	ce 01       	movw	r24, r28
    1634:	db df       	rcall	.-74     	; 0x15ec <_ZN7SSD130611sendCommandEh>
    1636:	6f e3       	ldi	r22, 0x3F	; 63
    1638:	ce 01       	movw	r24, r28
    163a:	d8 df       	rcall	.-80     	; 0x15ec <_ZN7SSD130611sendCommandEh>
    163c:	63 ed       	ldi	r22, 0xD3	; 211
    163e:	ce 01       	movw	r24, r28
    1640:	d5 df       	rcall	.-86     	; 0x15ec <_ZN7SSD130611sendCommandEh>
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	ce 01       	movw	r24, r28
    1646:	d2 df       	rcall	.-92     	; 0x15ec <_ZN7SSD130611sendCommandEh>
    1648:	60 e4       	ldi	r22, 0x40	; 64
    164a:	ce 01       	movw	r24, r28
    164c:	cf df       	rcall	.-98     	; 0x15ec <_ZN7SSD130611sendCommandEh>
    164e:	6d e8       	ldi	r22, 0x8D	; 141
    1650:	ce 01       	movw	r24, r28
    1652:	cc df       	rcall	.-104    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    1654:	64 e1       	ldi	r22, 0x14	; 20
    1656:	ce 01       	movw	r24, r28
    1658:	c9 df       	rcall	.-110    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    165a:	60 e2       	ldi	r22, 0x20	; 32
    165c:	ce 01       	movw	r24, r28
    165e:	c6 df       	rcall	.-116    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	ce 01       	movw	r24, r28
    1664:	c3 df       	rcall	.-122    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    1666:	61 ea       	ldi	r22, 0xA1	; 161
    1668:	ce 01       	movw	r24, r28
    166a:	c0 df       	rcall	.-128    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    166c:	68 ec       	ldi	r22, 0xC8	; 200
    166e:	ce 01       	movw	r24, r28
    1670:	bd df       	rcall	.-134    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    1672:	6a ed       	ldi	r22, 0xDA	; 218
    1674:	ce 01       	movw	r24, r28
    1676:	ba df       	rcall	.-140    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    1678:	62 e1       	ldi	r22, 0x12	; 18
    167a:	ce 01       	movw	r24, r28
    167c:	b7 df       	rcall	.-146    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    167e:	61 e8       	ldi	r22, 0x81	; 129
    1680:	ce 01       	movw	r24, r28
    1682:	b4 df       	rcall	.-152    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    1684:	6f ec       	ldi	r22, 0xCF	; 207
    1686:	ce 01       	movw	r24, r28
    1688:	b1 df       	rcall	.-158    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    168a:	69 ed       	ldi	r22, 0xD9	; 217
    168c:	ce 01       	movw	r24, r28
    168e:	ae df       	rcall	.-164    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    1690:	61 ef       	ldi	r22, 0xF1	; 241
    1692:	ce 01       	movw	r24, r28
    1694:	ab df       	rcall	.-170    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    1696:	6b ed       	ldi	r22, 0xDB	; 219
    1698:	ce 01       	movw	r24, r28
    169a:	a8 df       	rcall	.-176    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    169c:	60 e4       	ldi	r22, 0x40	; 64
    169e:	ce 01       	movw	r24, r28
    16a0:	a5 df       	rcall	.-182    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    16a2:	64 ea       	ldi	r22, 0xA4	; 164
    16a4:	ce 01       	movw	r24, r28
    16a6:	a2 df       	rcall	.-188    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    16a8:	66 ea       	ldi	r22, 0xA6	; 166
    16aa:	ce 01       	movw	r24, r28
    16ac:	9f df       	rcall	.-194    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    16ae:	6f ea       	ldi	r22, 0xAF	; 175
    16b0:	ce 01       	movw	r24, r28
    16b2:	9c df       	rcall	.-200    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <_ZN7SSD130615sendFramebufferEPh>:
    }
}

void SSD1306::sendFramebuffer(uint8_t *buffer) {
    16ba:	cf 92       	push	r12
    16bc:	df 92       	push	r13
    16be:	ef 92       	push	r14
    16c0:	ff 92       	push	r15
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	08 2f       	mov	r16, r24
    16cc:	19 2f       	mov	r17, r25
    16ce:	7b 01       	movw	r14, r22
    sendCommand(SSD1306_COLUMNADDR);
    16d0:	61 e2       	ldi	r22, 0x21	; 33
    16d2:	8c df       	rcall	.-232    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	80 2f       	mov	r24, r16
    16d8:	91 2f       	mov	r25, r17
    16da:	88 df       	rcall	.-240    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    sendCommand(0x7F);
    16dc:	6f e7       	ldi	r22, 0x7F	; 127
    16de:	80 2f       	mov	r24, r16
    16e0:	91 2f       	mov	r25, r17

    sendCommand(SSD1306_PAGEADDR);
    16e2:	84 df       	rcall	.-248    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    16e4:	62 e2       	ldi	r22, 0x22	; 34
    16e6:	80 2f       	mov	r24, r16
    sendCommand(0x00);
    16e8:	91 2f       	mov	r25, r17
    16ea:	80 df       	rcall	.-256    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	80 2f       	mov	r24, r16
    sendCommand(0x07);
    16f0:	91 2f       	mov	r25, r17
    16f2:	7c df       	rcall	.-264    	; 0x15ec <_ZN7SSD130611sendCommandEh>
    16f4:	67 e0       	ldi	r22, 0x07	; 7
    16f6:	80 2f       	mov	r24, r16
    16f8:	91 2f       	mov	r25, r17
    16fa:	78 df       	rcall	.-272    	; 0x15ec <_ZN7SSD130611sendCommandEh>

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) { //*** change to 32? was 64
        i2c.start();
    16fc:	e7 01       	movw	r28, r14
    16fe:	8c ef       	ldi	r24, 0xFC	; 252
    1700:	f8 1a       	sub	r15, r24
        i2c.write(0x40);
    1702:	80 2f       	mov	r24, r16
    1704:	91 2f       	mov	r25, r17
    1706:	f8 db       	rcall	.-2064   	; 0xef8 <_ZN3I2C5startEv>
    1708:	60 e4       	ldi	r22, 0x40	; 64
    170a:	80 2f       	mov	r24, r16
    170c:	91 2f       	mov	r25, r17
    170e:	22 dc       	rcall	.-1980   	; 0xf54 <_ZN3I2C5writeEh>
    1710:	6e 01       	movw	r12, r28
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
    1712:	80 e1       	ldi	r24, 0x10	; 16
    1714:	c8 0e       	add	r12, r24
    1716:	d1 1c       	adc	r13, r1
    1718:	69 91       	ld	r22, Y+
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) { //*** change to 32? was 64
        i2c.start();
        i2c.write(0x40);
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
    171a:	80 2f       	mov	r24, r16
    171c:	91 2f       	mov	r25, r17
    171e:	1a dc       	rcall	.-1996   	; 0xf54 <_ZN3I2C5writeEh>
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    1720:	cc 15       	cp	r28, r12
    1722:	dd 05       	cpc	r29, r13
    1724:	c9 f7       	brne	.-14     	; 0x1718 <_ZN7SSD130615sendFramebufferEPh+0x5e>
    1726:	80 2f       	mov	r24, r16
    1728:	91 2f       	mov	r25, r17
    sendCommand(0x07);

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) { //*** change to 32? was 64
    172a:	29 dc       	rcall	.-1966   	; 0xf7e <_ZN3I2C4stopEv>
    172c:	e6 01       	movw	r28, r12
    172e:	ec 14       	cp	r14, r12
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    }
}
    1730:	fd 04       	cpc	r15, r13
    1732:	39 f7       	brne	.-50     	; 0x1702 <_ZN7SSD130615sendFramebufferEPh+0x48>
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	df 90       	pop	r13
    1742:	cf 90       	pop	r12
    1744:	08 95       	ret

00001746 <_Z11initStepperv>:
	menu3Running();
	homeStepper();
	startStepper();
	stepGoalPosition = 0;
	sei();
	while(1){
    1746:	81 b1       	in	r24, 0x01	; 1
    1748:	8f 63       	ori	r24, 0x3F	; 63
    174a:	81 b9       	out	0x01, r24	; 1
    174c:	84 b5       	in	r24, 0x24	; 36
    174e:	82 60       	ori	r24, 0x02	; 2
    1750:	84 bd       	out	0x24, r24	; 36
    1752:	88 e7       	ldi	r24, 0x78	; 120
    1754:	87 bd       	out	0x27, r24	; 39
    1756:	16 bc       	out	0x26, r1	; 38
    1758:	08 95       	ret

0000175a <_Z12startStepperv>:
    175a:	ee e6       	ldi	r30, 0x6E	; 110
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	82 60       	ori	r24, 0x02	; 2
    1762:	80 83       	st	Z, r24
    1764:	a9 9a       	sbi	0x15, 1	; 21
    1766:	85 b5       	in	r24, 0x25	; 37
    1768:	85 60       	ori	r24, 0x05	; 5
    176a:	85 bd       	out	0x25, r24	; 37
    176c:	08 95       	ret

0000176e <_Z13rotateStepperii>:
    176e:	bf 92       	push	r11
    1770:	cf 92       	push	r12
    1772:	df 92       	push	r13
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	18 16       	cp	r1, r24
    1782:	19 06       	cpc	r1, r25
    1784:	0c f0       	brlt	.+2      	; 0x1788 <_Z13rotateStepperii+0x1a>
    1786:	65 c0       	rjmp	.+202    	; 0x1852 <_Z13rotateStepperii+0xe4>
    1788:	8b 01       	movw	r16, r22
    178a:	ec 01       	movw	r28, r24
    178c:	c1 2c       	mov	r12, r1
    178e:	d1 2c       	mov	r13, r1
    1790:	0f 2e       	mov	r0, r31
    1792:	f2 e1       	ldi	r31, 0x12	; 18
    1794:	bf 2e       	mov	r11, r31
    1796:	f0 2d       	mov	r31, r0
    1798:	0f 2e       	mov	r0, r31
    179a:	f7 ec       	ldi	r31, 0xC7	; 199
    179c:	ef 2e       	mov	r14, r31
    179e:	f1 2c       	mov	r15, r1
    17a0:	f0 2d       	mov	r31, r0
    17a2:	01 15       	cp	r16, r1
    17a4:	11 05       	cpc	r17, r1
    17a6:	d9 f0       	breq	.+54     	; 0x17de <_Z13rotateStepperii+0x70>
    17a8:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <stepCurrentPosition>
    17ac:	90 91 fe 05 	lds	r25, 0x05FE	; 0x8005fe <stepCurrentPosition+0x1>
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	90 93 fe 05 	sts	0x05FE, r25	; 0x8005fe <stepCurrentPosition+0x1>
    17b6:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <stepCurrentPosition>
    17ba:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <stepAPosition>
    17be:	8f 5f       	subi	r24, 0xFF	; 255
    17c0:	83 70       	andi	r24, 0x03	; 3
    17c2:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <stepAPosition>
    17c6:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <stepCurrentPosition>
    17ca:	90 91 fe 05 	lds	r25, 0x05FE	; 0x8005fe <stepCurrentPosition+0x1>
    17ce:	88 3c       	cpi	r24, 0xC8	; 200
    17d0:	91 05       	cpc	r25, r1
    17d2:	fc f0       	brlt	.+62     	; 0x1812 <_Z13rotateStepperii+0xa4>
    17d4:	10 92 fe 05 	sts	0x05FE, r1	; 0x8005fe <stepCurrentPosition+0x1>
    17d8:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <stepCurrentPosition>
    17dc:	1a c0       	rjmp	.+52     	; 0x1812 <_Z13rotateStepperii+0xa4>
    17de:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <stepCurrentPosition>
    17e2:	90 91 fe 05 	lds	r25, 0x05FE	; 0x8005fe <stepCurrentPosition+0x1>
    17e6:	89 2b       	or	r24, r25
    17e8:	29 f4       	brne	.+10     	; 0x17f4 <_Z13rotateStepperii+0x86>
    17ea:	f0 92 fe 05 	sts	0x05FE, r15	; 0x8005fe <stepCurrentPosition+0x1>
    17ee:	e0 92 fd 05 	sts	0x05FD, r14	; 0x8005fd <stepCurrentPosition>
    17f2:	09 c0       	rjmp	.+18     	; 0x1806 <_Z13rotateStepperii+0x98>
    17f4:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <stepCurrentPosition>
    17f8:	90 91 fe 05 	lds	r25, 0x05FE	; 0x8005fe <stepCurrentPosition+0x1>
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	90 93 fe 05 	sts	0x05FE, r25	; 0x8005fe <stepCurrentPosition+0x1>
    1802:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <stepCurrentPosition>
    1806:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <stepAPosition>
    180a:	81 50       	subi	r24, 0x01	; 1
    180c:	83 70       	andi	r24, 0x03	; 3
    180e:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <stepAPosition>
    1812:	82 b1       	in	r24, 0x02	; 2
    1814:	e0 91 fa 05 	lds	r30, 0x05FA	; 0x8005fa <stepAPosition>
    1818:	80 7c       	andi	r24, 0xC0	; 192
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	e1 52       	subi	r30, 0x21	; 33
    181e:	fe 4f       	sbci	r31, 0xFE	; 254
    1820:	90 81       	ld	r25, Z
    1822:	89 2b       	or	r24, r25
    1824:	82 b9       	out	0x02, r24	; 2
    1826:	8a e0       	ldi	r24, 0x0A	; 10
    1828:	c8 16       	cp	r12, r24
    182a:	d1 04       	cpc	r13, r1
    182c:	14 f4       	brge	.+4      	; 0x1832 <_Z13rotateStepperii+0xc4>
    182e:	ba 94       	dec	r11
    1830:	06 c0       	rjmp	.+12     	; 0x183e <_Z13rotateStepperii+0xd0>
    1832:	ce 01       	movw	r24, r28
    1834:	8c 19       	sub	r24, r12
    1836:	9d 09       	sbc	r25, r13
    1838:	44 97       	sbiw	r24, 0x14	; 20
    183a:	0c f4       	brge	.+2      	; 0x183e <_Z13rotateStepperii+0xd0>
    183c:	b3 94       	inc	r11
    183e:	8b 2d       	mov	r24, r11
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	54 d1       	rcall	.+680    	; 0x1aec <_Z6mTimeri>
    1844:	8f ef       	ldi	r24, 0xFF	; 255
    1846:	c8 1a       	sub	r12, r24
    1848:	d8 0a       	sbc	r13, r24
    184a:	cc 15       	cp	r28, r12
    184c:	dd 05       	cpc	r29, r13
    184e:	09 f0       	breq	.+2      	; 0x1852 <_Z13rotateStepperii+0xe4>
    1850:	a8 cf       	rjmp	.-176    	; 0x17a2 <_Z13rotateStepperii+0x34>
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	df 90       	pop	r13
    1860:	cf 90       	pop	r12
    1862:	bf 90       	pop	r11
    1864:	08 95       	ret

00001866 <_Z11homeStepperv>:
    1866:	61 e0       	ldi	r22, 0x01	; 1
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	89 e1       	ldi	r24, 0x19	; 25
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	7f df       	rcall	.-258    	; 0x176e <_Z13rotateStepperii>
    1870:	66 9b       	sbis	0x0c, 6	; 12
    1872:	07 c0       	rjmp	.+14     	; 0x1882 <_Z11homeStepperv+0x1c>
    1874:	61 e0       	ldi	r22, 0x01	; 1
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	78 df       	rcall	.-272    	; 0x176e <_Z13rotateStepperii>
    187e:	66 99       	sbic	0x0c, 6	; 12
    1880:	f9 cf       	rjmp	.-14     	; 0x1874 <_Z11homeStepperv+0xe>
    1882:	10 92 fe 05 	sts	0x05FE, r1	; 0x8005fe <stepCurrentPosition+0x1>
    1886:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <stepCurrentPosition>
    188a:	08 95       	ret

0000188c <__vector_21>:
		}
		menuDebugS();
	}
}

ISR(TIMER0_COMPA_vect){
    188c:	1f 92       	push	r1
    188e:	0f 92       	push	r0
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	0f 92       	push	r0
    1894:	11 24       	eor	r1, r1
    1896:	0b b6       	in	r0, 0x3b	; 59
    1898:	0f 92       	push	r0
    189a:	2f 93       	push	r18
    189c:	3f 93       	push	r19
    189e:	4f 93       	push	r20
    18a0:	8f 93       	push	r24
    18a2:	9f 93       	push	r25
    18a4:	ef 93       	push	r30
    18a6:	ff 93       	push	r31
	
	unsigned char nextItem = 0;
	int difference =  stepGoalPosition - stepCurrentPosition;
    18a8:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <stepGoalPosition>
    18ac:	90 91 fc 05 	lds	r25, 0x05FC	; 0x8005fc <stepGoalPosition+0x1>
    18b0:	20 91 fd 05 	lds	r18, 0x05FD	; 0x8005fd <stepCurrentPosition>
    18b4:	30 91 fe 05 	lds	r19, 0x05FE	; 0x8005fe <stepCurrentPosition+0x1>
    18b8:	82 1b       	sub	r24, r18
    18ba:	93 0b       	sbc	r25, r19
	unsigned char shortAbsDifference = ((difference >= 0) ? difference : -difference);//abs(difference)
    18bc:	9c 01       	movw	r18, r24
    18be:	22 f4       	brpl	.+8      	; 0x18c8 <__vector_21+0x3c>
    18c0:	22 27       	eor	r18, r18
    18c2:	33 27       	eor	r19, r19
    18c4:	28 1b       	sub	r18, r24
    18c6:	39 0b       	sbc	r19, r25
    18c8:	42 2f       	mov	r20, r18
	
	//Find circular shortest distance
	if(shortAbsDifference > 100){
    18ca:	25 36       	cpi	r18, 0x65	; 101
    18cc:	10 f0       	brcs	.+4      	; 0x18d2 <__vector_21+0x46>
		shortAbsDifference = 200 - shortAbsDifference;
    18ce:	48 ec       	ldi	r20, 0xC8	; 200
    18d0:	42 1b       	sub	r20, r18
	}

	//////////PLACE BLOCK INTO BIN ONCE CLOSE ENOUGH
	if(shortAbsDifference < CLOSE_ENOUGH){
    18d2:	4f 30       	cpi	r20, 0x0F	; 15
    18d4:	08 f0       	brcs	.+2      	; 0x18d8 <__vector_21+0x4c>
    18d6:	7c c0       	rjmp	.+248    	; 0x19d0 <__vector_21+0x144>
		if(blockReady){
    18d8:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__data_end>
    18dc:	22 23       	and	r18, r18
    18de:	51 f0       	breq	.+20     	; 0x18f4 <__vector_21+0x68>
			//////////MOTOR ON
			MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_FORWARD;
    18e0:	22 b1       	in	r18, 0x02	; 2
    18e2:	2f 73       	andi	r18, 0x3F	; 63
    18e4:	20 64       	ori	r18, 0x40	; 64
    18e6:	22 b9       	out	0x02, r18	; 2
			sDequeueRdy = 1;
    18e8:	21 e0       	ldi	r18, 0x01	; 1
    18ea:	20 93 f8 05 	sts	0x05F8, r18	; 0x8005f8 <sDequeueRdy>
			blockReady = 0;
    18ee:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <__data_end>
    18f2:	70 c0       	rjmp	.+224    	; 0x19d4 <__vector_21+0x148>
		} 
		else if(!sDequeueRdy){
    18f4:	20 91 f8 05 	lds	r18, 0x05F8	; 0x8005f8 <sDequeueRdy>
    18f8:	21 11       	cpse	r18, r1
    18fa:	08 c0       	rjmp	.+16     	; 0x190c <__vector_21+0x80>
			if(stepperDelay == 0){
    18fc:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <stepperDelay>
    1900:	21 11       	cpse	r18, r1
    1902:	68 c0       	rjmp	.+208    	; 0x19d4 <__vector_21+0x148>
				stepperReady = 1;
    1904:	21 e0       	ldi	r18, 0x01	; 1
    1906:	20 93 f9 05 	sts	0x05F9, r18	; 0x8005f9 <stepperReady>
    190a:	64 c0       	rjmp	.+200    	; 0x19d4 <__vector_21+0x148>
			}
		}
		else if(difference == 0){
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	09 f0       	breq	.+2      	; 0x1912 <__vector_21+0x86>
    1910:	61 c0       	rjmp	.+194    	; 0x19d4 <__vector_21+0x148>
			//Stepper Dequeue is ready and we have arrived at goal
			//////////COUNT NUMBER OF EACH SORTED
			if(reflQueue[frontOfQueue] == BLACK){
    1912:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <frontOfQueue>
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	e3 51       	subi	r30, 0x13	; 19
    191a:	fe 4f       	sbci	r31, 0xFE	; 254
    191c:	80 81       	ld	r24, Z
    191e:	81 11       	cpse	r24, r1
    1920:	06 c0       	rjmp	.+12     	; 0x192e <__vector_21+0xa2>
				blackCount++;
    1922:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <blackCount>
    1926:	8f 5f       	subi	r24, 0xFF	; 255
    1928:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <blackCount>
    192c:	29 c0       	rjmp	.+82     	; 0x1980 <__vector_21+0xf4>
			}
			else if(reflQueue[frontOfQueue] == WHITE){
    192e:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <frontOfQueue>
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	e3 51       	subi	r30, 0x13	; 19
    1936:	fe 4f       	sbci	r31, 0xFE	; 254
    1938:	80 81       	ld	r24, Z
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	31 f4       	brne	.+12     	; 0x194a <__vector_21+0xbe>
				whiteCount++;
    193e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <whiteCount>
    1942:	8f 5f       	subi	r24, 0xFF	; 255
    1944:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <whiteCount>
    1948:	1b c0       	rjmp	.+54     	; 0x1980 <__vector_21+0xf4>
			}
			else if(reflQueue[frontOfQueue] == STEEL){
    194a:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <frontOfQueue>
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	e3 51       	subi	r30, 0x13	; 19
    1952:	fe 4f       	sbci	r31, 0xFE	; 254
    1954:	80 81       	ld	r24, Z
    1956:	82 30       	cpi	r24, 0x02	; 2
    1958:	31 f4       	brne	.+12     	; 0x1966 <__vector_21+0xda>
				steelCount++;
    195a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <steelCount>
    195e:	8f 5f       	subi	r24, 0xFF	; 255
    1960:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <steelCount>
    1964:	0d c0       	rjmp	.+26     	; 0x1980 <__vector_21+0xf4>
			}
			else if(reflQueue[frontOfQueue] == ALUMINUM){
    1966:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <frontOfQueue>
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	e3 51       	subi	r30, 0x13	; 19
    196e:	fe 4f       	sbci	r31, 0xFE	; 254
    1970:	80 81       	ld	r24, Z
    1972:	83 30       	cpi	r24, 0x03	; 3
    1974:	29 f4       	brne	.+10     	; 0x1980 <__vector_21+0xf4>
				aluminumCount++;
    1976:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <aluminumCount>
    197a:	8f 5f       	subi	r24, 0xFF	; 255
    197c:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <aluminumCount>
			}
			//////////DEQUEUE BLOCK
			if(reflQueueCount < 2){
    1980:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <reflQueueCount>
    1984:	82 30       	cpi	r24, 0x02	; 2
    1986:	18 f4       	brcc	.+6      	; 0x198e <__vector_21+0x102>
				reflQueueCount = 0;
    1988:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <reflQueueCount>
    198c:	1e c0       	rjmp	.+60     	; 0x19ca <__vector_21+0x13e>
			}
			else{
				nextItem = (frontOfQueue+1) & 7;
    198e:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <frontOfQueue>
    1992:	8f 5f       	subi	r24, 0xFF	; 255
    1994:	87 70       	andi	r24, 0x07	; 7
				if(reflQueue[frontOfQueue] != reflQueue[nextItem]){
    1996:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <frontOfQueue>
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	e3 51       	subi	r30, 0x13	; 19
    199e:	fe 4f       	sbci	r31, 0xFE	; 254
    19a0:	20 81       	ld	r18, Z
    19a2:	e8 2f       	mov	r30, r24
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	e3 51       	subi	r30, 0x13	; 19
    19a8:	fe 4f       	sbci	r31, 0xFE	; 254
    19aa:	90 81       	ld	r25, Z
    19ac:	29 17       	cp	r18, r25
    19ae:	19 f0       	breq	.+6      	; 0x19b6 <__vector_21+0x12a>
					delayStepper = 1;
    19b0:	91 e0       	ldi	r25, 0x01	; 1
    19b2:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <delayStepper>
				}
				frontOfQueue = nextItem; //& 7 implements a rotating array pointer
    19b6:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <frontOfQueue>
				reflQueueCount--;
    19ba:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <reflQueueCount>
    19be:	81 50       	subi	r24, 0x01	; 1
    19c0:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <reflQueueCount>
				reflQueueChange = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <reflQueueChange>
			}
			sDequeueRdy = 0;	
    19ca:	10 92 f8 05 	sts	0x05F8, r1	; 0x8005f8 <sDequeueRdy>
    19ce:	4b c0       	rjmp	.+150    	; 0x1a66 <__vector_21+0x1da>
		}
	}
	else{
		stepperReady = 0;
    19d0:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <stepperReady>
	}
	//////////MOVE TOWARDS GOAL POSITION
	if(((difference > 0) && (difference < 100)) || (difference < -100)){//***change to make up for faster direction of stepper
    19d4:	9c 01       	movw	r18, r24
    19d6:	21 50       	subi	r18, 0x01	; 1
    19d8:	31 09       	sbc	r19, r1
    19da:	23 36       	cpi	r18, 0x63	; 99
    19dc:	31 05       	cpc	r19, r1
    19de:	20 f0       	brcs	.+8      	; 0x19e8 <__vector_21+0x15c>
    19e0:	8c 39       	cpi	r24, 0x9C	; 156
    19e2:	2f ef       	ldi	r18, 0xFF	; 255
    19e4:	92 07       	cpc	r25, r18
    19e6:	dc f4       	brge	.+54     	; 0x1a1e <__vector_21+0x192>
		stepCurrentPosition++;
    19e8:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <stepCurrentPosition>
    19ec:	90 91 fe 05 	lds	r25, 0x05FE	; 0x8005fe <stepCurrentPosition+0x1>
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	90 93 fe 05 	sts	0x05FE, r25	; 0x8005fe <stepCurrentPosition+0x1>
    19f6:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <stepCurrentPosition>
		if(stepCurrentPosition > 199){
    19fa:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <stepCurrentPosition>
    19fe:	90 91 fe 05 	lds	r25, 0x05FE	; 0x8005fe <stepCurrentPosition+0x1>
    1a02:	88 3c       	cpi	r24, 0xC8	; 200
    1a04:	91 05       	cpc	r25, r1
    1a06:	24 f0       	brlt	.+8      	; 0x1a10 <__vector_21+0x184>
			stepCurrentPosition = 0;
    1a08:	10 92 fe 05 	sts	0x05FE, r1	; 0x8005fe <stepCurrentPosition+0x1>
    1a0c:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <stepCurrentPosition>
		}
		stepAPosition = (stepAPosition + 1) & 3; //& 3 is a bitwise version of %4, creates a circular loop through stepArray	
    1a10:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <stepAPosition>
    1a14:	8f 5f       	subi	r24, 0xFF	; 255
    1a16:	83 70       	andi	r24, 0x03	; 3
    1a18:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <stepAPosition>
    1a1c:	24 c0       	rjmp	.+72     	; 0x1a66 <__vector_21+0x1da>
	}
	else if(((difference < 0) && (difference >= -100)) || (difference >= 100)){
    1a1e:	9c 01       	movw	r18, r24
    1a20:	2c 59       	subi	r18, 0x9C	; 156
    1a22:	3f 4f       	sbci	r19, 0xFF	; 255
    1a24:	24 36       	cpi	r18, 0x64	; 100
    1a26:	31 05       	cpc	r19, r1
    1a28:	18 f0       	brcs	.+6      	; 0x1a30 <__vector_21+0x1a4>
    1a2a:	84 36       	cpi	r24, 0x64	; 100
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	dc f0       	brlt	.+54     	; 0x1a66 <__vector_21+0x1da>
		stepCurrentPosition--;
    1a30:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <stepCurrentPosition>
    1a34:	90 91 fe 05 	lds	r25, 0x05FE	; 0x8005fe <stepCurrentPosition+0x1>
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	90 93 fe 05 	sts	0x05FE, r25	; 0x8005fe <stepCurrentPosition+0x1>
    1a3e:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <stepCurrentPosition>
		if(stepCurrentPosition < 0){
    1a42:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <stepCurrentPosition>
    1a46:	90 91 fe 05 	lds	r25, 0x05FE	; 0x8005fe <stepCurrentPosition+0x1>
    1a4a:	99 23       	and	r25, r25
    1a4c:	34 f4       	brge	.+12     	; 0x1a5a <__vector_21+0x1ce>
			stepCurrentPosition = 199;
    1a4e:	87 ec       	ldi	r24, 0xC7	; 199
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	90 93 fe 05 	sts	0x05FE, r25	; 0x8005fe <stepCurrentPosition+0x1>
    1a56:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <stepCurrentPosition>
		}
		//***
		stepAPosition = (stepAPosition - 1) & 3; //& 3 is a bitwise %4, creates a circular loop through stepArray
    1a5a:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <stepAPosition>
    1a5e:	81 50       	subi	r24, 0x01	; 1
    1a60:	83 70       	andi	r24, 0x03	; 3
    1a62:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <stepAPosition>
	}

	PORTA = (PORTA & 0b11000000) | stepArray[stepAPosition];
    1a66:	82 b1       	in	r24, 0x02	; 2
    1a68:	e0 91 fa 05 	lds	r30, 0x05FA	; 0x8005fa <stepAPosition>
    1a6c:	80 7c       	andi	r24, 0xC0	; 192
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	e1 52       	subi	r30, 0x21	; 33
    1a72:	fe 4f       	sbci	r31, 0xFE	; 254
    1a74:	90 81       	ld	r25, Z
    1a76:	89 2b       	or	r24, r25
    1a78:	82 b9       	out	0x02, r24	; 2

	//////////ACCELERATION/DECELERATION ***
	if(shortAbsDifference > 30 && stepperDelay > MIN_STEPPER_DELAY){
    1a7a:	4f 31       	cpi	r20, 0x1F	; 31
    1a7c:	a0 f0       	brcs	.+40     	; 0x1aa6 <__vector_21+0x21a>
    1a7e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <stepperDelay>
    1a82:	8d 33       	cpi	r24, 0x3D	; 61
    1a84:	50 f4       	brcc	.+20     	; 0x1a9a <__vector_21+0x20e>
    1a86:	0f c0       	rjmp	.+30     	; 0x1aa6 <__vector_21+0x21a>
		stepperDelay -= STEPPER_ACCELERATION_RATE; //+= ~ 1 ms
	}
	else if(shortAbsDifference < NUMBER_STEPS_DECELERATION && stepperDelay <= MAX_STEPPER_DELAY){
    1a88:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <stepperDelay>
    1a8c:	89 37       	cpi	r24, 0x79	; 121
    1a8e:	70 f0       	brcs	.+28     	; 0x1aac <__vector_21+0x220>
		stepperDelay += STEPPER_ACCELERATION_RATE;
	}
	//Set the initial value of the timer counter to 0
	TCNT0 = 0x0;
    1a90:	16 bc       	out	0x26, r1	; 38
	//Sets stepper delay to max value
	OCR0A = stepperDelay;
    1a92:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <stepperDelay>
    1a96:	87 bd       	out	0x27, r24	; 39
    1a98:	0f c0       	rjmp	.+30     	; 0x1ab8 <__vector_21+0x22c>

	PORTA = (PORTA & 0b11000000) | stepArray[stepAPosition];

	//////////ACCELERATION/DECELERATION ***
	if(shortAbsDifference > 30 && stepperDelay > MIN_STEPPER_DELAY){
		stepperDelay -= STEPPER_ACCELERATION_RATE; //+= ~ 1 ms
    1a9a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <stepperDelay>
    1a9e:	88 50       	subi	r24, 0x08	; 8
    1aa0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <stepperDelay>
    1aa4:	f5 cf       	rjmp	.-22     	; 0x1a90 <__vector_21+0x204>
	}
	else if(shortAbsDifference < NUMBER_STEPS_DECELERATION && stepperDelay <= MAX_STEPPER_DELAY){
    1aa6:	44 31       	cpi	r20, 0x14	; 20
    1aa8:	78 f3       	brcs	.-34     	; 0x1a88 <__vector_21+0x1fc>
    1aaa:	f2 cf       	rjmp	.-28     	; 0x1a90 <__vector_21+0x204>
		stepperDelay += STEPPER_ACCELERATION_RATE;
    1aac:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <stepperDelay>
    1ab0:	88 5f       	subi	r24, 0xF8	; 248
    1ab2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <stepperDelay>
    1ab6:	ec cf       	rjmp	.-40     	; 0x1a90 <__vector_21+0x204>
	}
	//Set the initial value of the timer counter to 0
	TCNT0 = 0x0;
	//Sets stepper delay to max value
	OCR0A = stepperDelay;
    1ab8:	ff 91       	pop	r31
    1aba:	ef 91       	pop	r30
    1abc:	9f 91       	pop	r25
    1abe:	8f 91       	pop	r24
    1ac0:	4f 91       	pop	r20
    1ac2:	3f 91       	pop	r19
    1ac4:	2f 91       	pop	r18
    1ac6:	0f 90       	pop	r0
    1ac8:	0b be       	out	0x3b, r0	; 59
    1aca:	0f 90       	pop	r0
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	0f 90       	pop	r0
    1ad0:	1f 90       	pop	r1
    1ad2:	18 95       	reti

00001ad4 <_Z9initTimerv>:
#include "timer.h"

void initTimer(void){
	//Set the waveform generation mode bit to clear timer
	//on Compare Math mode (CTC) only
	TCCR1B |= _BV(WGM12);
    1ad4:	e1 e8       	ldi	r30, 0x81	; 129
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	88 60       	ori	r24, 0x08	; 8
    1adc:	80 83       	st	Z, r24
	
	//Set output compare register for 1000 cycles (1 ms)
	OCR1A = 0x3e8;
    1ade:	88 ee       	ldi	r24, 0xE8	; 232
    1ae0:	93 e0       	ldi	r25, 0x03	; 3
    1ae2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1ae6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1aea:	08 95       	ret

00001aec <_Z6mTimeri>:
}

//Timer function
void mTimer(int count){
    1aec:	ac 01       	movw	r20, r24
	int i = 0;
	
	//Enable
	//Sets bit 0 of the Timer/Counter control register (prescaler)
	//CS = 0b010 (8 MHz Clock prescaled by 1/8)
	TCCR1B |= _BV(CS11);
    1aee:	e1 e8       	ldi	r30, 0x81	; 129
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	90 81       	ld	r25, Z
    1af4:	92 60       	ori	r25, 0x02	; 2
    1af6:	90 83       	st	Z, r25
	
	//Set the initial value of the timer counter to 0
	TCNT1 = 0x0;
    1af8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1afc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	//Clear the interrupt flag and begin timer
	TIFR1 |= _BV(OCF1A);
    1b00:	b1 9a       	sbi	0x16, 1	; 22
	OCR1A = 0x3e8;
}

//Timer function
void mTimer(int count){
	int i = 0;
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
	
	//Clear the interrupt flag and begin timer
	TIFR1 |= _BV(OCF1A);
	
	//Poll the timer to determine when the timer has reached OCR1A
	while(i<count){
    1b06:	24 17       	cp	r18, r20
    1b08:	35 07       	cpc	r19, r21
    1b0a:	44 f4       	brge	.+16     	; 0x1b1c <_Z6mTimeri+0x30>

		if((TIFR1 & 0x02) == 0x02){
    1b0c:	b1 99       	sbic	0x16, 1	; 22
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <_Z6mTimeri+0x28>
    1b10:	b1 9b       	sbis	0x16, 1	; 22
    1b12:	fe cf       	rjmp	.-4      	; 0x1b10 <_Z6mTimeri+0x24>
			//Clear the interrupt flag by writing a one to the bit
			TIFR1 |= _BV(OCF1A);
    1b14:	b1 9a       	sbi	0x16, 1	; 22
			
			i++; //Increment the loop counter
    1b16:	2f 5f       	subi	r18, 0xFF	; 255
    1b18:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1a:	f5 cf       	rjmp	.-22     	; 0x1b06 <_Z6mTimeri+0x1a>
		}
	}
	TCCR1B &= ~DISABLE_TIMER1;
    1b1c:	e1 e8       	ldi	r30, 0x81	; 129
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	88 7f       	andi	r24, 0xF8	; 248
    1b24:	80 83       	st	Z, r24
    1b26:	08 95       	ret

00001b28 <__tablejump2__>:
    1b28:	ee 0f       	add	r30, r30
    1b2a:	ff 1f       	adc	r31, r31
    1b2c:	00 24       	eor	r0, r0
    1b2e:	00 1c       	adc	r0, r0
    1b30:	0b be       	out	0x3b, r0	; 59
    1b32:	07 90       	elpm	r0, Z+
    1b34:	f6 91       	elpm	r31, Z
    1b36:	e0 2d       	mov	r30, r0
    1b38:	09 94       	ijmp

00001b3a <sprintf>:
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	2e 97       	sbiw	r28, 0x0e	; 14
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	0d 89       	ldd	r16, Y+21	; 0x15
    1b54:	1e 89       	ldd	r17, Y+22	; 0x16
    1b56:	86 e0       	ldi	r24, 0x06	; 6
    1b58:	8c 83       	std	Y+4, r24	; 0x04
    1b5a:	1a 83       	std	Y+2, r17	; 0x02
    1b5c:	09 83       	std	Y+1, r16	; 0x01
    1b5e:	8f ef       	ldi	r24, 0xFF	; 255
    1b60:	9f e7       	ldi	r25, 0x7F	; 127
    1b62:	9e 83       	std	Y+6, r25	; 0x06
    1b64:	8d 83       	std	Y+5, r24	; 0x05
    1b66:	ae 01       	movw	r20, r28
    1b68:	47 5e       	subi	r20, 0xE7	; 231
    1b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b6c:	6f 89       	ldd	r22, Y+23	; 0x17
    1b6e:	78 8d       	ldd	r23, Y+24	; 0x18
    1b70:	ce 01       	movw	r24, r28
    1b72:	01 96       	adiw	r24, 0x01	; 1
    1b74:	10 d0       	rcall	.+32     	; 0x1b96 <vfprintf>
    1b76:	ef 81       	ldd	r30, Y+7	; 0x07
    1b78:	f8 85       	ldd	r31, Y+8	; 0x08
    1b7a:	e0 0f       	add	r30, r16
    1b7c:	f1 1f       	adc	r31, r17
    1b7e:	10 82       	st	Z, r1
    1b80:	2e 96       	adiw	r28, 0x0e	; 14
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	08 95       	ret

00001b96 <vfprintf>:
    1b96:	2f 92       	push	r2
    1b98:	3f 92       	push	r3
    1b9a:	4f 92       	push	r4
    1b9c:	5f 92       	push	r5
    1b9e:	6f 92       	push	r6
    1ba0:	7f 92       	push	r7
    1ba2:	8f 92       	push	r8
    1ba4:	9f 92       	push	r9
    1ba6:	af 92       	push	r10
    1ba8:	bf 92       	push	r11
    1baa:	cf 92       	push	r12
    1bac:	df 92       	push	r13
    1bae:	ef 92       	push	r14
    1bb0:	ff 92       	push	r15
    1bb2:	0f 93       	push	r16
    1bb4:	1f 93       	push	r17
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	2b 97       	sbiw	r28, 0x0b	; 11
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	6c 01       	movw	r12, r24
    1bcc:	7b 01       	movw	r14, r22
    1bce:	8a 01       	movw	r16, r20
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	17 82       	std	Z+7, r1	; 0x07
    1bd4:	16 82       	std	Z+6, r1	; 0x06
    1bd6:	83 81       	ldd	r24, Z+3	; 0x03
    1bd8:	81 ff       	sbrs	r24, 1
    1bda:	bf c1       	rjmp	.+894    	; 0x1f5a <vfprintf+0x3c4>
    1bdc:	ce 01       	movw	r24, r28
    1bde:	01 96       	adiw	r24, 0x01	; 1
    1be0:	3c 01       	movw	r6, r24
    1be2:	f6 01       	movw	r30, r12
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	f7 01       	movw	r30, r14
    1be8:	93 fd       	sbrc	r25, 3
    1bea:	85 91       	lpm	r24, Z+
    1bec:	93 ff       	sbrs	r25, 3
    1bee:	81 91       	ld	r24, Z+
    1bf0:	7f 01       	movw	r14, r30
    1bf2:	88 23       	and	r24, r24
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <vfprintf+0x62>
    1bf6:	ad c1       	rjmp	.+858    	; 0x1f52 <vfprintf+0x3bc>
    1bf8:	85 32       	cpi	r24, 0x25	; 37
    1bfa:	39 f4       	brne	.+14     	; 0x1c0a <vfprintf+0x74>
    1bfc:	93 fd       	sbrc	r25, 3
    1bfe:	85 91       	lpm	r24, Z+
    1c00:	93 ff       	sbrs	r25, 3
    1c02:	81 91       	ld	r24, Z+
    1c04:	7f 01       	movw	r14, r30
    1c06:	85 32       	cpi	r24, 0x25	; 37
    1c08:	21 f4       	brne	.+8      	; 0x1c12 <vfprintf+0x7c>
    1c0a:	b6 01       	movw	r22, r12
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	d6 d1       	rcall	.+940    	; 0x1fbc <fputc>
    1c10:	e8 cf       	rjmp	.-48     	; 0x1be2 <vfprintf+0x4c>
    1c12:	91 2c       	mov	r9, r1
    1c14:	21 2c       	mov	r2, r1
    1c16:	31 2c       	mov	r3, r1
    1c18:	ff e1       	ldi	r31, 0x1F	; 31
    1c1a:	f3 15       	cp	r31, r3
    1c1c:	d8 f0       	brcs	.+54     	; 0x1c54 <vfprintf+0xbe>
    1c1e:	8b 32       	cpi	r24, 0x2B	; 43
    1c20:	79 f0       	breq	.+30     	; 0x1c40 <vfprintf+0xaa>
    1c22:	38 f4       	brcc	.+14     	; 0x1c32 <vfprintf+0x9c>
    1c24:	80 32       	cpi	r24, 0x20	; 32
    1c26:	79 f0       	breq	.+30     	; 0x1c46 <vfprintf+0xb0>
    1c28:	83 32       	cpi	r24, 0x23	; 35
    1c2a:	a1 f4       	brne	.+40     	; 0x1c54 <vfprintf+0xbe>
    1c2c:	23 2d       	mov	r18, r3
    1c2e:	20 61       	ori	r18, 0x10	; 16
    1c30:	1d c0       	rjmp	.+58     	; 0x1c6c <vfprintf+0xd6>
    1c32:	8d 32       	cpi	r24, 0x2D	; 45
    1c34:	61 f0       	breq	.+24     	; 0x1c4e <vfprintf+0xb8>
    1c36:	80 33       	cpi	r24, 0x30	; 48
    1c38:	69 f4       	brne	.+26     	; 0x1c54 <vfprintf+0xbe>
    1c3a:	23 2d       	mov	r18, r3
    1c3c:	21 60       	ori	r18, 0x01	; 1
    1c3e:	16 c0       	rjmp	.+44     	; 0x1c6c <vfprintf+0xd6>
    1c40:	83 2d       	mov	r24, r3
    1c42:	82 60       	ori	r24, 0x02	; 2
    1c44:	38 2e       	mov	r3, r24
    1c46:	e3 2d       	mov	r30, r3
    1c48:	e4 60       	ori	r30, 0x04	; 4
    1c4a:	3e 2e       	mov	r3, r30
    1c4c:	2a c0       	rjmp	.+84     	; 0x1ca2 <vfprintf+0x10c>
    1c4e:	f3 2d       	mov	r31, r3
    1c50:	f8 60       	ori	r31, 0x08	; 8
    1c52:	1d c0       	rjmp	.+58     	; 0x1c8e <vfprintf+0xf8>
    1c54:	37 fc       	sbrc	r3, 7
    1c56:	2d c0       	rjmp	.+90     	; 0x1cb2 <vfprintf+0x11c>
    1c58:	20 ed       	ldi	r18, 0xD0	; 208
    1c5a:	28 0f       	add	r18, r24
    1c5c:	2a 30       	cpi	r18, 0x0A	; 10
    1c5e:	40 f0       	brcs	.+16     	; 0x1c70 <vfprintf+0xda>
    1c60:	8e 32       	cpi	r24, 0x2E	; 46
    1c62:	b9 f4       	brne	.+46     	; 0x1c92 <vfprintf+0xfc>
    1c64:	36 fc       	sbrc	r3, 6
    1c66:	75 c1       	rjmp	.+746    	; 0x1f52 <vfprintf+0x3bc>
    1c68:	23 2d       	mov	r18, r3
    1c6a:	20 64       	ori	r18, 0x40	; 64
    1c6c:	32 2e       	mov	r3, r18
    1c6e:	19 c0       	rjmp	.+50     	; 0x1ca2 <vfprintf+0x10c>
    1c70:	36 fe       	sbrs	r3, 6
    1c72:	06 c0       	rjmp	.+12     	; 0x1c80 <vfprintf+0xea>
    1c74:	8a e0       	ldi	r24, 0x0A	; 10
    1c76:	98 9e       	mul	r9, r24
    1c78:	20 0d       	add	r18, r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	92 2e       	mov	r9, r18
    1c7e:	11 c0       	rjmp	.+34     	; 0x1ca2 <vfprintf+0x10c>
    1c80:	ea e0       	ldi	r30, 0x0A	; 10
    1c82:	2e 9e       	mul	r2, r30
    1c84:	20 0d       	add	r18, r0
    1c86:	11 24       	eor	r1, r1
    1c88:	22 2e       	mov	r2, r18
    1c8a:	f3 2d       	mov	r31, r3
    1c8c:	f0 62       	ori	r31, 0x20	; 32
    1c8e:	3f 2e       	mov	r3, r31
    1c90:	08 c0       	rjmp	.+16     	; 0x1ca2 <vfprintf+0x10c>
    1c92:	8c 36       	cpi	r24, 0x6C	; 108
    1c94:	21 f4       	brne	.+8      	; 0x1c9e <vfprintf+0x108>
    1c96:	83 2d       	mov	r24, r3
    1c98:	80 68       	ori	r24, 0x80	; 128
    1c9a:	38 2e       	mov	r3, r24
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <vfprintf+0x10c>
    1c9e:	88 36       	cpi	r24, 0x68	; 104
    1ca0:	41 f4       	brne	.+16     	; 0x1cb2 <vfprintf+0x11c>
    1ca2:	f7 01       	movw	r30, r14
    1ca4:	93 fd       	sbrc	r25, 3
    1ca6:	85 91       	lpm	r24, Z+
    1ca8:	93 ff       	sbrs	r25, 3
    1caa:	81 91       	ld	r24, Z+
    1cac:	7f 01       	movw	r14, r30
    1cae:	81 11       	cpse	r24, r1
    1cb0:	b3 cf       	rjmp	.-154    	; 0x1c18 <vfprintf+0x82>
    1cb2:	98 2f       	mov	r25, r24
    1cb4:	9f 7d       	andi	r25, 0xDF	; 223
    1cb6:	95 54       	subi	r25, 0x45	; 69
    1cb8:	93 30       	cpi	r25, 0x03	; 3
    1cba:	28 f4       	brcc	.+10     	; 0x1cc6 <vfprintf+0x130>
    1cbc:	0c 5f       	subi	r16, 0xFC	; 252
    1cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc0:	9f e3       	ldi	r25, 0x3F	; 63
    1cc2:	99 83       	std	Y+1, r25	; 0x01
    1cc4:	0d c0       	rjmp	.+26     	; 0x1ce0 <vfprintf+0x14a>
    1cc6:	83 36       	cpi	r24, 0x63	; 99
    1cc8:	31 f0       	breq	.+12     	; 0x1cd6 <vfprintf+0x140>
    1cca:	83 37       	cpi	r24, 0x73	; 115
    1ccc:	71 f0       	breq	.+28     	; 0x1cea <vfprintf+0x154>
    1cce:	83 35       	cpi	r24, 0x53	; 83
    1cd0:	09 f0       	breq	.+2      	; 0x1cd4 <vfprintf+0x13e>
    1cd2:	55 c0       	rjmp	.+170    	; 0x1d7e <vfprintf+0x1e8>
    1cd4:	20 c0       	rjmp	.+64     	; 0x1d16 <vfprintf+0x180>
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	80 81       	ld	r24, Z
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	0e 5f       	subi	r16, 0xFE	; 254
    1cde:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce0:	88 24       	eor	r8, r8
    1ce2:	83 94       	inc	r8
    1ce4:	91 2c       	mov	r9, r1
    1ce6:	53 01       	movw	r10, r6
    1ce8:	12 c0       	rjmp	.+36     	; 0x1d0e <vfprintf+0x178>
    1cea:	28 01       	movw	r4, r16
    1cec:	f2 e0       	ldi	r31, 0x02	; 2
    1cee:	4f 0e       	add	r4, r31
    1cf0:	51 1c       	adc	r5, r1
    1cf2:	f8 01       	movw	r30, r16
    1cf4:	a0 80       	ld	r10, Z
    1cf6:	b1 80       	ldd	r11, Z+1	; 0x01
    1cf8:	36 fe       	sbrs	r3, 6
    1cfa:	03 c0       	rjmp	.+6      	; 0x1d02 <vfprintf+0x16c>
    1cfc:	69 2d       	mov	r22, r9
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <vfprintf+0x170>
    1d02:	6f ef       	ldi	r22, 0xFF	; 255
    1d04:	7f ef       	ldi	r23, 0xFF	; 255
    1d06:	c5 01       	movw	r24, r10
    1d08:	4e d1       	rcall	.+668    	; 0x1fa6 <strnlen>
    1d0a:	4c 01       	movw	r8, r24
    1d0c:	82 01       	movw	r16, r4
    1d0e:	f3 2d       	mov	r31, r3
    1d10:	ff 77       	andi	r31, 0x7F	; 127
    1d12:	3f 2e       	mov	r3, r31
    1d14:	15 c0       	rjmp	.+42     	; 0x1d40 <vfprintf+0x1aa>
    1d16:	28 01       	movw	r4, r16
    1d18:	22 e0       	ldi	r18, 0x02	; 2
    1d1a:	42 0e       	add	r4, r18
    1d1c:	51 1c       	adc	r5, r1
    1d1e:	f8 01       	movw	r30, r16
    1d20:	a0 80       	ld	r10, Z
    1d22:	b1 80       	ldd	r11, Z+1	; 0x01
    1d24:	36 fe       	sbrs	r3, 6
    1d26:	03 c0       	rjmp	.+6      	; 0x1d2e <vfprintf+0x198>
    1d28:	69 2d       	mov	r22, r9
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <vfprintf+0x19c>
    1d2e:	6f ef       	ldi	r22, 0xFF	; 255
    1d30:	7f ef       	ldi	r23, 0xFF	; 255
    1d32:	c5 01       	movw	r24, r10
    1d34:	2d d1       	rcall	.+602    	; 0x1f90 <strnlen_P>
    1d36:	4c 01       	movw	r8, r24
    1d38:	f3 2d       	mov	r31, r3
    1d3a:	f0 68       	ori	r31, 0x80	; 128
    1d3c:	3f 2e       	mov	r3, r31
    1d3e:	82 01       	movw	r16, r4
    1d40:	33 fc       	sbrc	r3, 3
    1d42:	19 c0       	rjmp	.+50     	; 0x1d76 <vfprintf+0x1e0>
    1d44:	82 2d       	mov	r24, r2
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	88 16       	cp	r8, r24
    1d4a:	99 06       	cpc	r9, r25
    1d4c:	a0 f4       	brcc	.+40     	; 0x1d76 <vfprintf+0x1e0>
    1d4e:	b6 01       	movw	r22, r12
    1d50:	80 e2       	ldi	r24, 0x20	; 32
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	33 d1       	rcall	.+614    	; 0x1fbc <fputc>
    1d56:	2a 94       	dec	r2
    1d58:	f5 cf       	rjmp	.-22     	; 0x1d44 <vfprintf+0x1ae>
    1d5a:	f5 01       	movw	r30, r10
    1d5c:	37 fc       	sbrc	r3, 7
    1d5e:	85 91       	lpm	r24, Z+
    1d60:	37 fe       	sbrs	r3, 7
    1d62:	81 91       	ld	r24, Z+
    1d64:	5f 01       	movw	r10, r30
    1d66:	b6 01       	movw	r22, r12
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	28 d1       	rcall	.+592    	; 0x1fbc <fputc>
    1d6c:	21 10       	cpse	r2, r1
    1d6e:	2a 94       	dec	r2
    1d70:	21 e0       	ldi	r18, 0x01	; 1
    1d72:	82 1a       	sub	r8, r18
    1d74:	91 08       	sbc	r9, r1
    1d76:	81 14       	cp	r8, r1
    1d78:	91 04       	cpc	r9, r1
    1d7a:	79 f7       	brne	.-34     	; 0x1d5a <vfprintf+0x1c4>
    1d7c:	e1 c0       	rjmp	.+450    	; 0x1f40 <vfprintf+0x3aa>
    1d7e:	84 36       	cpi	r24, 0x64	; 100
    1d80:	11 f0       	breq	.+4      	; 0x1d86 <vfprintf+0x1f0>
    1d82:	89 36       	cpi	r24, 0x69	; 105
    1d84:	39 f5       	brne	.+78     	; 0x1dd4 <vfprintf+0x23e>
    1d86:	f8 01       	movw	r30, r16
    1d88:	37 fe       	sbrs	r3, 7
    1d8a:	07 c0       	rjmp	.+14     	; 0x1d9a <vfprintf+0x204>
    1d8c:	60 81       	ld	r22, Z
    1d8e:	71 81       	ldd	r23, Z+1	; 0x01
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	0c 5f       	subi	r16, 0xFC	; 252
    1d96:	1f 4f       	sbci	r17, 0xFF	; 255
    1d98:	08 c0       	rjmp	.+16     	; 0x1daa <vfprintf+0x214>
    1d9a:	60 81       	ld	r22, Z
    1d9c:	71 81       	ldd	r23, Z+1	; 0x01
    1d9e:	07 2e       	mov	r0, r23
    1da0:	00 0c       	add	r0, r0
    1da2:	88 0b       	sbc	r24, r24
    1da4:	99 0b       	sbc	r25, r25
    1da6:	0e 5f       	subi	r16, 0xFE	; 254
    1da8:	1f 4f       	sbci	r17, 0xFF	; 255
    1daa:	f3 2d       	mov	r31, r3
    1dac:	ff 76       	andi	r31, 0x6F	; 111
    1dae:	3f 2e       	mov	r3, r31
    1db0:	97 ff       	sbrs	r25, 7
    1db2:	09 c0       	rjmp	.+18     	; 0x1dc6 <vfprintf+0x230>
    1db4:	90 95       	com	r25
    1db6:	80 95       	com	r24
    1db8:	70 95       	com	r23
    1dba:	61 95       	neg	r22
    1dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc2:	f0 68       	ori	r31, 0x80	; 128
    1dc4:	3f 2e       	mov	r3, r31
    1dc6:	2a e0       	ldi	r18, 0x0A	; 10
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	a3 01       	movw	r20, r6
    1dcc:	33 d1       	rcall	.+614    	; 0x2034 <__ultoa_invert>
    1dce:	88 2e       	mov	r8, r24
    1dd0:	86 18       	sub	r8, r6
    1dd2:	44 c0       	rjmp	.+136    	; 0x1e5c <vfprintf+0x2c6>
    1dd4:	85 37       	cpi	r24, 0x75	; 117
    1dd6:	31 f4       	brne	.+12     	; 0x1de4 <vfprintf+0x24e>
    1dd8:	23 2d       	mov	r18, r3
    1dda:	2f 7e       	andi	r18, 0xEF	; 239
    1ddc:	b2 2e       	mov	r11, r18
    1dde:	2a e0       	ldi	r18, 0x0A	; 10
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	25 c0       	rjmp	.+74     	; 0x1e2e <vfprintf+0x298>
    1de4:	93 2d       	mov	r25, r3
    1de6:	99 7f       	andi	r25, 0xF9	; 249
    1de8:	b9 2e       	mov	r11, r25
    1dea:	8f 36       	cpi	r24, 0x6F	; 111
    1dec:	c1 f0       	breq	.+48     	; 0x1e1e <vfprintf+0x288>
    1dee:	18 f4       	brcc	.+6      	; 0x1df6 <vfprintf+0x260>
    1df0:	88 35       	cpi	r24, 0x58	; 88
    1df2:	79 f0       	breq	.+30     	; 0x1e12 <vfprintf+0x27c>
    1df4:	ae c0       	rjmp	.+348    	; 0x1f52 <vfprintf+0x3bc>
    1df6:	80 37       	cpi	r24, 0x70	; 112
    1df8:	19 f0       	breq	.+6      	; 0x1e00 <vfprintf+0x26a>
    1dfa:	88 37       	cpi	r24, 0x78	; 120
    1dfc:	21 f0       	breq	.+8      	; 0x1e06 <vfprintf+0x270>
    1dfe:	a9 c0       	rjmp	.+338    	; 0x1f52 <vfprintf+0x3bc>
    1e00:	e9 2f       	mov	r30, r25
    1e02:	e0 61       	ori	r30, 0x10	; 16
    1e04:	be 2e       	mov	r11, r30
    1e06:	b4 fe       	sbrs	r11, 4
    1e08:	0d c0       	rjmp	.+26     	; 0x1e24 <vfprintf+0x28e>
    1e0a:	fb 2d       	mov	r31, r11
    1e0c:	f4 60       	ori	r31, 0x04	; 4
    1e0e:	bf 2e       	mov	r11, r31
    1e10:	09 c0       	rjmp	.+18     	; 0x1e24 <vfprintf+0x28e>
    1e12:	34 fe       	sbrs	r3, 4
    1e14:	0a c0       	rjmp	.+20     	; 0x1e2a <vfprintf+0x294>
    1e16:	29 2f       	mov	r18, r25
    1e18:	26 60       	ori	r18, 0x06	; 6
    1e1a:	b2 2e       	mov	r11, r18
    1e1c:	06 c0       	rjmp	.+12     	; 0x1e2a <vfprintf+0x294>
    1e1e:	28 e0       	ldi	r18, 0x08	; 8
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	05 c0       	rjmp	.+10     	; 0x1e2e <vfprintf+0x298>
    1e24:	20 e1       	ldi	r18, 0x10	; 16
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <vfprintf+0x298>
    1e2a:	20 e1       	ldi	r18, 0x10	; 16
    1e2c:	32 e0       	ldi	r19, 0x02	; 2
    1e2e:	f8 01       	movw	r30, r16
    1e30:	b7 fe       	sbrs	r11, 7
    1e32:	07 c0       	rjmp	.+14     	; 0x1e42 <vfprintf+0x2ac>
    1e34:	60 81       	ld	r22, Z
    1e36:	71 81       	ldd	r23, Z+1	; 0x01
    1e38:	82 81       	ldd	r24, Z+2	; 0x02
    1e3a:	93 81       	ldd	r25, Z+3	; 0x03
    1e3c:	0c 5f       	subi	r16, 0xFC	; 252
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	06 c0       	rjmp	.+12     	; 0x1e4e <vfprintf+0x2b8>
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 5f       	subi	r16, 0xFE	; 254
    1e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4e:	a3 01       	movw	r20, r6
    1e50:	f1 d0       	rcall	.+482    	; 0x2034 <__ultoa_invert>
    1e52:	88 2e       	mov	r8, r24
    1e54:	86 18       	sub	r8, r6
    1e56:	fb 2d       	mov	r31, r11
    1e58:	ff 77       	andi	r31, 0x7F	; 127
    1e5a:	3f 2e       	mov	r3, r31
    1e5c:	36 fe       	sbrs	r3, 6
    1e5e:	0d c0       	rjmp	.+26     	; 0x1e7a <vfprintf+0x2e4>
    1e60:	23 2d       	mov	r18, r3
    1e62:	2e 7f       	andi	r18, 0xFE	; 254
    1e64:	a2 2e       	mov	r10, r18
    1e66:	89 14       	cp	r8, r9
    1e68:	58 f4       	brcc	.+22     	; 0x1e80 <vfprintf+0x2ea>
    1e6a:	34 fe       	sbrs	r3, 4
    1e6c:	0b c0       	rjmp	.+22     	; 0x1e84 <vfprintf+0x2ee>
    1e6e:	32 fc       	sbrc	r3, 2
    1e70:	09 c0       	rjmp	.+18     	; 0x1e84 <vfprintf+0x2ee>
    1e72:	83 2d       	mov	r24, r3
    1e74:	8e 7e       	andi	r24, 0xEE	; 238
    1e76:	a8 2e       	mov	r10, r24
    1e78:	05 c0       	rjmp	.+10     	; 0x1e84 <vfprintf+0x2ee>
    1e7a:	b8 2c       	mov	r11, r8
    1e7c:	a3 2c       	mov	r10, r3
    1e7e:	03 c0       	rjmp	.+6      	; 0x1e86 <vfprintf+0x2f0>
    1e80:	b8 2c       	mov	r11, r8
    1e82:	01 c0       	rjmp	.+2      	; 0x1e86 <vfprintf+0x2f0>
    1e84:	b9 2c       	mov	r11, r9
    1e86:	a4 fe       	sbrs	r10, 4
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <vfprintf+0x312>
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e8 0d       	add	r30, r8
    1e8e:	f1 1d       	adc	r31, r1
    1e90:	80 81       	ld	r24, Z
    1e92:	80 33       	cpi	r24, 0x30	; 48
    1e94:	21 f4       	brne	.+8      	; 0x1e9e <vfprintf+0x308>
    1e96:	9a 2d       	mov	r25, r10
    1e98:	99 7e       	andi	r25, 0xE9	; 233
    1e9a:	a9 2e       	mov	r10, r25
    1e9c:	09 c0       	rjmp	.+18     	; 0x1eb0 <vfprintf+0x31a>
    1e9e:	a2 fe       	sbrs	r10, 2
    1ea0:	06 c0       	rjmp	.+12     	; 0x1eae <vfprintf+0x318>
    1ea2:	b3 94       	inc	r11
    1ea4:	b3 94       	inc	r11
    1ea6:	04 c0       	rjmp	.+8      	; 0x1eb0 <vfprintf+0x31a>
    1ea8:	8a 2d       	mov	r24, r10
    1eaa:	86 78       	andi	r24, 0x86	; 134
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <vfprintf+0x31a>
    1eae:	b3 94       	inc	r11
    1eb0:	a3 fc       	sbrc	r10, 3
    1eb2:	10 c0       	rjmp	.+32     	; 0x1ed4 <vfprintf+0x33e>
    1eb4:	a0 fe       	sbrs	r10, 0
    1eb6:	06 c0       	rjmp	.+12     	; 0x1ec4 <vfprintf+0x32e>
    1eb8:	b2 14       	cp	r11, r2
    1eba:	80 f4       	brcc	.+32     	; 0x1edc <vfprintf+0x346>
    1ebc:	28 0c       	add	r2, r8
    1ebe:	92 2c       	mov	r9, r2
    1ec0:	9b 18       	sub	r9, r11
    1ec2:	0d c0       	rjmp	.+26     	; 0x1ede <vfprintf+0x348>
    1ec4:	b2 14       	cp	r11, r2
    1ec6:	58 f4       	brcc	.+22     	; 0x1ede <vfprintf+0x348>
    1ec8:	b6 01       	movw	r22, r12
    1eca:	80 e2       	ldi	r24, 0x20	; 32
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	76 d0       	rcall	.+236    	; 0x1fbc <fputc>
    1ed0:	b3 94       	inc	r11
    1ed2:	f8 cf       	rjmp	.-16     	; 0x1ec4 <vfprintf+0x32e>
    1ed4:	b2 14       	cp	r11, r2
    1ed6:	18 f4       	brcc	.+6      	; 0x1ede <vfprintf+0x348>
    1ed8:	2b 18       	sub	r2, r11
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <vfprintf+0x34a>
    1edc:	98 2c       	mov	r9, r8
    1ede:	21 2c       	mov	r2, r1
    1ee0:	a4 fe       	sbrs	r10, 4
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <vfprintf+0x36c>
    1ee4:	b6 01       	movw	r22, r12
    1ee6:	80 e3       	ldi	r24, 0x30	; 48
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	68 d0       	rcall	.+208    	; 0x1fbc <fputc>
    1eec:	a2 fe       	sbrs	r10, 2
    1eee:	16 c0       	rjmp	.+44     	; 0x1f1c <vfprintf+0x386>
    1ef0:	a1 fc       	sbrc	r10, 1
    1ef2:	03 c0       	rjmp	.+6      	; 0x1efa <vfprintf+0x364>
    1ef4:	88 e7       	ldi	r24, 0x78	; 120
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <vfprintf+0x368>
    1efa:	88 e5       	ldi	r24, 0x58	; 88
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	b6 01       	movw	r22, r12
    1f00:	0c c0       	rjmp	.+24     	; 0x1f1a <vfprintf+0x384>
    1f02:	8a 2d       	mov	r24, r10
    1f04:	86 78       	andi	r24, 0x86	; 134
    1f06:	51 f0       	breq	.+20     	; 0x1f1c <vfprintf+0x386>
    1f08:	a1 fe       	sbrs	r10, 1
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <vfprintf+0x37a>
    1f0c:	8b e2       	ldi	r24, 0x2B	; 43
    1f0e:	01 c0       	rjmp	.+2      	; 0x1f12 <vfprintf+0x37c>
    1f10:	80 e2       	ldi	r24, 0x20	; 32
    1f12:	a7 fc       	sbrc	r10, 7
    1f14:	8d e2       	ldi	r24, 0x2D	; 45
    1f16:	b6 01       	movw	r22, r12
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	50 d0       	rcall	.+160    	; 0x1fbc <fputc>
    1f1c:	89 14       	cp	r8, r9
    1f1e:	30 f4       	brcc	.+12     	; 0x1f2c <vfprintf+0x396>
    1f20:	b6 01       	movw	r22, r12
    1f22:	80 e3       	ldi	r24, 0x30	; 48
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	4a d0       	rcall	.+148    	; 0x1fbc <fputc>
    1f28:	9a 94       	dec	r9
    1f2a:	f8 cf       	rjmp	.-16     	; 0x1f1c <vfprintf+0x386>
    1f2c:	8a 94       	dec	r8
    1f2e:	f3 01       	movw	r30, r6
    1f30:	e8 0d       	add	r30, r8
    1f32:	f1 1d       	adc	r31, r1
    1f34:	80 81       	ld	r24, Z
    1f36:	b6 01       	movw	r22, r12
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	40 d0       	rcall	.+128    	; 0x1fbc <fputc>
    1f3c:	81 10       	cpse	r8, r1
    1f3e:	f6 cf       	rjmp	.-20     	; 0x1f2c <vfprintf+0x396>
    1f40:	22 20       	and	r2, r2
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <vfprintf+0x3b0>
    1f44:	4e ce       	rjmp	.-868    	; 0x1be2 <vfprintf+0x4c>
    1f46:	b6 01       	movw	r22, r12
    1f48:	80 e2       	ldi	r24, 0x20	; 32
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	37 d0       	rcall	.+110    	; 0x1fbc <fputc>
    1f4e:	2a 94       	dec	r2
    1f50:	f7 cf       	rjmp	.-18     	; 0x1f40 <vfprintf+0x3aa>
    1f52:	f6 01       	movw	r30, r12
    1f54:	86 81       	ldd	r24, Z+6	; 0x06
    1f56:	97 81       	ldd	r25, Z+7	; 0x07
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <vfprintf+0x3c8>
    1f5a:	8f ef       	ldi	r24, 0xFF	; 255
    1f5c:	9f ef       	ldi	r25, 0xFF	; 255
    1f5e:	2b 96       	adiw	r28, 0x0b	; 11
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	ff 90       	pop	r15
    1f74:	ef 90       	pop	r14
    1f76:	df 90       	pop	r13
    1f78:	cf 90       	pop	r12
    1f7a:	bf 90       	pop	r11
    1f7c:	af 90       	pop	r10
    1f7e:	9f 90       	pop	r9
    1f80:	8f 90       	pop	r8
    1f82:	7f 90       	pop	r7
    1f84:	6f 90       	pop	r6
    1f86:	5f 90       	pop	r5
    1f88:	4f 90       	pop	r4
    1f8a:	3f 90       	pop	r3
    1f8c:	2f 90       	pop	r2
    1f8e:	08 95       	ret

00001f90 <strnlen_P>:
    1f90:	fc 01       	movw	r30, r24
    1f92:	05 90       	lpm	r0, Z+
    1f94:	61 50       	subi	r22, 0x01	; 1
    1f96:	70 40       	sbci	r23, 0x00	; 0
    1f98:	01 10       	cpse	r0, r1
    1f9a:	d8 f7       	brcc	.-10     	; 0x1f92 <strnlen_P+0x2>
    1f9c:	80 95       	com	r24
    1f9e:	90 95       	com	r25
    1fa0:	8e 0f       	add	r24, r30
    1fa2:	9f 1f       	adc	r25, r31
    1fa4:	08 95       	ret

00001fa6 <strnlen>:
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	61 50       	subi	r22, 0x01	; 1
    1faa:	70 40       	sbci	r23, 0x00	; 0
    1fac:	01 90       	ld	r0, Z+
    1fae:	01 10       	cpse	r0, r1
    1fb0:	d8 f7       	brcc	.-10     	; 0x1fa8 <strnlen+0x2>
    1fb2:	80 95       	com	r24
    1fb4:	90 95       	com	r25
    1fb6:	8e 0f       	add	r24, r30
    1fb8:	9f 1f       	adc	r25, r31
    1fba:	08 95       	ret

00001fbc <fputc>:
    1fbc:	0f 93       	push	r16
    1fbe:	1f 93       	push	r17
    1fc0:	cf 93       	push	r28
    1fc2:	df 93       	push	r29
    1fc4:	fb 01       	movw	r30, r22
    1fc6:	23 81       	ldd	r18, Z+3	; 0x03
    1fc8:	21 fd       	sbrc	r18, 1
    1fca:	03 c0       	rjmp	.+6      	; 0x1fd2 <fputc+0x16>
    1fcc:	8f ef       	ldi	r24, 0xFF	; 255
    1fce:	9f ef       	ldi	r25, 0xFF	; 255
    1fd0:	2c c0       	rjmp	.+88     	; 0x202a <fputc+0x6e>
    1fd2:	22 ff       	sbrs	r18, 2
    1fd4:	16 c0       	rjmp	.+44     	; 0x2002 <fputc+0x46>
    1fd6:	46 81       	ldd	r20, Z+6	; 0x06
    1fd8:	57 81       	ldd	r21, Z+7	; 0x07
    1fda:	24 81       	ldd	r18, Z+4	; 0x04
    1fdc:	35 81       	ldd	r19, Z+5	; 0x05
    1fde:	42 17       	cp	r20, r18
    1fe0:	53 07       	cpc	r21, r19
    1fe2:	44 f4       	brge	.+16     	; 0x1ff4 <fputc+0x38>
    1fe4:	a0 81       	ld	r26, Z
    1fe6:	b1 81       	ldd	r27, Z+1	; 0x01
    1fe8:	9d 01       	movw	r18, r26
    1fea:	2f 5f       	subi	r18, 0xFF	; 255
    1fec:	3f 4f       	sbci	r19, 0xFF	; 255
    1fee:	31 83       	std	Z+1, r19	; 0x01
    1ff0:	20 83       	st	Z, r18
    1ff2:	8c 93       	st	X, r24
    1ff4:	26 81       	ldd	r18, Z+6	; 0x06
    1ff6:	37 81       	ldd	r19, Z+7	; 0x07
    1ff8:	2f 5f       	subi	r18, 0xFF	; 255
    1ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffc:	37 83       	std	Z+7, r19	; 0x07
    1ffe:	26 83       	std	Z+6, r18	; 0x06
    2000:	14 c0       	rjmp	.+40     	; 0x202a <fputc+0x6e>
    2002:	8b 01       	movw	r16, r22
    2004:	ec 01       	movw	r28, r24
    2006:	fb 01       	movw	r30, r22
    2008:	00 84       	ldd	r0, Z+8	; 0x08
    200a:	f1 85       	ldd	r31, Z+9	; 0x09
    200c:	e0 2d       	mov	r30, r0
    200e:	09 95       	icall
    2010:	89 2b       	or	r24, r25
    2012:	e1 f6       	brne	.-72     	; 0x1fcc <fputc+0x10>
    2014:	d8 01       	movw	r26, r16
    2016:	16 96       	adiw	r26, 0x06	; 6
    2018:	8d 91       	ld	r24, X+
    201a:	9c 91       	ld	r25, X
    201c:	17 97       	sbiw	r26, 0x07	; 7
    201e:	01 96       	adiw	r24, 0x01	; 1
    2020:	17 96       	adiw	r26, 0x07	; 7
    2022:	9c 93       	st	X, r25
    2024:	8e 93       	st	-X, r24
    2026:	16 97       	sbiw	r26, 0x06	; 6
    2028:	ce 01       	movw	r24, r28
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	08 95       	ret

00002034 <__ultoa_invert>:
    2034:	fa 01       	movw	r30, r20
    2036:	aa 27       	eor	r26, r26
    2038:	28 30       	cpi	r18, 0x08	; 8
    203a:	51 f1       	breq	.+84     	; 0x2090 <__ultoa_invert+0x5c>
    203c:	20 31       	cpi	r18, 0x10	; 16
    203e:	81 f1       	breq	.+96     	; 0x20a0 <__ultoa_invert+0x6c>
    2040:	e8 94       	clt
    2042:	6f 93       	push	r22
    2044:	6e 7f       	andi	r22, 0xFE	; 254
    2046:	6e 5f       	subi	r22, 0xFE	; 254
    2048:	7f 4f       	sbci	r23, 0xFF	; 255
    204a:	8f 4f       	sbci	r24, 0xFF	; 255
    204c:	9f 4f       	sbci	r25, 0xFF	; 255
    204e:	af 4f       	sbci	r26, 0xFF	; 255
    2050:	b1 e0       	ldi	r27, 0x01	; 1
    2052:	3e d0       	rcall	.+124    	; 0x20d0 <__ultoa_invert+0x9c>
    2054:	b4 e0       	ldi	r27, 0x04	; 4
    2056:	3c d0       	rcall	.+120    	; 0x20d0 <__ultoa_invert+0x9c>
    2058:	67 0f       	add	r22, r23
    205a:	78 1f       	adc	r23, r24
    205c:	89 1f       	adc	r24, r25
    205e:	9a 1f       	adc	r25, r26
    2060:	a1 1d       	adc	r26, r1
    2062:	68 0f       	add	r22, r24
    2064:	79 1f       	adc	r23, r25
    2066:	8a 1f       	adc	r24, r26
    2068:	91 1d       	adc	r25, r1
    206a:	a1 1d       	adc	r26, r1
    206c:	6a 0f       	add	r22, r26
    206e:	71 1d       	adc	r23, r1
    2070:	81 1d       	adc	r24, r1
    2072:	91 1d       	adc	r25, r1
    2074:	a1 1d       	adc	r26, r1
    2076:	20 d0       	rcall	.+64     	; 0x20b8 <__ultoa_invert+0x84>
    2078:	09 f4       	brne	.+2      	; 0x207c <__ultoa_invert+0x48>
    207a:	68 94       	set
    207c:	3f 91       	pop	r19
    207e:	2a e0       	ldi	r18, 0x0A	; 10
    2080:	26 9f       	mul	r18, r22
    2082:	11 24       	eor	r1, r1
    2084:	30 19       	sub	r19, r0
    2086:	30 5d       	subi	r19, 0xD0	; 208
    2088:	31 93       	st	Z+, r19
    208a:	de f6       	brtc	.-74     	; 0x2042 <__ultoa_invert+0xe>
    208c:	cf 01       	movw	r24, r30
    208e:	08 95       	ret
    2090:	46 2f       	mov	r20, r22
    2092:	47 70       	andi	r20, 0x07	; 7
    2094:	40 5d       	subi	r20, 0xD0	; 208
    2096:	41 93       	st	Z+, r20
    2098:	b3 e0       	ldi	r27, 0x03	; 3
    209a:	0f d0       	rcall	.+30     	; 0x20ba <__ultoa_invert+0x86>
    209c:	c9 f7       	brne	.-14     	; 0x2090 <__ultoa_invert+0x5c>
    209e:	f6 cf       	rjmp	.-20     	; 0x208c <__ultoa_invert+0x58>
    20a0:	46 2f       	mov	r20, r22
    20a2:	4f 70       	andi	r20, 0x0F	; 15
    20a4:	40 5d       	subi	r20, 0xD0	; 208
    20a6:	4a 33       	cpi	r20, 0x3A	; 58
    20a8:	18 f0       	brcs	.+6      	; 0x20b0 <__ultoa_invert+0x7c>
    20aa:	49 5d       	subi	r20, 0xD9	; 217
    20ac:	31 fd       	sbrc	r19, 1
    20ae:	40 52       	subi	r20, 0x20	; 32
    20b0:	41 93       	st	Z+, r20
    20b2:	02 d0       	rcall	.+4      	; 0x20b8 <__ultoa_invert+0x84>
    20b4:	a9 f7       	brne	.-22     	; 0x20a0 <__ultoa_invert+0x6c>
    20b6:	ea cf       	rjmp	.-44     	; 0x208c <__ultoa_invert+0x58>
    20b8:	b4 e0       	ldi	r27, 0x04	; 4
    20ba:	a6 95       	lsr	r26
    20bc:	97 95       	ror	r25
    20be:	87 95       	ror	r24
    20c0:	77 95       	ror	r23
    20c2:	67 95       	ror	r22
    20c4:	ba 95       	dec	r27
    20c6:	c9 f7       	brne	.-14     	; 0x20ba <__ultoa_invert+0x86>
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	61 05       	cpc	r22, r1
    20cc:	71 05       	cpc	r23, r1
    20ce:	08 95       	ret
    20d0:	9b 01       	movw	r18, r22
    20d2:	ac 01       	movw	r20, r24
    20d4:	0a 2e       	mov	r0, r26
    20d6:	06 94       	lsr	r0
    20d8:	57 95       	ror	r21
    20da:	47 95       	ror	r20
    20dc:	37 95       	ror	r19
    20de:	27 95       	ror	r18
    20e0:	ba 95       	dec	r27
    20e2:	c9 f7       	brne	.-14     	; 0x20d6 <__ultoa_invert+0xa2>
    20e4:	62 0f       	add	r22, r18
    20e6:	73 1f       	adc	r23, r19
    20e8:	84 1f       	adc	r24, r20
    20ea:	95 1f       	adc	r25, r21
    20ec:	a0 1d       	adc	r26, r0
    20ee:	08 95       	ret

000020f0 <_exit>:
    20f0:	f8 94       	cli

000020f2 <__stop_program>:
    20f2:	ff cf       	rjmp	.-2      	; 0x20f2 <__stop_program>
