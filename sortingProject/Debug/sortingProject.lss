
sortingProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  00002002  00002096  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002002  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000041c  008001c4  008001c4  0000215a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000215a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e12  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a48  00000000  00000000  000072ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000181d  00000000  00000000  00008d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000828  00000000  00000000  0000a520  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001084  00000000  00000000  0000ad48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000228a  00000000  00000000  0000bdcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000e056  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ca c2       	rjmp	.+1428   	; 0x596 <__ctors_end>
       2:	00 00       	nop
       4:	f1 c2       	rjmp	.+1506   	; 0x5e8 <__bad_interrupt>
       6:	00 00       	nop
       8:	ef c2       	rjmp	.+1502   	; 0x5e8 <__bad_interrupt>
       a:	00 00       	nop
       c:	2c c4       	rjmp	.+2136   	; 0x866 <__vector_3>
       e:	00 00       	nop
      10:	d5 c4       	rjmp	.+2474   	; 0x9bc <__vector_4>
      12:	00 00       	nop
      14:	e9 c2       	rjmp	.+1490   	; 0x5e8 <__bad_interrupt>
      16:	00 00       	nop
      18:	e7 c2       	rjmp	.+1486   	; 0x5e8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e5 c2       	rjmp	.+1482   	; 0x5e8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e3 c2       	rjmp	.+1478   	; 0x5e8 <__bad_interrupt>
      22:	00 00       	nop
      24:	e1 c2       	rjmp	.+1474   	; 0x5e8 <__bad_interrupt>
      26:	00 00       	nop
      28:	df c2       	rjmp	.+1470   	; 0x5e8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	dd c2       	rjmp	.+1466   	; 0x5e8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	db c2       	rjmp	.+1462   	; 0x5e8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d9 c2       	rjmp	.+1458   	; 0x5e8 <__bad_interrupt>
      36:	00 00       	nop
      38:	d7 c2       	rjmp	.+1454   	; 0x5e8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d5 c2       	rjmp	.+1450   	; 0x5e8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d3 c2       	rjmp	.+1446   	; 0x5e8 <__bad_interrupt>
      42:	00 00       	nop
      44:	d1 c2       	rjmp	.+1442   	; 0x5e8 <__bad_interrupt>
      46:	00 00       	nop
      48:	cf c2       	rjmp	.+1438   	; 0x5e8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	cd c2       	rjmp	.+1434   	; 0x5e8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	cb c2       	rjmp	.+1430   	; 0x5e8 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__vector_21>
      58:	c7 c2       	rjmp	.+1422   	; 0x5e8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c5 c2       	rjmp	.+1418   	; 0x5e8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c3 c2       	rjmp	.+1414   	; 0x5e8 <__bad_interrupt>
      62:	00 00       	nop
      64:	c1 c2       	rjmp	.+1410   	; 0x5e8 <__bad_interrupt>
      66:	00 00       	nop
      68:	bf c2       	rjmp	.+1406   	; 0x5e8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	bd c2       	rjmp	.+1402   	; 0x5e8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	bb c2       	rjmp	.+1398   	; 0x5e8 <__bad_interrupt>
      72:	00 00       	nop
      74:	b9 c3       	rjmp	.+1906   	; 0x7e8 <__vector_29>
      76:	00 00       	nop
      78:	b7 c2       	rjmp	.+1390   	; 0x5e8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b5 c2       	rjmp	.+1386   	; 0x5e8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b3 c2       	rjmp	.+1382   	; 0x5e8 <__bad_interrupt>
      82:	00 00       	nop
      84:	b1 c2       	rjmp	.+1378   	; 0x5e8 <__bad_interrupt>
      86:	00 00       	nop
      88:	af c2       	rjmp	.+1374   	; 0x5e8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ad c2       	rjmp	.+1370   	; 0x5e8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ab c2       	rjmp	.+1366   	; 0x5e8 <__bad_interrupt>
      92:	00 00       	nop
      94:	a9 c2       	rjmp	.+1362   	; 0x5e8 <__bad_interrupt>
	...

00000098 <__trampolines_end>:
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	00 3e       	cpi	r16, 0xE0	; 224
      9e:	5b 4f       	sbci	r21, 0xFB	; 251
      a0:	5b 3e       	cpi	r21, 0xEB	; 235
      a2:	3e 6b       	ori	r19, 0xBE	; 190
      a4:	4f 6b       	ori	r20, 0xBF	; 191
      a6:	3e 1c       	adc	r3, r14
      a8:	3e 7c       	andi	r19, 0xCE	; 206
      aa:	3e 1c       	adc	r3, r14
      ac:	18 3c       	cpi	r17, 0xC8	; 200
      ae:	7e 3c       	cpi	r23, 0xCE	; 206
      b0:	18 1c       	adc	r1, r8
      b2:	57 7d       	andi	r21, 0xD7	; 215
      b4:	57 1c       	adc	r5, r7
      b6:	1c 5e       	subi	r17, 0xEC	; 236
      b8:	7f 5e       	subi	r23, 0xEF	; 239
      ba:	1c 00       	.word	0x001c	; ????
      bc:	18 3c       	cpi	r17, 0xC8	; 200
      be:	18 00       	.word	0x0018	; ????
      c0:	ff e7       	ldi	r31, 0x7F	; 127
      c2:	c3 e7       	ldi	r28, 0x73	; 115
      c4:	ff 00       	.word	0x00ff	; ????
      c6:	18 24       	eor	r1, r8
      c8:	18 00       	.word	0x0018	; ????
      ca:	ff e7       	ldi	r31, 0x7F	; 127
      cc:	db e7       	ldi	r29, 0x7B	; 123
      ce:	ff 30       	cpi	r31, 0x0F	; 15
      d0:	48 3a       	cpi	r20, 0xA8	; 168
      d2:	06 0e       	add	r0, r22
      d4:	26 29       	or	r18, r6
      d6:	79 29       	or	r23, r9
      d8:	26 40       	sbci	r18, 0x06	; 6
      da:	7f 05       	cpc	r23, r15
      dc:	05 07       	cpc	r16, r21
      de:	40 7f       	andi	r20, 0xF0	; 240
      e0:	05 25       	eor	r16, r5
      e2:	3f 5a       	subi	r19, 0xAF	; 175
      e4:	3c e7       	ldi	r19, 0x7C	; 124
      e6:	3c 5a       	subi	r19, 0xAC	; 172
      e8:	7f 3e       	cpi	r23, 0xEF	; 239
      ea:	1c 1c       	adc	r1, r12
      ec:	08 08       	sbc	r0, r8
      ee:	1c 1c       	adc	r1, r12
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	14 22       	and	r1, r20
      f4:	7f 22       	and	r7, r31
      f6:	14 5f       	subi	r17, 0xF4	; 244
      f8:	5f 00       	.word	0x005f	; ????
      fa:	5f 5f       	subi	r21, 0xFF	; 255
      fc:	06 09       	sbc	r16, r6
      fe:	7f 01       	movw	r14, r30
     100:	7f 00       	.word	0x007f	; ????
     102:	66 89       	ldd	r22, Z+22	; 0x16
     104:	95 6a       	ori	r25, 0xA5	; 165
     106:	60 60       	ori	r22, 0x00	; 0
     108:	60 60       	ori	r22, 0x00	; 0
     10a:	60 94       	com	r6
     10c:	a2 ff       	sbrs	r26, 2
     10e:	a2 94       	swap	r10
     110:	08 04       	cpc	r0, r8
     112:	7e 04       	cpc	r7, r14
     114:	08 10       	cpse	r0, r8
     116:	20 7e       	andi	r18, 0xE0	; 224
     118:	20 10       	cpse	r2, r0
     11a:	08 08       	sbc	r0, r8
     11c:	2a 1c       	adc	r2, r10
     11e:	08 08       	sbc	r0, r8
     120:	1c 2a       	or	r1, r28
     122:	08 08       	sbc	r0, r8
     124:	1e 10       	cpse	r1, r14
     126:	10 10       	cpse	r1, r0
     128:	10 0c       	add	r1, r0
     12a:	1e 0c       	add	r1, r14
     12c:	1e 0c       	add	r1, r14
     12e:	30 38       	cpi	r19, 0x80	; 128
     130:	3e 38       	cpi	r19, 0x8E	; 142
     132:	30 06       	cpc	r3, r16
     134:	0e 3e       	cpi	r16, 0xEE	; 238
     136:	0e 06       	cpc	r0, r30
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 5f       	subi	r16, 0xF0	; 240
     140:	00 00       	nop
     142:	00 07       	cpc	r16, r16
     144:	00 07       	cpc	r16, r16
     146:	00 14       	cp	r0, r0
     148:	7f 14       	cp	r7, r15
     14a:	7f 14       	cp	r7, r15
     14c:	24 2a       	or	r2, r20
     14e:	7f 2a       	or	r7, r31
     150:	12 23       	and	r17, r18
     152:	13 08       	sbc	r1, r3
     154:	64 62       	ori	r22, 0x24	; 36
     156:	36 49       	sbci	r19, 0x96	; 150
     158:	56 20       	and	r5, r6
     15a:	50 00       	.word	0x0050	; ????
     15c:	08 07       	cpc	r16, r24
     15e:	03 00       	.word	0x0003	; ????
     160:	00 1c       	adc	r0, r0
     162:	22 41       	sbci	r18, 0x12	; 18
     164:	00 00       	nop
     166:	41 22       	and	r4, r17
     168:	1c 00       	.word	0x001c	; ????
     16a:	2a 1c       	adc	r2, r10
     16c:	7f 1c       	adc	r7, r15
     16e:	2a 08       	sbc	r2, r10
     170:	08 3e       	cpi	r16, 0xE8	; 232
     172:	08 08       	sbc	r0, r8
     174:	00 80       	ld	r0, Z
     176:	70 30       	cpi	r23, 0x00	; 0
     178:	00 08       	sbc	r0, r0
     17a:	08 08       	sbc	r0, r8
     17c:	08 08       	sbc	r0, r8
     17e:	00 00       	nop
     180:	60 60       	ori	r22, 0x00	; 0
     182:	00 20       	and	r0, r0
     184:	10 08       	sbc	r1, r0
     186:	04 02       	muls	r16, r20
     188:	3e 51       	subi	r19, 0x1E	; 30
     18a:	49 45       	sbci	r20, 0x59	; 89
     18c:	3e 00       	.word	0x003e	; ????
     18e:	42 7f       	andi	r20, 0xF2	; 242
     190:	40 00       	.word	0x0040	; ????
     192:	72 49       	sbci	r23, 0x92	; 146
     194:	49 49       	sbci	r20, 0x99	; 153
     196:	46 21       	and	r20, r6
     198:	41 49       	sbci	r20, 0x91	; 145
     19a:	4d 33       	cpi	r20, 0x3D	; 61
     19c:	18 14       	cp	r1, r8
     19e:	12 7f       	andi	r17, 0xF2	; 242
     1a0:	10 27       	eor	r17, r16
     1a2:	45 45       	sbci	r20, 0x55	; 85
     1a4:	45 39       	cpi	r20, 0x95	; 149
     1a6:	3c 4a       	sbci	r19, 0xAC	; 172
     1a8:	49 49       	sbci	r20, 0x99	; 153
     1aa:	31 41       	sbci	r19, 0x11	; 17
     1ac:	21 11       	cpse	r18, r1
     1ae:	09 07       	cpc	r16, r25
     1b0:	36 49       	sbci	r19, 0x96	; 150
     1b2:	49 49       	sbci	r20, 0x99	; 153
     1b4:	36 46       	sbci	r19, 0x66	; 102
     1b6:	49 49       	sbci	r20, 0x99	; 153
     1b8:	29 1e       	adc	r2, r25
     1ba:	00 00       	nop
     1bc:	14 00       	.word	0x0014	; ????
     1be:	00 00       	nop
     1c0:	40 34       	cpi	r20, 0x40	; 64
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	14 22       	and	r1, r20
     1c8:	41 14       	cp	r4, r1
     1ca:	14 14       	cp	r1, r4
     1cc:	14 14       	cp	r1, r4
     1ce:	00 41       	sbci	r16, 0x10	; 16
     1d0:	22 14       	cp	r2, r2
     1d2:	08 02       	muls	r16, r24
     1d4:	01 59       	subi	r16, 0x91	; 145
     1d6:	09 06       	cpc	r0, r25
     1d8:	3e 41       	sbci	r19, 0x1E	; 30
     1da:	5d 59       	subi	r21, 0x9D	; 157
     1dc:	4e 7c       	andi	r20, 0xCE	; 206
     1de:	12 11       	cpse	r17, r2
     1e0:	12 7c       	andi	r17, 0xC2	; 194
     1e2:	7f 49       	sbci	r23, 0x9F	; 159
     1e4:	49 49       	sbci	r20, 0x99	; 153
     1e6:	36 3e       	cpi	r19, 0xE6	; 230
     1e8:	41 41       	sbci	r20, 0x11	; 17
     1ea:	41 22       	and	r4, r17
     1ec:	7f 41       	sbci	r23, 0x1F	; 31
     1ee:	41 41       	sbci	r20, 0x11	; 17
     1f0:	3e 7f       	andi	r19, 0xFE	; 254
     1f2:	49 49       	sbci	r20, 0x99	; 153
     1f4:	49 41       	sbci	r20, 0x19	; 25
     1f6:	7f 09       	sbc	r23, r15
     1f8:	09 09       	sbc	r16, r9
     1fa:	01 3e       	cpi	r16, 0xE1	; 225
     1fc:	41 41       	sbci	r20, 0x11	; 17
     1fe:	51 73       	andi	r21, 0x31	; 49
     200:	7f 08       	sbc	r7, r15
     202:	08 08       	sbc	r0, r8
     204:	7f 00       	.word	0x007f	; ????
     206:	41 7f       	andi	r20, 0xF1	; 241
     208:	41 00       	.word	0x0041	; ????
     20a:	20 40       	sbci	r18, 0x00	; 0
     20c:	41 3f       	cpi	r20, 0xF1	; 241
     20e:	01 7f       	andi	r16, 0xF1	; 241
     210:	08 14       	cp	r0, r8
     212:	22 41       	sbci	r18, 0x12	; 18
     214:	7f 40       	sbci	r23, 0x0F	; 15
     216:	40 40       	sbci	r20, 0x00	; 0
     218:	40 7f       	andi	r20, 0xF0	; 240
     21a:	02 1c       	adc	r0, r2
     21c:	02 7f       	andi	r16, 0xF2	; 242
     21e:	7f 04       	cpc	r7, r15
     220:	08 10       	cpse	r0, r8
     222:	7f 3e       	cpi	r23, 0xEF	; 239
     224:	41 41       	sbci	r20, 0x11	; 17
     226:	41 3e       	cpi	r20, 0xE1	; 225
     228:	7f 09       	sbc	r23, r15
     22a:	09 09       	sbc	r16, r9
     22c:	06 3e       	cpi	r16, 0xE6	; 230
     22e:	41 51       	subi	r20, 0x11	; 17
     230:	21 5e       	subi	r18, 0xE1	; 225
     232:	7f 09       	sbc	r23, r15
     234:	19 29       	or	r17, r9
     236:	46 26       	eor	r4, r22
     238:	49 49       	sbci	r20, 0x99	; 153
     23a:	49 32       	cpi	r20, 0x29	; 41
     23c:	03 01       	movw	r0, r6
     23e:	7f 01       	movw	r14, r30
     240:	03 3f       	cpi	r16, 0xF3	; 243
     242:	40 40       	sbci	r20, 0x00	; 0
     244:	40 3f       	cpi	r20, 0xF0	; 240
     246:	1f 20       	and	r1, r15
     248:	40 20       	and	r4, r0
     24a:	1f 3f       	cpi	r17, 0xFF	; 255
     24c:	40 38       	cpi	r20, 0x80	; 128
     24e:	40 3f       	cpi	r20, 0xF0	; 240
     250:	63 14       	cp	r6, r3
     252:	08 14       	cp	r0, r8
     254:	63 03       	mulsu	r22, r19
     256:	04 78       	andi	r16, 0x84	; 132
     258:	04 03       	mulsu	r16, r20
     25a:	61 59       	subi	r22, 0x91	; 145
     25c:	49 4d       	sbci	r20, 0xD9	; 217
     25e:	43 00       	.word	0x0043	; ????
     260:	7f 41       	sbci	r23, 0x1F	; 31
     262:	41 41       	sbci	r20, 0x11	; 17
     264:	02 04       	cpc	r0, r2
     266:	08 10       	cpse	r0, r8
     268:	20 00       	.word	0x0020	; ????
     26a:	41 41       	sbci	r20, 0x11	; 17
     26c:	41 7f       	andi	r20, 0xF1	; 241
     26e:	04 02       	muls	r16, r20
     270:	01 02       	muls	r16, r17
     272:	04 40       	sbci	r16, 0x04	; 4
     274:	40 40       	sbci	r20, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	00 03       	mulsu	r16, r16
     27a:	07 08       	sbc	r0, r7
     27c:	00 20       	and	r0, r0
     27e:	54 54       	subi	r21, 0x44	; 68
     280:	78 40       	sbci	r23, 0x08	; 8
     282:	7f 28       	or	r7, r15
     284:	44 44       	sbci	r20, 0x44	; 68
     286:	38 38       	cpi	r19, 0x88	; 136
     288:	44 44       	sbci	r20, 0x44	; 68
     28a:	44 28       	or	r4, r4
     28c:	38 44       	sbci	r19, 0x48	; 72
     28e:	44 28       	or	r4, r4
     290:	7f 38       	cpi	r23, 0x8F	; 143
     292:	54 54       	subi	r21, 0x44	; 68
     294:	54 18       	sub	r5, r4
     296:	00 08       	sbc	r0, r0
     298:	7e 09       	sbc	r23, r14
     29a:	02 18       	sub	r0, r2
     29c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     29e:	9c 78       	andi	r25, 0x8C	; 140
     2a0:	7f 08       	sbc	r7, r15
     2a2:	04 04       	cpc	r0, r4
     2a4:	78 00       	.word	0x0078	; ????
     2a6:	44 7d       	andi	r20, 0xD4	; 212
     2a8:	40 00       	.word	0x0040	; ????
     2aa:	20 40       	sbci	r18, 0x00	; 0
     2ac:	40 3d       	cpi	r20, 0xD0	; 208
     2ae:	00 7f       	andi	r16, 0xF0	; 240
     2b0:	10 28       	or	r1, r0
     2b2:	44 00       	.word	0x0044	; ????
     2b4:	00 41       	sbci	r16, 0x10	; 16
     2b6:	7f 40       	sbci	r23, 0x0F	; 15
     2b8:	00 7c       	andi	r16, 0xC0	; 192
     2ba:	04 78       	andi	r16, 0x84	; 132
     2bc:	04 78       	andi	r16, 0x84	; 132
     2be:	7c 08       	sbc	r7, r12
     2c0:	04 04       	cpc	r0, r4
     2c2:	78 38       	cpi	r23, 0x88	; 136
     2c4:	44 44       	sbci	r20, 0x44	; 68
     2c6:	44 38       	cpi	r20, 0x84	; 132
     2c8:	fc 18       	sub	r15, r12
     2ca:	24 24       	eor	r2, r4
     2cc:	18 18       	sub	r1, r8
     2ce:	24 24       	eor	r2, r4
     2d0:	18 fc       	.word	0xfc18	; ????
     2d2:	7c 08       	sbc	r7, r12
     2d4:	04 04       	cpc	r0, r4
     2d6:	08 48       	sbci	r16, 0x88	; 136
     2d8:	54 54       	subi	r21, 0x44	; 68
     2da:	54 24       	eor	r5, r4
     2dc:	04 04       	cpc	r0, r4
     2de:	3f 44       	sbci	r19, 0x4F	; 79
     2e0:	24 3c       	cpi	r18, 0xC4	; 196
     2e2:	40 40       	sbci	r20, 0x00	; 0
     2e4:	20 7c       	andi	r18, 0xC0	; 192
     2e6:	1c 20       	and	r1, r12
     2e8:	40 20       	and	r4, r0
     2ea:	1c 3c       	cpi	r17, 0xCC	; 204
     2ec:	40 30       	cpi	r20, 0x00	; 0
     2ee:	40 3c       	cpi	r20, 0xC0	; 192
     2f0:	44 28       	or	r4, r4
     2f2:	10 28       	or	r1, r0
     2f4:	44 4c       	sbci	r20, 0xC4	; 196
     2f6:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x76b0>
     2fa:	44 64       	ori	r20, 0x44	; 68
     2fc:	54 4c       	sbci	r21, 0xC4	; 196
     2fe:	44 00       	.word	0x0044	; ????
     300:	08 36       	cpi	r16, 0x68	; 104
     302:	41 00       	.word	0x0041	; ????
     304:	00 00       	nop
     306:	77 00       	.word	0x0077	; ????
     308:	00 00       	nop
     30a:	41 36       	cpi	r20, 0x61	; 97
     30c:	08 00       	.word	0x0008	; ????
     30e:	02 01       	movw	r0, r4
     310:	02 04       	cpc	r0, r2
     312:	02 3c       	cpi	r16, 0xC2	; 194
     314:	26 23       	and	r18, r22
     316:	26 3c       	cpi	r18, 0xC6	; 198
     318:	1e a1       	ldd	r17, Y+38	; 0x26
     31a:	a1 61       	ori	r26, 0x11	; 17
     31c:	12 3a       	cpi	r17, 0xA2	; 162
     31e:	40 40       	sbci	r20, 0x00	; 0
     320:	20 7a       	andi	r18, 0xA0	; 160
     322:	38 54       	subi	r19, 0x48	; 72
     324:	54 55       	subi	r21, 0x54	; 84
     326:	59 21       	and	r21, r9
     328:	55 55       	subi	r21, 0x55	; 85
     32a:	79 41       	sbci	r23, 0x19	; 25
     32c:	22 54       	subi	r18, 0x42	; 66
     32e:	54 78       	andi	r21, 0x84	; 132
     330:	42 21       	and	r20, r2
     332:	55 54       	subi	r21, 0x45	; 69
     334:	78 40       	sbci	r23, 0x08	; 8
     336:	20 54       	subi	r18, 0x40	; 64
     338:	55 79       	andi	r21, 0x95	; 149
     33a:	40 0c       	add	r4, r0
     33c:	1e 52       	subi	r17, 0x2E	; 46
     33e:	72 12       	cpse	r7, r18
     340:	39 55       	subi	r19, 0x59	; 89
     342:	55 55       	subi	r21, 0x55	; 85
     344:	59 39       	cpi	r21, 0x99	; 153
     346:	54 54       	subi	r21, 0x44	; 68
     348:	54 59       	subi	r21, 0x94	; 148
     34a:	39 55       	subi	r19, 0x59	; 89
     34c:	54 54       	subi	r21, 0x44	; 68
     34e:	58 00       	.word	0x0058	; ????
     350:	00 45       	sbci	r16, 0x50	; 80
     352:	7c 41       	sbci	r23, 0x1C	; 28
     354:	00 02       	muls	r16, r16
     356:	45 7d       	andi	r20, 0xD5	; 213
     358:	42 00       	.word	0x0042	; ????
     35a:	01 45       	sbci	r16, 0x51	; 81
     35c:	7c 40       	sbci	r23, 0x0C	; 12
     35e:	7d 12       	cpse	r7, r29
     360:	11 12       	cpse	r1, r17
     362:	7d f0       	brhs	.+30     	; 0x382 <__trampolines_end+0x2ea>
     364:	28 25       	eor	r18, r8
     366:	28 f0       	brcs	.+10     	; 0x372 <__trampolines_end+0x2da>
     368:	7c 54       	subi	r23, 0x4C	; 76
     36a:	55 45       	sbci	r21, 0x55	; 85
     36c:	00 20       	and	r0, r0
     36e:	54 54       	subi	r21, 0x44	; 68
     370:	7c 54       	subi	r23, 0x4C	; 76
     372:	7c 0a       	sbc	r7, r28
     374:	09 7f       	andi	r16, 0xF9	; 249
     376:	49 32       	cpi	r20, 0x29	; 41
     378:	49 49       	sbci	r20, 0x99	; 153
     37a:	49 32       	cpi	r20, 0x29	; 41
     37c:	3a 44       	sbci	r19, 0x4A	; 74
     37e:	44 44       	sbci	r20, 0x44	; 68
     380:	3a 32       	cpi	r19, 0x2A	; 42
     382:	4a 48       	sbci	r20, 0x8A	; 138
     384:	48 30       	cpi	r20, 0x08	; 8
     386:	3a 41       	sbci	r19, 0x1A	; 26
     388:	41 21       	and	r20, r1
     38a:	7a 3a       	cpi	r23, 0xAA	; 170
     38c:	42 40       	sbci	r20, 0x02	; 2
     38e:	20 78       	andi	r18, 0x80	; 128
     390:	00 9d       	mul	r16, r0
     392:	a0 a0       	ldd	r10, Z+32	; 0x20
     394:	7d 3d       	cpi	r23, 0xDD	; 221
     396:	42 42       	sbci	r20, 0x22	; 34
     398:	42 3d       	cpi	r20, 0xD2	; 210
     39a:	3d 40       	sbci	r19, 0x0D	; 13
     39c:	40 40       	sbci	r20, 0x00	; 0
     39e:	3d 3c       	cpi	r19, 0xCD	; 205
     3a0:	24 ff       	sbrs	r18, 4
     3a2:	24 24       	eor	r2, r4
     3a4:	48 7e       	andi	r20, 0xE8	; 232
     3a6:	49 43       	sbci	r20, 0x39	; 57
     3a8:	66 2b       	or	r22, r22
     3aa:	2f fc       	.word	0xfc2f	; ????
     3ac:	2f 2b       	or	r18, r31
     3ae:	ff 09       	sbc	r31, r15
     3b0:	29 f6       	brne	.-118    	; 0x33c <__trampolines_end+0x2a4>
     3b2:	20 c0       	rjmp	.+64     	; 0x3f4 <__trampolines_end+0x35c>
     3b4:	88 7e       	andi	r24, 0xE8	; 232
     3b6:	09 03       	fmul	r16, r17
     3b8:	20 54       	subi	r18, 0x40	; 64
     3ba:	54 79       	andi	r21, 0x94	; 148
     3bc:	41 00       	.word	0x0041	; ????
     3be:	00 44       	sbci	r16, 0x40	; 64
     3c0:	7d 41       	sbci	r23, 0x1D	; 29
     3c2:	30 48       	sbci	r19, 0x80	; 128
     3c4:	48 4a       	sbci	r20, 0xA8	; 168
     3c6:	32 38       	cpi	r19, 0x82	; 130
     3c8:	40 40       	sbci	r20, 0x00	; 0
     3ca:	22 7a       	andi	r18, 0xA2	; 162
     3cc:	00 7a       	andi	r16, 0xA0	; 160
     3ce:	0a 0a       	sbc	r0, r26
     3d0:	72 7d       	andi	r23, 0xD2	; 210
     3d2:	0d 19       	sub	r16, r13
     3d4:	31 7d       	andi	r19, 0xD1	; 209
     3d6:	26 29       	or	r18, r6
     3d8:	29 2f       	mov	r18, r25
     3da:	28 26       	eor	r2, r24
     3dc:	29 29       	or	r18, r9
     3de:	29 26       	eor	r2, r25
     3e0:	30 48       	sbci	r19, 0x80	; 128
     3e2:	4d 40       	sbci	r20, 0x0D	; 13
     3e4:	20 38       	cpi	r18, 0x80	; 128
     3e6:	08 08       	sbc	r0, r8
     3e8:	08 08       	sbc	r0, r8
     3ea:	08 08       	sbc	r0, r8
     3ec:	08 08       	sbc	r0, r8
     3ee:	38 2f       	mov	r19, r24
     3f0:	10 c8       	rjmp	.-4064   	; 0xfffff412 <__eeprom_end+0xff7ef412>
     3f2:	ac ba       	out	0x1c, r10	; 28
     3f4:	2f 10       	cpse	r2, r15
     3f6:	28 34       	cpi	r18, 0x48	; 72
     3f8:	fa 00       	.word	0x00fa	; ????
     3fa:	00 7b       	andi	r16, 0xB0	; 176
     3fc:	00 00       	nop
     3fe:	08 14       	cp	r0, r8
     400:	2a 14       	cp	r2, r10
     402:	22 22       	and	r2, r18
     404:	14 2a       	or	r1, r20
     406:	14 08       	sbc	r1, r4
     408:	aa 00       	.word	0x00aa	; ????
     40a:	55 00       	.word	0x0055	; ????
     40c:	aa aa       	std	Y+50, r10	; 0x32
     40e:	55 aa       	std	Z+53, r5	; 0x35
     410:	55 aa       	std	Z+53, r5	; 0x35
     412:	00 00       	nop
     414:	00 ff       	sbrs	r16, 0
     416:	00 10       	cpse	r0, r0
     418:	10 10       	cpse	r1, r0
     41a:	ff 00       	.word	0x00ff	; ????
     41c:	14 14       	cp	r1, r4
     41e:	14 ff       	sbrs	r17, 4
     420:	00 10       	cpse	r0, r0
     422:	10 ff       	sbrs	r17, 0
     424:	00 ff       	sbrs	r16, 0
     426:	10 10       	cpse	r1, r0
     428:	f0 10       	cpse	r15, r0
     42a:	f0 14       	cp	r15, r0
     42c:	14 14       	cp	r1, r4
     42e:	fc 00       	.word	0x00fc	; ????
     430:	14 14       	cp	r1, r4
     432:	f7 00       	.word	0x00f7	; ????
     434:	ff 00       	.word	0x00ff	; ????
     436:	00 ff       	sbrs	r16, 0
     438:	00 ff       	sbrs	r16, 0
     43a:	14 14       	cp	r1, r4
     43c:	f4 04       	cpc	r15, r4
     43e:	fc 14       	cp	r15, r12
     440:	14 17       	cp	r17, r20
     442:	10 1f       	adc	r17, r16
     444:	10 10       	cpse	r1, r0
     446:	1f 10       	cpse	r1, r15
     448:	1f 14       	cp	r1, r15
     44a:	14 14       	cp	r1, r4
     44c:	1f 00       	.word	0x001f	; ????
     44e:	10 10       	cpse	r1, r0
     450:	10 f0       	brcs	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     452:	00 00       	nop
     454:	00 00       	nop
     456:	1f 10       	cpse	r1, r15
     458:	10 10       	cpse	r1, r0
     45a:	10 1f       	adc	r17, r16
     45c:	10 10       	cpse	r1, r0
     45e:	10 10       	cpse	r1, r0
     460:	f0 10       	cpse	r15, r0
     462:	00 00       	nop
     464:	00 ff       	sbrs	r16, 0
     466:	10 10       	cpse	r1, r0
     468:	10 10       	cpse	r1, r0
     46a:	10 10       	cpse	r1, r0
     46c:	10 10       	cpse	r1, r0
     46e:	10 ff       	sbrs	r17, 0
     470:	10 00       	.word	0x0010	; ????
     472:	00 00       	nop
     474:	ff 14       	cp	r15, r15
     476:	00 00       	nop
     478:	ff 00       	.word	0x00ff	; ????
     47a:	ff 00       	.word	0x00ff	; ????
     47c:	00 1f       	adc	r16, r16
     47e:	10 17       	cp	r17, r16
     480:	00 00       	nop
     482:	fc 04       	cpc	r15, r12
     484:	f4 14       	cp	r15, r4
     486:	14 17       	cp	r17, r20
     488:	10 17       	cp	r17, r16
     48a:	14 14       	cp	r1, r4
     48c:	f4 04       	cpc	r15, r4
     48e:	f4 00       	.word	0x00f4	; ????
     490:	00 ff       	sbrs	r16, 0
     492:	00 f7       	brcc	.-64     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     494:	14 14       	cp	r1, r4
     496:	14 14       	cp	r1, r4
     498:	14 14       	cp	r1, r4
     49a:	14 f7       	brge	.-60     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     49c:	00 f7       	brcc	.-64     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     49e:	14 14       	cp	r1, r4
     4a0:	14 17       	cp	r17, r20
     4a2:	14 10       	cpse	r1, r4
     4a4:	10 1f       	adc	r17, r16
     4a6:	10 1f       	adc	r17, r16
     4a8:	14 14       	cp	r1, r4
     4aa:	14 f4       	brge	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4ac:	14 10       	cpse	r1, r4
     4ae:	10 f0       	brcs	.+4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b0:	10 f0       	brcs	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b2:	00 00       	nop
     4b4:	1f 10       	cpse	r1, r15
     4b6:	1f 00       	.word	0x001f	; ????
     4b8:	00 00       	nop
     4ba:	1f 14       	cp	r1, r15
     4bc:	00 00       	nop
     4be:	00 fc       	sbrc	r0, 0
     4c0:	14 00       	.word	0x0014	; ????
     4c2:	00 f0       	brcs	.+0      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4c4:	10 f0       	brcs	.+4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4c6:	10 10       	cpse	r1, r0
     4c8:	ff 10       	cpse	r15, r15
     4ca:	ff 14       	cp	r15, r15
     4cc:	14 14       	cp	r1, r4
     4ce:	ff 14       	cp	r15, r15
     4d0:	10 10       	cpse	r1, r0
     4d2:	10 1f       	adc	r17, r16
     4d4:	00 00       	nop
     4d6:	00 00       	nop
     4d8:	f0 10       	cpse	r15, r0
     4da:	ff ff       	.word	0xffff	; ????
     4dc:	ff ff       	.word	0xffff	; ????
     4de:	ff f0       	brie	.+62     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     4e0:	f0 f0       	brcs	.+60     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     4e2:	f0 f0       	brcs	.+60     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     4e4:	ff ff       	.word	0xffff	; ????
     4e6:	ff 00       	.word	0x00ff	; ????
     4e8:	00 00       	nop
     4ea:	00 00       	nop
     4ec:	ff ff       	.word	0xffff	; ????
     4ee:	0f 0f       	add	r16, r31
     4f0:	0f 0f       	add	r16, r31
     4f2:	0f 38       	cpi	r16, 0x8F	; 143
     4f4:	44 44       	sbci	r20, 0x44	; 68
     4f6:	38 44       	sbci	r19, 0x48	; 72
     4f8:	fc 4a       	sbci	r31, 0xAC	; 172
     4fa:	4a 4a       	sbci	r20, 0xAA	; 170
     4fc:	34 7e       	andi	r19, 0xE4	; 228
     4fe:	02 02       	muls	r16, r18
     500:	06 06       	cpc	r0, r22
     502:	02 7e       	andi	r16, 0xE2	; 226
     504:	02 7e       	andi	r16, 0xE2	; 226
     506:	02 63       	ori	r16, 0x32	; 50
     508:	55 49       	sbci	r21, 0x95	; 149
     50a:	41 63       	ori	r20, 0x31	; 49
     50c:	38 44       	sbci	r19, 0x48	; 72
     50e:	44 3c       	cpi	r20, 0xC4	; 196
     510:	04 40       	sbci	r16, 0x04	; 4
     512:	7e 20       	and	r7, r14
     514:	1e 20       	and	r1, r14
     516:	06 02       	muls	r16, r22
     518:	7e 02       	muls	r23, r30
     51a:	02 99       	sbic	0x00, 2	; 0
     51c:	a5 e7       	ldi	r26, 0x75	; 117
     51e:	a5 99       	sbic	0x14, 5	; 20
     520:	1c 2a       	or	r1, r28
     522:	49 2a       	or	r4, r25
     524:	1c 4c       	sbci	r17, 0xCC	; 204
     526:	72 01       	movw	r14, r4
     528:	72 4c       	sbci	r23, 0xC2	; 194
     52a:	30 4a       	sbci	r19, 0xA0	; 160
     52c:	4d 4d       	sbci	r20, 0xDD	; 221
     52e:	30 30       	cpi	r19, 0x00	; 0
     530:	48 78       	andi	r20, 0x88	; 136
     532:	48 30       	cpi	r20, 0x08	; 8
     534:	bc 62       	ori	r27, 0x2C	; 44
     536:	5a 46       	sbci	r21, 0x6A	; 106
     538:	3d 3e       	cpi	r19, 0xED	; 237
     53a:	49 49       	sbci	r20, 0x99	; 153
     53c:	49 00       	.word	0x0049	; ????
     53e:	7e 01       	movw	r14, r28
     540:	01 01       	movw	r0, r2
     542:	7e 2a       	or	r7, r30
     544:	2a 2a       	or	r2, r26
     546:	2a 2a       	or	r2, r26
     548:	44 44       	sbci	r20, 0x44	; 68
     54a:	5f 44       	sbci	r21, 0x4F	; 79
     54c:	44 40       	sbci	r20, 0x04	; 4
     54e:	51 4a       	sbci	r21, 0xA1	; 161
     550:	44 40       	sbci	r20, 0x04	; 4
     552:	40 44       	sbci	r20, 0x40	; 64
     554:	4a 51       	subi	r20, 0x1A	; 26
     556:	40 00       	.word	0x0040	; ????
     558:	00 ff       	sbrs	r16, 0
     55a:	01 03       	mulsu	r16, r17
     55c:	e0 80       	ld	r14, Z
     55e:	ff 00       	.word	0x00ff	; ????
     560:	00 08       	sbc	r0, r0
     562:	08 6b       	ori	r16, 0xB8	; 184
     564:	6b 08       	sbc	r6, r11
     566:	36 12       	cpse	r3, r22
     568:	36 24       	eor	r3, r6
     56a:	36 06       	cpc	r3, r22
     56c:	0f 09       	sbc	r16, r15
     56e:	0f 06       	cpc	r0, r31
     570:	00 00       	nop
     572:	18 18       	sub	r1, r8
     574:	00 00       	nop
     576:	00 10       	cpse	r0, r0
     578:	10 00       	.word	0x0010	; ????
     57a:	30 40       	sbci	r19, 0x00	; 0
     57c:	ff 01       	movw	r30, r30
     57e:	01 00       	.word	0x0001	; ????
     580:	1f 01       	movw	r2, r30
     582:	01 1e       	adc	r0, r17
     584:	00 19       	sub	r16, r0
     586:	1d 17       	cp	r17, r29
     588:	12 00       	.word	0x0012	; ????
     58a:	3c 3c       	cpi	r19, 0xCC	; 204
     58c:	3c 3c       	cpi	r19, 0xCC	; 204
     58e:	00 00       	nop
     590:	00 00       	nop
	...

00000594 <__ctors_start>:
     594:	b9 08       	sbc	r11, r9

00000596 <__ctors_end>:
     596:	11 24       	eor	r1, r1
     598:	1f be       	out	0x3f, r1	; 63
     59a:	cf ef       	ldi	r28, 0xFF	; 255
     59c:	d0 e2       	ldi	r29, 0x20	; 32
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	cd bf       	out	0x3d, r28	; 61

000005a2 <__do_copy_data>:
     5a2:	11 e0       	ldi	r17, 0x01	; 1
     5a4:	a0 e0       	ldi	r26, 0x00	; 0
     5a6:	b1 e0       	ldi	r27, 0x01	; 1
     5a8:	e2 e0       	ldi	r30, 0x02	; 2
     5aa:	f0 e2       	ldi	r31, 0x20	; 32
     5ac:	00 e0       	ldi	r16, 0x00	; 0
     5ae:	0b bf       	out	0x3b, r16	; 59
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__do_copy_data+0x14>
     5b2:	07 90       	elpm	r0, Z+
     5b4:	0d 92       	st	X+, r0
     5b6:	a4 3c       	cpi	r26, 0xC4	; 196
     5b8:	b1 07       	cpc	r27, r17
     5ba:	d9 f7       	brne	.-10     	; 0x5b2 <__do_copy_data+0x10>

000005bc <__do_clear_bss>:
     5bc:	25 e0       	ldi	r18, 0x05	; 5
     5be:	a4 ec       	ldi	r26, 0xC4	; 196
     5c0:	b1 e0       	ldi	r27, 0x01	; 1
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <.do_clear_bss_start>

000005c4 <.do_clear_bss_loop>:
     5c4:	1d 92       	st	X+, r1

000005c6 <.do_clear_bss_start>:
     5c6:	a0 3e       	cpi	r26, 0xE0	; 224
     5c8:	b2 07       	cpc	r27, r18
     5ca:	e1 f7       	brne	.-8      	; 0x5c4 <.do_clear_bss_loop>

000005cc <__do_global_ctors>:
     5cc:	12 e0       	ldi	r17, 0x02	; 2
     5ce:	cb ec       	ldi	r28, 0xCB	; 203
     5d0:	d2 e0       	ldi	r29, 0x02	; 2
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <__do_global_ctors+0x10>
     5d4:	21 97       	sbiw	r28, 0x01	; 1
     5d6:	fe 01       	movw	r30, r28
     5d8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__tablejump2__>
     5dc:	ca 3c       	cpi	r28, 0xCA	; 202
     5de:	d1 07       	cpc	r29, r17
     5e0:	c9 f7       	brne	.-14     	; 0x5d4 <__do_global_ctors+0x8>
     5e2:	a4 d4       	rcall	.+2376   	; 0xf2c <main>
     5e4:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <_exit>

000005e8 <__bad_interrupt>:
     5e8:	4a c2       	rjmp	.+1172   	; 0xa7e <__vector_default>

000005ea <_Z7initADCv>:

void stopADC() {
	//Disable ADC interrupt
	ADCSRA &= ~_BV(ADIE);
	//Cancel any pending ADC conversions
	ADCSRA &= ~_BV(ADSC);
     5ea:	10 ba       	out	0x10, r1	; 16
     5ec:	ea e7       	ldi	r30, 0x7A	; 122
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	80 68       	ori	r24, 0x80	; 128
     5f4:	80 83       	st	Z, r24
     5f6:	80 81       	ld	r24, Z
     5f8:	87 60       	ori	r24, 0x07	; 7
     5fa:	80 83       	st	Z, r24
     5fc:	ec e7       	ldi	r30, 0x7C	; 124
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	81 64       	ori	r24, 0x41	; 65
     604:	80 83       	st	Z, r24
     606:	08 95       	ret

00000608 <_Z17findLowestReadingPKc>:
}

void findLowestReading(const char * objectType){
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	ec 01       	movw	r28, r24
	while(reflQueueCount < 8){
     60e:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <reflQueueCount>
     612:	88 30       	cpi	r24, 0x08	; 8
     614:	c0 f5       	brcc	.+112    	; 0x686 <_Z17findLowestReadingPKc+0x7e>
		if(lowestRefl < calibReading){
     616:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     61a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     61e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     622:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     626:	28 17       	cp	r18, r24
     628:	39 07       	cpc	r19, r25
     62a:	40 f4       	brcc	.+16     	; 0x63c <_Z17findLowestReadingPKc+0x34>
			calibReading = lowestRefl;
     62c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lowestRefl>
     630:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lowestRefl+0x1>
     634:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     638:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		myDisplay.clear();
     63c:	86 ed       	ldi	r24, 0xD6	; 214
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	e9 d2       	rcall	.+1490   	; 0xc14 <_ZN11Framebuffer5clearEv>
		myDisplay.drawString(0,0,"Calibrate");
     642:	2b e4       	ldi	r18, 0x4B	; 75
     644:	31 e0       	ldi	r19, 0x01	; 1
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	86 ed       	ldi	r24, 0xD6	; 214
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	89 d3       	rcall	.+1810   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
		myDisplay.drawString(0,16,objectType);
     654:	9e 01       	movw	r18, r28
     656:	40 e1       	ldi	r20, 0x10	; 16
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	86 ed       	ldi	r24, 0xD6	; 214
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	81 d3       	rcall	.+1794   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
		myDisplay.drawNumber(0,32,reflQueueCount);
     664:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <reflQueueCount>
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	40 e2       	ldi	r20, 0x20	; 32
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	86 ed       	ldi	r24, 0xD6	; 214
     674:	91 e0       	ldi	r25, 0x01	; 1
		myDisplay.show();
     676:	ad d3       	rcall	.+1882   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
     678:	86 ed       	ldi	r24, 0xD6	; 214
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	dc d2       	rcall	.+1464   	; 0xc36 <_ZN11Framebuffer4showEv>
	//Cancel any pending ADC conversions
	ADCSRA &= ~_BV(ADSC);
}

void findLowestReading(const char * objectType){
	while(reflQueueCount < 8){
     67e:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <reflQueueCount>
     682:	88 30       	cpi	r24, 0x08	; 8
     684:	40 f2       	brcs	.-112    	; 0x616 <_Z17findLowestReadingPKc+0xe>
		myDisplay.drawString(0,0,"Calibrate");
		myDisplay.drawString(0,16,objectType);
		myDisplay.drawNumber(0,32,reflQueueCount);
		myDisplay.show();
	}
	reflQueueCount = 0;
     686:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <reflQueueCount>
}
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <_Z12calibrateADCv>:

void calibrateADC(){
	
	myDisplay.clear();
     690:	86 ed       	ldi	r24, 0xD6	; 214
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	bf d2       	rcall	.+1406   	; 0xc14 <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0,"Calibrate");
     696:	2b e4       	ldi	r18, 0x4B	; 75
     698:	31 e0       	ldi	r19, 0x01	; 1
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	86 ed       	ldi	r24, 0xD6	; 214
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	5f d3       	rcall	.+1726   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,16,"Black");
     6a8:	2d e0       	ldi	r18, 0x0D	; 13
     6aa:	31 e0       	ldi	r19, 0x01	; 1
     6ac:	40 e1       	ldi	r20, 0x10	; 16
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	86 ed       	ldi	r24, 0xD6	; 214
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	56 d3       	rcall	.+1708   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(0,32,0);
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e2       	ldi	r20, 0x20	; 32
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	86 ed       	ldi	r24, 0xD6	; 214
	myDisplay.show();
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	83 d3       	rcall	.+1798   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
	
	sei();
     6cc:	86 ed       	ldi	r24, 0xD6	; 214
	motorForward();
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	b2 d2       	rcall	.+1380   	; 0xc36 <_ZN11Framebuffer4showEv>
	//Black -> White -> Steel -> Aluminum
	findLowestReading("Black");
     6d2:	78 94       	sei
     6d4:	41 d7       	rcall	.+3714   	; 0x1558 <_Z12motorForwardv>
     6d6:	8d e0       	ldi	r24, 0x0D	; 13
     6d8:	91 e0       	ldi	r25, 0x01	; 1
	blackMinRef = calibReading - REFL_VALUE_BUFFER;
     6da:	96 df       	rcall	.-212    	; 0x608 <_Z17findLowestReadingPKc>
     6dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6e4:	05 97       	sbiw	r24, 0x05	; 5
     6e6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <blackMinRef+0x1>
	findLowestReading("White");
     6ea:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <blackMinRef>
     6ee:	83 e1       	ldi	r24, 0x13	; 19
     6f0:	91 e0       	ldi	r25, 0x01	; 1
	whiteMinRef = calibReading - REFL_VALUE_BUFFER;
     6f2:	8a df       	rcall	.-236    	; 0x608 <_Z17findLowestReadingPKc>
     6f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6fc:	05 97       	sbiw	r24, 0x05	; 5
     6fe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <whiteMinRef+0x1>
	findLowestReading("Steel");
     702:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <whiteMinRef>
     706:	89 e1       	ldi	r24, 0x19	; 25
     708:	91 e0       	ldi	r25, 0x01	; 1
	steelMinRef = calibReading - REFL_VALUE_BUFFER;
     70a:	7e df       	rcall	.-260    	; 0x608 <_Z17findLowestReadingPKc>
     70c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     710:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     714:	05 97       	sbiw	r24, 0x05	; 5
     716:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <steelMinRef+0x1>
	findLowestReading("Aluminum");
     71a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <steelMinRef>
     71e:	8f e1       	ldi	r24, 0x1F	; 31
	aluminumMinRef = calibReading - REFL_VALUE_BUFFER;
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	72 df       	rcall	.-284    	; 0x608 <_Z17findLowestReadingPKc>
     724:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     728:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     72c:	05 97       	sbiw	r24, 0x05	; 5
     72e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <aluminumMinRef+0x1>
		
	motorBrake();
	myDisplay.clear();
     732:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <aluminumMinRef>
     736:	15 d7       	rcall	.+3626   	; 0x1562 <_Z10motorBrakev>
	myDisplay.drawString(0,0,"B:");
     738:	86 ed       	ldi	r24, 0xD6	; 214
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	6b d2       	rcall	.+1238   	; 0xc14 <_ZN11Framebuffer5clearEv>
     73e:	28 e2       	ldi	r18, 0x28	; 40
     740:	31 e0       	ldi	r19, 0x01	; 1
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawNumber(24,0,blackMinRef);
     74a:	86 ed       	ldi	r24, 0xD6	; 214
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	0b d3       	rcall	.+1558   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
     750:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <blackMinRef>
     754:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <blackMinRef+0x1>
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	68 e1       	ldi	r22, 0x18	; 24
     75e:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawString(0,16,"W:");
     760:	86 ed       	ldi	r24, 0xD6	; 214
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	36 d3       	rcall	.+1644   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
     766:	2b e2       	ldi	r18, 0x2B	; 43
     768:	31 e0       	ldi	r19, 0x01	; 1
     76a:	40 e1       	ldi	r20, 0x10	; 16
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawNumber(24,16,whiteMinRef);
     772:	86 ed       	ldi	r24, 0xD6	; 214
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	f7 d2       	rcall	.+1518   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
     778:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <whiteMinRef>
     77c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <whiteMinRef+0x1>
     780:	40 e1       	ldi	r20, 0x10	; 16
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	68 e1       	ldi	r22, 0x18	; 24
     786:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawString(0,32,"S:");
     788:	86 ed       	ldi	r24, 0xD6	; 214
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	22 d3       	rcall	.+1604   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
     78e:	2e e2       	ldi	r18, 0x2E	; 46
     790:	31 e0       	ldi	r19, 0x01	; 1
     792:	40 e2       	ldi	r20, 0x20	; 32
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawNumber(24,32,steelMinRef);
     79a:	86 ed       	ldi	r24, 0xD6	; 214
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	e3 d2       	rcall	.+1478   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
     7a0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <steelMinRef>
     7a4:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <steelMinRef+0x1>
     7a8:	40 e2       	ldi	r20, 0x20	; 32
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	68 e1       	ldi	r22, 0x18	; 24
     7ae:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawString(0,48,"A:");
     7b0:	86 ed       	ldi	r24, 0xD6	; 214
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e d3       	rcall	.+1564   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
     7b6:	21 e3       	ldi	r18, 0x31	; 49
     7b8:	31 e0       	ldi	r19, 0x01	; 1
     7ba:	40 e3       	ldi	r20, 0x30	; 48
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	60 e0       	ldi	r22, 0x00	; 0
	myDisplay.drawNumber(24,48,aluminumMinRef);
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	86 ed       	ldi	r24, 0xD6	; 214
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	cf d2       	rcall	.+1438   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
     7c8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <aluminumMinRef>
     7cc:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <aluminumMinRef+0x1>
     7d0:	40 e3       	ldi	r20, 0x30	; 48
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	68 e1       	ldi	r22, 0x18	; 24
     7d6:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.show();
     7d8:	86 ed       	ldi	r24, 0xD6	; 214
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	fa d2       	rcall	.+1524   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
     7de:	86 ed       	ldi	r24, 0xD6	; 214
	
	cli();
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	29 d2       	rcall	.+1106   	; 0xc36 <_ZN11Framebuffer4showEv>
     7e4:	f8 94       	cli
     7e6:	08 95       	ret

000007e8 <__vector_29>:
	Description:
	For each series of readings this will find what
	the lowest reflection reading is and save it in
	lowestRefl. Then it will start another ADC reading.
*/
ISR(ADC_vect) {
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	0f 92       	push	r0
     7f0:	11 24       	eor	r1, r1
     7f2:	0b b6       	in	r0, 0x3b	; 59
     7f4:	0f 92       	push	r0
     7f6:	2f 93       	push	r18
     7f8:	3f 93       	push	r19
     7fa:	8f 93       	push	r24
     7fc:	9f 93       	push	r25
     7fe:	ef 93       	push	r30
     800:	ff 93       	push	r31
	PORTC |= 2;
     802:	41 9a       	sbi	0x08, 1	; 8

	if(ADC < lowestRefl){
     804:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     808:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     80c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lowestRefl>
     810:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lowestRefl+0x1>
     814:	28 17       	cp	r18, r24
     816:	39 07       	cpc	r19, r25
     818:	40 f4       	brcc	.+16     	; 0x82a <__vector_29+0x42>
		lowestRefl = ADC;
     81a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     81e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     822:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <lowestRefl+0x1>
     826:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lowestRefl>
	}
	//Start another ADC conversion
	ADCSRA |= _BV(ADSC);
     82a:	ea e7       	ldi	r30, 0x7A	; 122
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	80 81       	ld	r24, Z
     830:	80 64       	ori	r24, 0x40	; 64
     832:	80 83       	st	Z, r24
     834:	ff 91       	pop	r31
     836:	ef 91       	pop	r30
     838:	9f 91       	pop	r25
     83a:	8f 91       	pop	r24
     83c:	3f 91       	pop	r19
     83e:	2f 91       	pop	r18
     840:	0f 90       	pop	r0
     842:	0b be       	out	0x3b, r0	; 59
     844:	0f 90       	pop	r0
     846:	0f be       	out	0x3f, r0	; 63
     848:	0f 90       	pop	r0
     84a:	1f 90       	pop	r1
     84c:	18 95       	reti

0000084e <_Z10initExtIntv>:
volatile char blockReady = 0;
volatile char stepperRdy = 1; //*** turn this into extern when adding stepper

void initExtInt(void){
	//External interrupts on pin 2,3
	DDRD &= 0b11110011; 
     84e:	8a b1       	in	r24, 0x0a	; 10
     850:	83 7f       	andi	r24, 0xF3	; 243
     852:	8a b9       	out	0x0a, r24	; 10
	
	//Turn off interrupt while configuring
	EIMSK = 0;
     854:	1d ba       	out	0x1d, r1	; 29
	
	//Any edge interrupt on PD2 (EXT INT2)
	//Falling edge interrupt on PD3 (EXT INT3)
	EICRA |= 0b10010000;
     856:	e9 e6       	ldi	r30, 0x69	; 105
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	80 69       	ori	r24, 0x90	; 144
     85e:	80 83       	st	Z, r24
	
	//Turn on External Interrupt 2 and 3
	EIMSK = 0b1100;
     860:	8c e0       	ldi	r24, 0x0C	; 12
     862:	8d bb       	out	0x1d, r24	; 29
     864:	08 95       	ret

00000866 <__vector_3>:
	reading was. Add item to front of FIFO queue.
	
	TODO: Add a low range for each classification to make it
	more rubust.
*/
ISR(INT2_vect){
     866:	1f 92       	push	r1
     868:	0f 92       	push	r0
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	0f 92       	push	r0
     86e:	11 24       	eor	r1, r1
     870:	0b b6       	in	r0, 0x3b	; 59
     872:	0f 92       	push	r0
     874:	2f 93       	push	r18
     876:	3f 93       	push	r19
     878:	4f 93       	push	r20
     87a:	5f 93       	push	r21
     87c:	6f 93       	push	r22
     87e:	7f 93       	push	r23
     880:	8f 93       	push	r24
     882:	9f 93       	push	r25
     884:	af 93       	push	r26
     886:	bf 93       	push	r27
     888:	ef 93       	push	r30
     88a:	ff 93       	push	r31
	//Debounce
	mTimer(5);
     88c:	85 e0       	ldi	r24, 0x05	; 5
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <_Z6mTimeri>
	//////////
	
	//if(REF_SENSOR_PORT & REF_SENSOR_PIN){
	if(PIND & 0x4){
     894:	4a 9b       	sbis	0x09, 2	; 9
     896:	10 c0       	rjmp	.+32     	; 0x8b8 <__vector_3+0x52>
		PORTC |= 0x1;
     898:	40 9a       	sbi	0x08, 0	; 8
		//////////START ADC
		lowestRefl = 1023;
     89a:	8f ef       	ldi	r24, 0xFF	; 255
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <lowestRefl+0x1>
     8a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lowestRefl>
		//Enable ADC interrupt
		ADCSRA |= _BV(ADIE);
     8a6:	ea e7       	ldi	r30, 0x7A	; 122
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	88 60       	ori	r24, 0x08	; 8
     8ae:	80 83       	st	Z, r24
		//Start ADC conversion
		ADCSRA |= _BV(ADSC);
     8b0:	80 81       	ld	r24, Z
     8b2:	80 64       	ori	r24, 0x40	; 64
     8b4:	80 83       	st	Z, r24
     8b6:	6d c0       	rjmp	.+218    	; 0x992 <__vector_3+0x12c>
		
	}
	else if((PIND & 0x4) == 0){
     8b8:	4a 99       	sbic	0x09, 2	; 9
     8ba:	6b c0       	rjmp	.+214    	; 0x992 <__vector_3+0x12c>
		PORTC |= 4;
     8bc:	42 9a       	sbi	0x08, 2	; 8
		char unsigned itemValue = 0;
		//////////STOP ADC
		//Disable ADC interrupt
		ADCSRA &= ~_BV(ADIE);
     8be:	ea e7       	ldi	r30, 0x7A	; 122
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	87 7f       	andi	r24, 0xF7	; 247
     8c6:	80 83       	st	Z, r24
		//Cancel any pending ADC conversions
		ADCSRA &= ~_BV(ADSC);
     8c8:	80 81       	ld	r24, Z
     8ca:	8f 7b       	andi	r24, 0xBF	; 191
     8cc:	80 83       	st	Z, r24

		//////////CLASSIFY BLOCK
		if(lowestRefl > blackMinRef){
     8ce:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     8d2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     8d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <blackMinRef>
     8da:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <blackMinRef+0x1>
     8de:	82 17       	cp	r24, r18
     8e0:	93 07       	cpc	r25, r19
     8e2:	18 f1       	brcs	.+70     	; 0x92a <__vector_3+0xc4>
			itemValue = BLACK;
		}
		else if(lowestRefl > whiteMinRef){
     8e4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     8e8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     8ec:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <whiteMinRef>
     8f0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <whiteMinRef+0x1>
     8f4:	82 17       	cp	r24, r18
     8f6:	93 07       	cpc	r25, r19
     8f8:	d0 f0       	brcs	.+52     	; 0x92e <__vector_3+0xc8>
			itemValue = WHITE;
		}
		else if (lowestRefl > steelMinRef){
     8fa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     8fe:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     902:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <steelMinRef>
     906:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <steelMinRef+0x1>
     90a:	82 17       	cp	r24, r18
     90c:	93 07       	cpc	r25, r19
     90e:	88 f0       	brcs	.+34     	; 0x932 <__vector_3+0xcc>
			itemValue = STEEL;
		}
		else if(lowestRefl > aluminumMinRef){
     910:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     914:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     918:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <aluminumMinRef>
     91c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <aluminumMinRef+0x1>
     920:	82 17       	cp	r24, r18
     922:	93 07       	cpc	r25, r19
     924:	40 f0       	brcs	.+16     	; 0x936 <__vector_3+0xd0>
			itemValue = ALUMINUM;
		}
		else{
			itemValue = UNKNOWN;
     926:	94 e0       	ldi	r25, 0x04	; 4
     928:	07 c0       	rjmp	.+14     	; 0x938 <__vector_3+0xd2>
		//Cancel any pending ADC conversions
		ADCSRA &= ~_BV(ADSC);

		//////////CLASSIFY BLOCK
		if(lowestRefl > blackMinRef){
			itemValue = BLACK;
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	05 c0       	rjmp	.+10     	; 0x938 <__vector_3+0xd2>
		}
		else if(lowestRefl > whiteMinRef){
			itemValue = WHITE;
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	03 c0       	rjmp	.+6      	; 0x938 <__vector_3+0xd2>
		}
		else if (lowestRefl > steelMinRef){
			itemValue = STEEL;
     932:	92 e0       	ldi	r25, 0x02	; 2
     934:	01 c0       	rjmp	.+2      	; 0x938 <__vector_3+0xd2>
		}
		else if(lowestRefl > aluminumMinRef){
			itemValue = ALUMINUM;
     936:	93 e0       	ldi	r25, 0x03	; 3
			itemValue = UNKNOWN;
		}

		//////////ADD BLOCK TO QUEUE
		//Check to make sure we aren't passed max
		if(reflQueueCount > 7){ 
     938:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <reflQueueCount>
     93c:	88 30       	cpi	r24, 0x08	; 8
     93e:	18 f0       	brcs	.+6      	; 0x946 <__vector_3+0xe0>
			PORTC = 0xf0;
     940:	80 ef       	ldi	r24, 0xF0	; 240
     942:	88 b9       	out	0x08, r24	; 8
     944:	26 c0       	rjmp	.+76     	; 0x992 <__vector_3+0x12c>
		}
		else if(reflQueueCount == 0){
     946:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <reflQueueCount>
     94a:	81 11       	cpse	r24, r1
     94c:	11 c0       	rjmp	.+34     	; 0x970 <__vector_3+0x10a>
			reflQueueCount++;
     94e:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <reflQueueCount>
     952:	8f 5f       	subi	r24, 0xFF	; 255
     954:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <reflQueueCount>
			reflQueue[backOfQueue] = itemValue;
     958:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <backOfQueue>
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	e2 53       	subi	r30, 0x32	; 50
     960:	fe 4f       	sbci	r31, 0xFE	; 254
     962:	90 83       	st	Z, r25
			reflQueueChange = 1;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <reflQueueChange>
			firstEnqueue = 1; 
     96a:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <firstEnqueue>
     96e:	11 c0       	rjmp	.+34     	; 0x992 <__vector_3+0x12c>
		}
		else{
			reflQueueCount++;
     970:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <reflQueueCount>
     974:	8f 5f       	subi	r24, 0xFF	; 255
     976:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <reflQueueCount>
			backOfQueue = (backOfQueue + 1) & 7;
     97a:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <backOfQueue>
     97e:	8f 5f       	subi	r24, 0xFF	; 255
     980:	87 70       	andi	r24, 0x07	; 7
     982:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <backOfQueue>
			reflQueue[backOfQueue] = itemValue;
     986:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <backOfQueue>
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	e2 53       	subi	r30, 0x32	; 50
     98e:	fe 4f       	sbci	r31, 0xFE	; 254
     990:	90 83       	st	Z, r25
 		}	
		//Error checking for < 0? ***
		
	}
	//Clear interrupt flag
	EIFR = 0x4; 
     992:	84 e0       	ldi	r24, 0x04	; 4
     994:	8c bb       	out	0x1c, r24	; 28
	
}
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	bf 91       	pop	r27
     99c:	af 91       	pop	r26
     99e:	9f 91       	pop	r25
     9a0:	8f 91       	pop	r24
     9a2:	7f 91       	pop	r23
     9a4:	6f 91       	pop	r22
     9a6:	5f 91       	pop	r21
     9a8:	4f 91       	pop	r20
     9aa:	3f 91       	pop	r19
     9ac:	2f 91       	pop	r18
     9ae:	0f 90       	pop	r0
     9b0:	0b be       	out	0x3b, r0	; 59
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <__vector_4>:


ISR(INT3_vect){
     9bc:	1f 92       	push	r1
     9be:	0f 92       	push	r0
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	0f 92       	push	r0
     9c4:	11 24       	eor	r1, r1
     9c6:	0b b6       	in	r0, 0x3b	; 59
     9c8:	0f 92       	push	r0
     9ca:	2f 93       	push	r18
     9cc:	3f 93       	push	r19
     9ce:	4f 93       	push	r20
     9d0:	5f 93       	push	r21
     9d2:	6f 93       	push	r22
     9d4:	7f 93       	push	r23
     9d6:	8f 93       	push	r24
     9d8:	9f 93       	push	r25
     9da:	af 93       	push	r26
     9dc:	bf 93       	push	r27
     9de:	ef 93       	push	r30
     9e0:	ff 93       	push	r31
	char nextItem = 0;
	//////////Debounce *** possibly can remove
	mTimer(5);
     9e2:	85 e0       	ldi	r24, 0x05	; 5
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <_Z6mTimeri>
	//***
	PORTC++;
     9ea:	88 b1       	in	r24, 0x08	; 8
     9ec:	8f 5f       	subi	r24, 0xFF	; 255
     9ee:	88 b9       	out	0x08, r24	; 8
	if((PIND & 0x8) == 0){
     9f0:	4b 99       	sbic	0x09, 3	; 9
     9f2:	30 c0       	rjmp	.+96     	; 0xa54 <__vector_4+0x98>
		
		if(stepperReady){
     9f4:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <stepperReady>
     9f8:	88 23       	and	r24, r24
     9fa:	31 f1       	breq	.+76     	; 0xa48 <__vector_4+0x8c>
			//If front == back -> Last item has been sorted *** handle case where last item arrives
// 			if(frontOfQueue == backOfQueue && ){
// 				reflQueueCount = 0;
// 			}
			//else{
				if(reflQueueCount < 2){
     9fc:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <reflQueueCount>
     a00:	82 30       	cpi	r24, 0x02	; 2
     a02:	18 f4       	brcc	.+6      	; 0xa0a <__vector_4+0x4e>
					reflQueueCount = 0;
     a04:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <reflQueueCount>
     a08:	25 c0       	rjmp	.+74     	; 0xa54 <__vector_4+0x98>
				}
				else{
					nextItem = (frontOfQueue+1) & 7;
     a0a:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <frontOfQueue>
     a0e:	8f 5f       	subi	r24, 0xFF	; 255
     a10:	87 70       	andi	r24, 0x07	; 7
					if(reflQueue[frontOfQueue] != reflQueue[nextItem]){
     a12:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <frontOfQueue>
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	e2 53       	subi	r30, 0x32	; 50
     a1a:	fe 4f       	sbci	r31, 0xFE	; 254
     a1c:	20 81       	ld	r18, Z
     a1e:	e8 2f       	mov	r30, r24
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	e2 53       	subi	r30, 0x32	; 50
     a24:	fe 4f       	sbci	r31, 0xFE	; 254
     a26:	90 81       	ld	r25, Z
     a28:	29 17       	cp	r18, r25
     a2a:	19 f0       	breq	.+6      	; 0xa32 <__vector_4+0x76>
						delayStepper = 1;
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <delayStepper>
					}
					frontOfQueue = nextItem; //& 7 implements a rotating array pointer
     a32:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <frontOfQueue>
					reflQueueCount--;
     a36:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <reflQueueCount>
     a3a:	81 50       	subi	r24, 0x01	; 1
     a3c:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <reflQueueCount>
					reflQueueChange = 1;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <reflQueueChange>
     a46:	06 c0       	rjmp	.+12     	; 0xa54 <__vector_4+0x98>
				}
			//}
		}
		else{
			//Motor brake
			MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_BRAKE;
     a48:	82 b1       	in	r24, 0x02	; 2
     a4a:	8f 73       	andi	r24, 0x3F	; 63
     a4c:	82 b9       	out	0x02, r24	; 2
			blockReady = 1;
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__data_end>
		}
	}
	//Clear interrupt flag (else ISR runs twice)
	EIFR = 0x8; 
     a54:	88 e0       	ldi	r24, 0x08	; 8
     a56:	8c bb       	out	0x1c, r24	; 28
}
     a58:	ff 91       	pop	r31
     a5a:	ef 91       	pop	r30
     a5c:	bf 91       	pop	r27
     a5e:	af 91       	pop	r26
     a60:	9f 91       	pop	r25
     a62:	8f 91       	pop	r24
     a64:	7f 91       	pop	r23
     a66:	6f 91       	pop	r22
     a68:	5f 91       	pop	r21
     a6a:	4f 91       	pop	r20
     a6c:	3f 91       	pop	r19
     a6e:	2f 91       	pop	r18
     a70:	0f 90       	pop	r0
     a72:	0b be       	out	0x3b, r0	; 59
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	0f 90       	pop	r0
     a7a:	1f 90       	pop	r1
     a7c:	18 95       	reti

00000a7e <__vector_default>:

ISR(BADISR_vect){
     a7e:	1f 92       	push	r1
     a80:	0f 92       	push	r0
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	0f 92       	push	r0
     a86:	11 24       	eor	r1, r1
     a88:	8f 93       	push	r24
	PORTC = 0xaa;
     a8a:	8a ea       	ldi	r24, 0xAA	; 170
     a8c:	88 b9       	out	0x08, r24	; 8
     a8e:	8f 91       	pop	r24
     a90:	0f 90       	pop	r0
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	0f 90       	pop	r0
     a96:	1f 90       	pop	r1
     a98:	18 95       	reti

00000a9a <_ZN11Framebuffer9drawPixelEhh>:
        this->buffer[buffer_location] = 0x00;
    }
}

void Framebuffer::invert(uint8_t status) {
    this->oled.invert(status);
     a9a:	66 23       	and	r22, r22
     a9c:	d4 f0       	brlt	.+52     	; 0xad2 <_ZN11Framebuffer9drawPixelEhh+0x38>
     a9e:	40 34       	cpi	r20, 0x40	; 64
     aa0:	c0 f4       	brcc	.+48     	; 0xad2 <_ZN11Framebuffer9drawPixelEhh+0x38>
     aa2:	24 2f       	mov	r18, r20
     aa4:	26 95       	lsr	r18
     aa6:	26 95       	lsr	r18
     aa8:	26 95       	lsr	r18
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	30 e8       	ldi	r19, 0x80	; 128
     aae:	23 9f       	mul	r18, r19
     ab0:	60 0d       	add	r22, r0
     ab2:	71 1d       	adc	r23, r1
     ab4:	11 24       	eor	r1, r1
     ab6:	fc 01       	movw	r30, r24
     ab8:	e6 0f       	add	r30, r22
     aba:	f7 1f       	adc	r31, r23
     abc:	47 70       	andi	r20, 0x07	; 7
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <_ZN11Framebuffer9drawPixelEhh+0x2e>
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	4a 95       	dec	r20
     aca:	e2 f7       	brpl	.-8      	; 0xac4 <_ZN11Framebuffer9drawPixelEhh+0x2a>
     acc:	90 81       	ld	r25, Z
     ace:	89 2b       	or	r24, r25
     ad0:	80 83       	st	Z, r24
     ad2:	08 95       	ret

00000ad4 <_ZN11Framebuffer9drawVLineEhhh>:
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	22 23       	and	r18, r18
     ae0:	61 f0       	breq	.+24     	; 0xafa <_ZN11Framebuffer9drawVLineEhhh+0x26>
     ae2:	c4 2f       	mov	r28, r20
     ae4:	f6 2e       	mov	r15, r22
     ae6:	8c 01       	movw	r16, r24
     ae8:	d2 2f       	mov	r29, r18
     aea:	d4 0f       	add	r29, r20
     aec:	4c 2f       	mov	r20, r28
     aee:	6f 2d       	mov	r22, r15
     af0:	c8 01       	movw	r24, r16
     af2:	d3 df       	rcall	.-90     	; 0xa9a <_ZN11Framebuffer9drawPixelEhh>
     af4:	cf 5f       	subi	r28, 0xFF	; 255
     af6:	cd 13       	cpse	r28, r29
     af8:	f9 cf       	rjmp	.-14     	; 0xaec <_ZN11Framebuffer9drawVLineEhhh+0x18>
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	08 95       	ret

00000b06 <_ZN11Framebuffer9drawHLineEhhh>:
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	22 23       	and	r18, r18
     b12:	61 f0       	breq	.+24     	; 0xb2c <_ZN11Framebuffer9drawHLineEhhh+0x26>
     b14:	f4 2e       	mov	r15, r20
     b16:	c6 2f       	mov	r28, r22
     b18:	8c 01       	movw	r16, r24
     b1a:	d2 2f       	mov	r29, r18
     b1c:	d6 0f       	add	r29, r22
     b1e:	4f 2d       	mov	r20, r15
     b20:	6c 2f       	mov	r22, r28
     b22:	c8 01       	movw	r24, r16
     b24:	ba df       	rcall	.-140    	; 0xa9a <_ZN11Framebuffer9drawPixelEhh>
     b26:	cf 5f       	subi	r28, 0xFF	; 255
     b28:	cd 13       	cpse	r28, r29
     b2a:	f9 cf       	rjmp	.-14     	; 0xb1e <_ZN11Framebuffer9drawHLineEhhh+0x18>
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	08 95       	ret

00000b38 <_ZN11Framebuffer13drawRectangleEhhhh>:
     b38:	cf 92       	push	r12
     b3a:	df 92       	push	r13
     b3c:	ef 92       	push	r14
     b3e:	ff 92       	push	r15
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	ec 01       	movw	r28, r24
     b4a:	f6 2e       	mov	r15, r22
     b4c:	14 2f       	mov	r17, r20
     b4e:	d2 2e       	mov	r13, r18
     b50:	e2 2e       	mov	r14, r18
     b52:	e6 1a       	sub	r14, r22
     b54:	e3 94       	inc	r14
     b56:	c0 2e       	mov	r12, r16
     b58:	c4 1a       	sub	r12, r20
     b5a:	2e 2d       	mov	r18, r14
     b5c:	d4 df       	rcall	.-88     	; 0xb06 <_ZN11Framebuffer9drawHLineEhhh>
     b5e:	2e 2d       	mov	r18, r14
     b60:	40 2f       	mov	r20, r16
     b62:	6f 2d       	mov	r22, r15
     b64:	ce 01       	movw	r24, r28
     b66:	cf df       	rcall	.-98     	; 0xb06 <_ZN11Framebuffer9drawHLineEhhh>
     b68:	2c 2d       	mov	r18, r12
     b6a:	41 2f       	mov	r20, r17
     b6c:	6f 2d       	mov	r22, r15
     b6e:	ce 01       	movw	r24, r28
     b70:	b1 df       	rcall	.-158    	; 0xad4 <_ZN11Framebuffer9drawVLineEhhh>
     b72:	2c 2d       	mov	r18, r12
     b74:	41 2f       	mov	r20, r17
     b76:	6d 2d       	mov	r22, r13
     b78:	ce 01       	movw	r24, r28
     b7a:	ac df       	rcall	.-168    	; 0xad4 <_ZN11Framebuffer9drawVLineEhhh>
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	cf 90       	pop	r12
     b8c:	08 95       	ret

00000b8e <_ZN11Framebuffer13drawRectangleEhhhhh>:
     b8e:	6f 92       	push	r6
     b90:	7f 92       	push	r7
     b92:	8f 92       	push	r8
     b94:	9f 92       	push	r9
     b96:	af 92       	push	r10
     b98:	bf 92       	push	r11
     b9a:	cf 92       	push	r12
     b9c:	df 92       	push	r13
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	6c 01       	movw	r12, r24
     bac:	64 2e       	mov	r6, r20
     bae:	e1 10       	cpse	r14, r1
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <_ZN11Framebuffer13drawRectangleEhhhhh+0x28>
     bb2:	c2 df       	rcall	.-124    	; 0xb38 <_ZN11Framebuffer13drawRectangleEhhhh>
     bb4:	20 c0       	rjmp	.+64     	; 0xbf6 <_ZN11Framebuffer13drawRectangleEhhhhh+0x68>
     bb6:	04 1b       	sub	r16, r20
     bb8:	2f 5f       	subi	r18, 0xFF	; 255
     bba:	26 1b       	sub	r18, r22
     bbc:	82 2e       	mov	r8, r18
     bbe:	91 2c       	mov	r9, r1
     bc0:	18 14       	cp	r1, r8
     bc2:	19 04       	cpc	r1, r9
     bc4:	c4 f4       	brge	.+48     	; 0xbf6 <_ZN11Framebuffer13drawRectangleEhhhhh+0x68>
     bc6:	76 2e       	mov	r7, r22
     bc8:	a1 2c       	mov	r10, r1
     bca:	b1 2c       	mov	r11, r1
     bcc:	e0 2e       	mov	r14, r16
     bce:	f1 2c       	mov	r15, r1
     bd0:	16 2d       	mov	r17, r6
     bd2:	c0 e0       	ldi	r28, 0x00	; 0
     bd4:	d0 e0       	ldi	r29, 0x00	; 0
     bd6:	41 2f       	mov	r20, r17
     bd8:	67 2d       	mov	r22, r7
     bda:	c6 01       	movw	r24, r12
     bdc:	5e df       	rcall	.-324    	; 0xa9a <_ZN11Framebuffer9drawPixelEhh>
     bde:	21 96       	adiw	r28, 0x01	; 1
     be0:	1f 5f       	subi	r17, 0xFF	; 255
     be2:	ec 16       	cp	r14, r28
     be4:	fd 06       	cpc	r15, r29
     be6:	bc f7       	brge	.-18     	; 0xbd6 <_ZN11Framebuffer13drawRectangleEhhhhh+0x48>
     be8:	8f ef       	ldi	r24, 0xFF	; 255
     bea:	a8 1a       	sub	r10, r24
     bec:	b8 0a       	sbc	r11, r24
     bee:	73 94       	inc	r7
     bf0:	a8 14       	cp	r10, r8
     bf2:	b9 04       	cpc	r11, r9
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <_ZN11Framebuffer13drawRectangleEhhhhh+0x42>
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	df 90       	pop	r13
     c04:	cf 90       	pop	r12
     c06:	bf 90       	pop	r11
     c08:	af 90       	pop	r10
     c0a:	9f 90       	pop	r9
     c0c:	8f 90       	pop	r8
     c0e:	7f 90       	pop	r7
     c10:	6f 90       	pop	r6
     c12:	08 95       	ret

00000c14 <_ZN11Framebuffer5clearEv>:
     c14:	fc 01       	movw	r30, r24
     c16:	9c 5f       	subi	r25, 0xFC	; 252
     c18:	11 92       	st	Z+, r1
     c1a:	e8 17       	cp	r30, r24
     c1c:	f9 07       	cpc	r31, r25
     c1e:	e1 f7       	brne	.-8      	; 0xc18 <_ZN11Framebuffer5clearEv+0x4>
     c20:	08 95       	ret

00000c22 <_ZN11FramebufferC1Ev>:
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	ec 01       	movw	r28, r24
     c28:	9c 5f       	subi	r25, 0xFC	; 252
     c2a:	b1 d4       	rcall	.+2402   	; 0x158e <_ZN7SSD1306C1Ev>
     c2c:	ce 01       	movw	r24, r28
     c2e:	f2 df       	rcall	.-28     	; 0xc14 <_ZN11Framebuffer5clearEv>
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	08 95       	ret

00000c36 <_ZN11Framebuffer4showEv>:
}

void Framebuffer::show() {
    this->oled.sendFramebuffer(this->buffer);
     c36:	bc 01       	movw	r22, r24
     c38:	9c 5f       	subi	r25, 0xFC	; 252
     c3a:	fe c4       	rjmp	.+2556   	; 0x1638 <_ZN7SSD130615sendFramebufferEPh>
     c3c:	08 95       	ret

00000c3e <_ZN11Framebuffer8drawCharEiihjjh>:

// Draw a character ***turn to uint8_t ?
//For size 2 the bottom right max is 117,50
//Size 2 fits 4 lines, at y= 0, 16, 32, 48
//fits 10 characters per line at multiples of 12
void Framebuffer::drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size) {
     c3e:	2f 92       	push	r2
     c40:	3f 92       	push	r3
     c42:	4f 92       	push	r4
     c44:	5f 92       	push	r5
     c46:	6f 92       	push	r6
     c48:	7f 92       	push	r7
     c4a:	8f 92       	push	r8
     c4c:	9f 92       	push	r9
     c4e:	af 92       	push	r10
     c50:	bf 92       	push	r11
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	00 d0       	rcall	.+0      	; 0xc64 <_ZN11Framebuffer8drawCharEiihjjh+0x26>
     c64:	00 d0       	rcall	.+0      	; 0xc66 <_ZN11Framebuffer8drawCharEiihjjh+0x28>
     c66:	1f 92       	push	r1
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	5c 01       	movw	r10, r24
     c6e:	4b 83       	std	Y+3, r20	; 0x03
     c70:	48 01       	movw	r8, r16
     c72:	37 01       	movw	r6, r14
     c74:	cd 82       	std	Y+5, r12	; 0x05
     c76:	6a 83       	std	Y+2, r22	; 0x02
     c78:	2c 2c       	mov	r2, r12
     c7a:	26 0e       	add	r2, r22
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	69 01       	movw	r12, r18
     c80:	cc 0c       	add	r12, r12
     c82:	dd 1c       	adc	r13, r13
     c84:	cc 0c       	add	r12, r12
     c86:	dd 1c       	adc	r13, r13
     c88:	2c 0d       	add	r18, r12
     c8a:	3d 1d       	adc	r19, r13
     c8c:	c9 01       	movw	r24, r18
     c8e:	88 56       	subi	r24, 0x68	; 104
     c90:	9f 4f       	sbci	r25, 0xFF	; 255
     c92:	6c 01       	movw	r12, r24
    for (int8_t i=0; i<6; i++ ) {
        uint8_t line;
        if (i == 5)
        line = 0x0;
        else
        line = pgm_read_byte(font+(c*5)+i);
     c94:	36 2e       	mov	r3, r22
//  (y >= _height)           || // Clip bottom
//  ((x + 6 * size - 1) < 0) || // Clip left
//  ((y + 8 * size - 1) < 0))   // Clip top
//  return;

    for (int8_t i=0; i<6; i++ ) {
     c96:	19 82       	std	Y+1, r1	; 0x01
     c98:	44 2e       	mov	r4, r20
     c9a:	98 e0       	ldi	r25, 0x08	; 8
     c9c:	49 0e       	add	r4, r25
        uint8_t line;
        if (i == 5)
     c9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ca0:	e5 30       	cpi	r30, 0x05	; 5
     ca2:	09 f4       	brne	.+2      	; 0xca6 <_ZN11Framebuffer8drawCharEiihjjh+0x68>
     ca4:	41 c0       	rjmp	.+130    	; 0xd28 <_ZN11Framebuffer8drawCharEiihjjh+0xea>
        line = 0x0;
        else
        line = pgm_read_byte(font+(c*5)+i);
     ca6:	f6 01       	movw	r30, r12
     ca8:	14 91       	lpm	r17, Z
     caa:	3f c0       	rjmp	.+126    	; 0xd2a <_ZN11Framebuffer8drawCharEiihjjh+0xec>
        for (int8_t j = 0; j<8; j++) {
            if (line & 0x1) {
     cac:	10 ff       	sbrs	r17, 0
     cae:	11 c0       	rjmp	.+34     	; 0xcd2 <_ZN11Framebuffer8drawCharEiihjjh+0x94>
                if (size == 1) // default size
     cb0:	fd 81       	ldd	r31, Y+5	; 0x05
     cb2:	f1 30       	cpi	r31, 0x01	; 1
     cb4:	29 f4       	brne	.+10     	; 0xcc0 <_ZN11Framebuffer8drawCharEiihjjh+0x82>
                drawPixel(x+i, y+j); //removed color***
     cb6:	4c 81       	ldd	r20, Y+4	; 0x04
     cb8:	6a 81       	ldd	r22, Y+2	; 0x02
     cba:	c5 01       	movw	r24, r10
     cbc:	ee de       	rcall	.-548    	; 0xa9a <_ZN11Framebuffer9drawPixelEhh>
     cbe:	1c c0       	rjmp	.+56     	; 0xcf8 <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                else {  // big size
                    drawRectangle(x+(i*size), y+(j*size), size+x+(i*size), size+y+(j*size), 1);
     cc0:	ee 24       	eor	r14, r14
     cc2:	e3 94       	inc	r14
     cc4:	0f 2d       	mov	r16, r15
     cc6:	22 2d       	mov	r18, r2
     cc8:	45 2d       	mov	r20, r5
     cca:	63 2d       	mov	r22, r3
     ccc:	c5 01       	movw	r24, r10
     cce:	5f df       	rcall	.-322    	; 0xb8e <_ZN11Framebuffer13drawRectangleEhhhhh>
     cd0:	13 c0       	rjmp	.+38     	; 0xcf8 <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                }
                } else if (bg != color) { //*** remove?
     cd2:	68 14       	cp	r6, r8
     cd4:	79 04       	cpc	r7, r9
     cd6:	81 f0       	breq	.+32     	; 0xcf8 <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                if (size == 1) // default size
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	29 f4       	brne	.+10     	; 0xce8 <_ZN11Framebuffer8drawCharEiihjjh+0xaa>
                drawPixel(x+i, y+j); //removed color
     cde:	4c 81       	ldd	r20, Y+4	; 0x04
     ce0:	6a 81       	ldd	r22, Y+2	; 0x02
     ce2:	c5 01       	movw	r24, r10
     ce4:	da de       	rcall	.-588    	; 0xa9a <_ZN11Framebuffer9drawPixelEhh>
     ce6:	08 c0       	rjmp	.+16     	; 0xcf8 <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                else {  // big size
                    drawRectangle(x+i*size, y+j*size, size+x+(i*size), size+y+(j*size), 1);
     ce8:	ee 24       	eor	r14, r14
     cea:	e3 94       	inc	r14
     cec:	0f 2d       	mov	r16, r15
     cee:	22 2d       	mov	r18, r2
     cf0:	45 2d       	mov	r20, r5
     cf2:	63 2d       	mov	r22, r3
     cf4:	c5 01       	movw	r24, r10
     cf6:	4b df       	rcall	.-362    	; 0xb8e <_ZN11Framebuffer13drawRectangleEhhhhh>
                }
            }
            line >>= 1;
     cf8:	16 95       	lsr	r17
     cfa:	9d 81       	ldd	r25, Y+5	; 0x05
     cfc:	59 0e       	add	r5, r25
     cfe:	f9 0e       	add	r15, r25
     d00:	ec 81       	ldd	r30, Y+4	; 0x04
     d02:	ef 5f       	subi	r30, 0xFF	; 255
     d04:	ec 83       	std	Y+4, r30	; 0x04
        uint8_t line;
        if (i == 5)
        line = 0x0;
        else
        line = pgm_read_byte(font+(c*5)+i);
        for (int8_t j = 0; j<8; j++) {
     d06:	e4 11       	cpse	r30, r4
     d08:	d1 cf       	rjmp	.-94     	; 0xcac <_ZN11Framebuffer8drawCharEiihjjh+0x6e>
     d0a:	f9 81       	ldd	r31, Y+1	; 0x01
     d0c:	ff 5f       	subi	r31, 0xFF	; 255
     d0e:	f9 83       	std	Y+1, r31	; 0x01
     d10:	39 0e       	add	r3, r25
     d12:	29 0e       	add	r2, r25
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	8f 5f       	subi	r24, 0xFF	; 255
     d18:	8a 83       	std	Y+2, r24	; 0x02
     d1a:	9f ef       	ldi	r25, 0xFF	; 255
     d1c:	c9 1a       	sub	r12, r25
     d1e:	d9 0a       	sbc	r13, r25
//  (y >= _height)           || // Clip bottom
//  ((x + 6 * size - 1) < 0) || // Clip left
//  ((y + 8 * size - 1) < 0))   // Clip top
//  return;

    for (int8_t i=0; i<6; i++ ) {
     d20:	f6 30       	cpi	r31, 0x06	; 6
     d22:	09 f0       	breq	.+2      	; 0xd26 <_ZN11Framebuffer8drawCharEiihjjh+0xe8>
     d24:	bc cf       	rjmp	.-136    	; 0xc9e <_ZN11Framebuffer8drawCharEiihjjh+0x60>
     d26:	07 c0       	rjmp	.+14     	; 0xd36 <_ZN11Framebuffer8drawCharEiihjjh+0xf8>
        uint8_t line;
        if (i == 5)
        line = 0x0;
     d28:	10 e0       	ldi	r17, 0x00	; 0
     d2a:	5b 80       	ldd	r5, Y+3	; 0x03
     d2c:	f5 2c       	mov	r15, r5
     d2e:	ed 81       	ldd	r30, Y+5	; 0x05
     d30:	fe 0e       	add	r15, r30
//  (y >= _height)           || // Clip bottom
//  ((x + 6 * size - 1) < 0) || // Clip left
//  ((y + 8 * size - 1) < 0))   // Clip top
//  return;

    for (int8_t i=0; i<6; i++ ) {
     d32:	5c 82       	std	Y+4, r5	; 0x04
     d34:	bb cf       	rjmp	.-138    	; 0xcac <_ZN11Framebuffer8drawCharEiihjjh+0x6e>
                }
            }
            line >>= 1;
        }
    }
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	cf 90       	pop	r12
     d50:	bf 90       	pop	r11
     d52:	af 90       	pop	r10
     d54:	9f 90       	pop	r9
     d56:	8f 90       	pop	r8
     d58:	7f 90       	pop	r7
     d5a:	6f 90       	pop	r6
     d5c:	5f 90       	pop	r5
     d5e:	4f 90       	pop	r4
     d60:	3f 90       	pop	r3
     d62:	2f 90       	pop	r2
     d64:	08 95       	ret

00000d66 <_ZN11Framebuffer10drawStringEiiPKc>:

// Draw a string
void Framebuffer::drawString(int16_t x, int16_t y, const char *string){
     d66:	6f 92       	push	r6
     d68:	7f 92       	push	r7
     d6a:	8f 92       	push	r8
     d6c:	9f 92       	push	r9
     d6e:	af 92       	push	r10
     d70:	bf 92       	push	r11
     d72:	cf 92       	push	r12
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	f9 01       	movw	r30, r18

    for(char j=x; *string; string++,j+=12){
     d80:	c6 2f       	mov	r28, r22
     d82:	20 81       	ld	r18, Z
     d84:	22 23       	and	r18, r18
     d86:	c1 f0       	breq	.+48     	; 0xdb8 <_ZN11Framebuffer10drawStringEiiPKc+0x52>
     d88:	5f 01       	movw	r10, r30
     d8a:	3a 01       	movw	r6, r20
     d8c:	4c 01       	movw	r8, r24
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
     d90:	a8 1a       	sub	r10, r24
     d92:	b8 0a       	sbc	r11, r24
        //(x,y,char,color,bg,size)
        this->drawChar(j,y,*string,0,0,2);
     d94:	6c 2f       	mov	r22, r28
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	68 94       	set
     d9a:	cc 24       	eor	r12, r12
     d9c:	c1 f8       	bld	r12, 1
     d9e:	e1 2c       	mov	r14, r1
     da0:	f1 2c       	mov	r15, r1
     da2:	00 e0       	ldi	r16, 0x00	; 0
     da4:	10 e0       	ldi	r17, 0x00	; 0
     da6:	a3 01       	movw	r20, r6
     da8:	c4 01       	movw	r24, r8
     daa:	49 df       	rcall	.-366    	; 0xc3e <_ZN11Framebuffer8drawCharEiihjjh>
}

// Draw a string
void Framebuffer::drawString(int16_t x, int16_t y, const char *string){

    for(char j=x; *string; string++,j+=12){
     dac:	c4 5f       	subi	r28, 0xF4	; 244
     dae:	f5 01       	movw	r30, r10
     db0:	21 91       	ld	r18, Z+
     db2:	5f 01       	movw	r10, r30
     db4:	21 11       	cpse	r18, r1
     db6:	ee cf       	rjmp	.-36     	; 0xd94 <_ZN11Framebuffer10drawStringEiiPKc+0x2e>
        //(x,y,char,color,bg,size)
        this->drawChar(j,y,*string,0,0,2);
    }
    
}
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	cf 90       	pop	r12
     dc4:	bf 90       	pop	r11
     dc6:	af 90       	pop	r10
     dc8:	9f 90       	pop	r9
     dca:	8f 90       	pop	r8
     dcc:	7f 90       	pop	r7
     dce:	6f 90       	pop	r6
     dd0:	08 95       	ret

00000dd2 <_ZN11Framebuffer10drawNumberEiii>:

void Framebuffer::drawNumber(int16_t x, int16_t y, int number){
     dd2:	8f 92       	push	r8
     dd4:	9f 92       	push	r9
     dd6:	af 92       	push	r10
     dd8:	bf 92       	push	r11
     dda:	cf 92       	push	r12
     ddc:	df 92       	push	r13
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	6c 01       	movw	r12, r24
     df0:	5b 01       	movw	r10, r22
     df2:	4a 01       	movw	r8, r20
		i = 7;
	}
	char str[i];
	sprintf(str,"%i",number);
	this->drawString(x,y,str);
}
     df4:	ed b6       	in	r14, 0x3d	; 61
     df6:	fe b6       	in	r15, 0x3e	; 62
    
}

void Framebuffer::drawNumber(int16_t x, int16_t y, int number){
	char i;
	if(number<10){
     df8:	2a 30       	cpi	r18, 0x0A	; 10
     dfa:	31 05       	cpc	r19, r1
     dfc:	4c f0       	brlt	.+18     	; 0xe10 <_ZN11Framebuffer10drawNumberEiii+0x3e>
		i = 2;
	}
	else if(number < 100){
     dfe:	24 36       	cpi	r18, 0x64	; 100
     e00:	31 05       	cpc	r19, r1
     e02:	44 f0       	brlt	.+16     	; 0xe14 <_ZN11Framebuffer10drawNumberEiii+0x42>
		i = 3;
	}
	else if(number <1000){
     e04:	28 3e       	cpi	r18, 0xE8	; 232
     e06:	43 e0       	ldi	r20, 0x03	; 3
     e08:	34 07       	cpc	r19, r20
     e0a:	34 f0       	brlt	.+12     	; 0xe18 <_ZN11Framebuffer10drawNumberEiii+0x46>
		i = 4;
	}
	else{
		i = 7;
     e0c:	87 e0       	ldi	r24, 0x07	; 7
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <_ZN11Framebuffer10drawNumberEiii+0x48>
}

void Framebuffer::drawNumber(int16_t x, int16_t y, int number){
	char i;
	if(number<10){
		i = 2;
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	03 c0       	rjmp	.+6      	; 0xe1a <_ZN11Framebuffer10drawNumberEiii+0x48>
	}
	else if(number < 100){
		i = 3;
     e14:	83 e0       	ldi	r24, 0x03	; 3
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <_ZN11Framebuffer10drawNumberEiii+0x48>
	}
	else if(number <1000){
		i = 4;
     e18:	84 e0       	ldi	r24, 0x04	; 4
	}
	else{
		i = 7;
	}
	char str[i];
     e1a:	4d b7       	in	r20, 0x3d	; 61
     e1c:	5e b7       	in	r21, 0x3e	; 62
     e1e:	48 1b       	sub	r20, r24
     e20:	51 09       	sbc	r21, r1
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	5e bf       	out	0x3e, r21	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	4d bf       	out	0x3d, r20	; 61
     e2c:	0d b7       	in	r16, 0x3d	; 61
     e2e:	1e b7       	in	r17, 0x3e	; 62
     e30:	0f 5f       	subi	r16, 0xFF	; 255
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
	sprintf(str,"%i",number);
     e34:	3f 93       	push	r19
     e36:	2f 93       	push	r18
     e38:	84 e3       	ldi	r24, 0x34	; 52
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	1f 93       	push	r17
     e42:	0f 93       	push	r16
     e44:	01 d6       	rcall	.+3074   	; 0x1a48 <sprintf>
	this->drawString(x,y,str);
     e46:	20 2f       	mov	r18, r16
     e48:	31 2f       	mov	r19, r17
     e4a:	a4 01       	movw	r20, r8
     e4c:	b5 01       	movw	r22, r10
     e4e:	c6 01       	movw	r24, r12
     e50:	8a df       	rcall	.-236    	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
}
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	fe be       	out	0x3e, r15	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	ed be       	out	0x3d, r14	; 61
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	bf 90       	pop	r11
     e7a:	af 90       	pop	r10
     e7c:	9f 90       	pop	r9
     e7e:	8f 90       	pop	r8
     e80:	08 95       	ret

00000e82 <_ZN3I2CC1Ev>:

#include "I2C.h"

#define F_CPU 8000000

I2C::I2C() {}
     e82:	08 95       	ret

00000e84 <_ZN3I2C4initEh>:

void I2C::init(uint8_t address) {
    this->address = address;
     e84:	fc 01       	movw	r30, r24
     e86:	60 83       	st	Z, r22
    TWSR = 0;
     e88:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR = ((F_CPU/SCL_CLOCK)-16)/2;
     e8c:	80 e2       	ldi	r24, 0x20	; 32
     e8e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     e92:	08 95       	ret

00000e94 <_ZN3I2C5startEv>:
}

uint8_t I2C::start() {
     e94:	dc 01       	movw	r26, r24
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     e96:	84 ea       	ldi	r24, 0xA4	; 164
     e98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while(!(TWCR & (1<<TWINT)));
     e9c:	ec eb       	ldi	r30, 0xBC	; 188
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	90 81       	ld	r25, Z
     ea2:	99 23       	and	r25, r25
     ea4:	ec f7       	brge	.-6      	; 0xea0 <_ZN3I2C5startEv+0xc>

    twi_status_register = TW_STATUS & 0xF8;
     ea6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     eaa:	98 7f       	andi	r25, 0xF8	; 248
     eac:	11 96       	adiw	r26, 0x01	; 1
     eae:	9c 93       	st	X, r25
     eb0:	11 97       	sbiw	r26, 0x01	; 1
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
     eb2:	98 30       	cpi	r25, 0x08	; 8
     eb4:	11 f0       	breq	.+4      	; 0xeba <_ZN3I2C5startEv+0x26>
     eb6:	90 31       	cpi	r25, 0x10	; 16
     eb8:	b9 f4       	brne	.+46     	; 0xee8 <_ZN3I2C5startEv+0x54>
        return 1;
    }

    TWDR = address;
     eba:	8c 91       	ld	r24, X
     ebc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = (1<<TWINT) | (1<<TWEN);
     ec0:	84 e8       	ldi	r24, 0x84	; 132
     ec2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    while(!(TWCR & (1<<TWINT)));
     ec6:	ec eb       	ldi	r30, 0xBC	; 188
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	90 81       	ld	r25, Z
     ecc:	99 23       	and	r25, r25
     ece:	ec f7       	brge	.-6      	; 0xeca <_ZN3I2C5startEv+0x36>

    this->twi_status_register = TW_STATUS & 0xF8;
     ed0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     ed4:	98 7f       	andi	r25, 0xF8	; 248
     ed6:	11 96       	adiw	r26, 0x01	; 1
     ed8:	9c 93       	st	X, r25
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
     eda:	98 31       	cpi	r25, 0x18	; 24
     edc:	39 f0       	breq	.+14     	; 0xeec <_ZN3I2C5startEv+0x58>
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    while(!(TWCR & (1<<TWINT)));

    twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
        return 1;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 34       	cpi	r25, 0x40	; 64
     ee2:	29 f4       	brne	.+10     	; 0xeee <_ZN3I2C5startEv+0x5a>
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	08 95       	ret
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	08 95       	ret
    this->twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
        return 1;
    }

    return 0;
     eec:	80 e0       	ldi	r24, 0x00	; 0
}
     eee:	08 95       	ret

00000ef0 <_ZN3I2C5writeEh>:

uint8_t I2C::write(uint8_t data) {
     ef0:	dc 01       	movw	r26, r24
    TWDR = data;
     ef2:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = (1<<TWINT) | (1<<TWEN);
     ef6:	84 e8       	ldi	r24, 0x84	; 132
     ef8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    while(!(TWCR & (1<<TWINT)));
     efc:	ec eb       	ldi	r30, 0xBC	; 188
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	90 81       	ld	r25, Z
     f02:	99 23       	and	r25, r25
     f04:	ec f7       	brge	.-6      	; 0xf00 <_ZN3I2C5writeEh+0x10>

    this->twi_status_register = TW_STATUS & 0xF8;
     f06:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f0a:	98 7f       	andi	r25, 0xF8	; 248
     f0c:	11 96       	adiw	r26, 0x01	; 1
     f0e:	9c 93       	st	X, r25
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	98 32       	cpi	r25, 0x28	; 40
     f14:	09 f4       	brne	.+2      	; 0xf18 <_ZN3I2C5writeEh+0x28>
     f16:	80 e0       	ldi	r24, 0x00	; 0
    if (this->twi_status_register != TW_MT_DATA_ACK) {
        return 1;
    } else {
        return 0;
    }
}
     f18:	08 95       	ret

00000f1a <_ZN3I2C4stopEv>:

void I2C::stop(void) {
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     f1a:	84 e9       	ldi	r24, 0x94	; 148
     f1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while(TWCR & (1<<TWSTO));
     f20:	ec eb       	ldi	r30, 0xBC	; 188
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	84 fd       	sbrc	r24, 4
     f28:	fd cf       	rjmp	.-6      	; 0xf24 <_ZN3I2C4stopEv+0xa>
     f2a:	08 95       	ret

00000f2c <main>:

int main(void)
{
	unsigned char menuSelector = 0;
	
	cli(); //Ensure interrupts are turned off
     f2c:	f8 94       	cli
	//Set system clock to 8MHz
	CLKPR = _BV(CLKPCE);
     f2e:	e1 e6       	ldi	r30, 0x61	; 97
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 e8       	ldi	r24, 0x80	; 128
     f34:	80 83       	st	Z, r24
	CLKPR = 0;
     f36:	10 82       	st	Z, r1
	
	//pin 6 for stepper calibration pin
	DDRE &= 0x0f; 
     f38:	8d b1       	in	r24, 0x0d	; 13
     f3a:	8f 70       	andi	r24, 0x0F	; 15
     f3c:	8d b9       	out	0x0d, r24	; 13
	DDRC |= 0xff;
     f3e:	87 b1       	in	r24, 0x07	; 7
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	87 b9       	out	0x07, r24	; 7
	//Joystick input w/ pullup up(pin7) left(pin6) select(pin5) 
	DDRB &= ~JS_UP_PIN & ~JS_LEFT_PIN & ~JS_SELECT_PIN; 
     f44:	84 b1       	in	r24, 0x04	; 4
     f46:	8f 71       	andi	r24, 0x1F	; 31
     f48:	84 b9       	out	0x04, r24	; 4
	PORTB |= JS_UP_PIN | JS_LEFT_PIN | JS_SELECT_PIN;
     f4a:	85 b1       	in	r24, 0x05	; 5
     f4c:	80 6e       	ori	r24, 0xE0	; 224
     f4e:	85 b9       	out	0x05, r24	; 5
	//Joystick input w/ pullup down(pin5) right(pin4)
	DDRE &= ~JS_DOWN_PIN & ~JS_RIGHT_PIN;
     f50:	8d b1       	in	r24, 0x0d	; 13
     f52:	8f 7c       	andi	r24, 0xCF	; 207
     f54:	8d b9       	out	0x0d, r24	; 13
	PORTE |= JS_DOWN_PIN | JS_RIGHT_PIN;
     f56:	8e b1       	in	r24, 0x0e	; 14
     f58:	80 63       	ori	r24, 0x30	; 48
	
	initADC();
	initMotor();
	initTimer();
     f5a:	8e b9       	out	0x0e, r24	; 14
     f5c:	46 db       	rcall	.-2420   	; 0x5ea <_Z7initADCv>
     f5e:	de d2       	rcall	.+1468   	; 0x151c <_Z9initMotorv>
     f60:	40 d5       	rcall	.+2688   	; 0x19e2 <_Z9initTimerv>
     f62:	75 dc       	rcall	.-1814   	; 0x84e <_Z10initExtIntv>
     f64:	db d2       	rcall	.+1462   	; 0x151c <_Z9initMotorv>
     f66:	ae d3       	rcall	.+1884   	; 0x16c4 <_Z11initStepperv>
     f68:	fc d2       	rcall	.+1528   	; 0x1562 <_Z10motorBrakev>
     f6a:	80 e8       	ldi	r24, 0x80	; 128
     f6c:	f0 d2       	rcall	.+1504   	; 0x154e <_Z10motorSpeedc>
     f6e:	8f e0       	ldi	r24, 0x0F	; 15
     f70:	88 b9       	out	0x08, r24	; 8
     f72:	c0 e0       	ldi	r28, 0x00	; 0
     f74:	0c 2f       	mov	r16, r28
     f76:	12 e0       	ldi	r17, 0x02	; 2
     f78:	cc 24       	eor	r12, r12
     f7a:	c3 94       	inc	r12
     f7c:	dc 2e       	mov	r13, r28
     f7e:	0f 2e       	mov	r0, r31
     f80:	f3 e0       	ldi	r31, 0x03	; 3
     f82:	ef 2e       	mov	r14, r31
     f84:	f0 2d       	mov	r31, r0
     f86:	f1 2e       	mov	r15, r17
     f88:	f8 d0       	rcall	.+496    	; 0x117a <_Z10menu1Startv>
     f8a:	d0 2f       	mov	r29, r16
     f8c:	65 99       	sbic	0x0c, 5	; 12
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <main+0x68>
     f90:	23 d1       	rcall	.+582    	; 0x11d8 <_Z16menu1Calibrationv>
     f92:	dc 2d       	mov	r29, r12
     f94:	1f 99       	sbic	0x03, 7	; 3
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <main+0x70>
     f98:	f0 d0       	rcall	.+480    	; 0x117a <_Z10menu1Startv>
     f9a:	dd 2d       	mov	r29, r13
     f9c:	1d 99       	sbic	0x03, 5	; 3
     f9e:	f6 cf       	rjmp	.-20     	; 0xf8c <main+0x60>
     fa0:	84 e1       	ldi	r24, 0x14	; 20
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	2a d5       	rcall	.+2644   	; 0x19fa <_Z6mTimeri>
     fa6:	1d 9b       	sbis	0x03, 5	; 3
     fa8:	fe cf       	rjmp	.-4      	; 0xfa6 <main+0x7a>
     faa:	84 e1       	ldi	r24, 0x14	; 20
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	25 d5       	rcall	.+2634   	; 0x19fa <_Z6mTimeri>
     fb0:	d1 30       	cpi	r29, 0x01	; 1
     fb2:	79 f5       	brne	.+94     	; 0x1012 <main+0xe6>
     fb4:	40 d1       	rcall	.+640    	; 0x1236 <_Z12menu2Stepperv>
     fb6:	81 2f       	mov	r24, r17
     fb8:	65 99       	sbic	0x0c, 5	; 12
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <main+0x94>
     fbc:	6b d1       	rcall	.+726    	; 0x1294 <_Z9menu2Reflv>
     fbe:	8e 2d       	mov	r24, r14
     fc0:	1f 99       	sbic	0x03, 7	; 3
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <main+0x9c>
     fc4:	38 d1       	rcall	.+624    	; 0x1236 <_Z12menu2Stepperv>
     fc6:	8f 2d       	mov	r24, r15
     fc8:	1e 9b       	sbis	0x03, 6	; 3
     fca:	de cf       	rjmp	.-68     	; 0xf88 <main+0x5c>
     fcc:	1d 99       	sbic	0x03, 5	; 3
     fce:	f4 cf       	rjmp	.-24     	; 0xfb8 <main+0x8c>
     fd0:	83 30       	cpi	r24, 0x03	; 3
     fd2:	d1 f4       	brne	.+52     	; 0x1008 <main+0xdc>
     fd4:	5d db       	rcall	.-2374   	; 0x690 <_Z12calibrateADCv>
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	fc 01       	movw	r30, r24
     fdc:	e2 53       	subi	r30, 0x32	; 50
     fde:	fe 4f       	sbci	r31, 0xFE	; 254
     fe0:	10 82       	st	Z, r1
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	88 30       	cpi	r24, 0x08	; 8
     fe6:	91 05       	cpc	r25, r1
     fe8:	c1 f7       	brne	.-16     	; 0xfda <main+0xae>
     fea:	c0 93 cc 01 	sts	0x01CC, r28	; 0x8001cc <frontOfQueue>
     fee:	c0 93 cb 01 	sts	0x01CB, r28	; 0x8001cb <backOfQueue>
     ff2:	1d 99       	sbic	0x03, 5	; 3
     ff4:	fe cf       	rjmp	.-4      	; 0xff2 <main+0xc6>
     ff6:	84 e1       	ldi	r24, 0x14	; 20
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	ff d4       	rcall	.+2558   	; 0x19fa <_Z6mTimeri>
     ffc:	1d 9b       	sbis	0x03, 5	; 3
     ffe:	fe cf       	rjmp	.-4      	; 0xffc <main+0xd0>
    1000:	84 e1       	ldi	r24, 0x14	; 20
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	fa d4       	rcall	.+2548   	; 0x19fa <_Z6mTimeri>
    1006:	c0 cf       	rjmp	.-128    	; 0xf88 <main+0x5c>
    1008:	ed d3       	rcall	.+2010   	; 0x17e4 <_Z11homeStepperv>
    100a:	be cf       	rjmp	.-132    	; 0xf88 <main+0x5c>
    100c:	1e 99       	sbic	0x03, 6	; 3
    100e:	fe cf       	rjmp	.-4      	; 0x100c <main+0xe0>
    1010:	0e c0       	rjmp	.+28     	; 0x102e <main+0x102>
    1012:	0f 2e       	mov	r0, r31
    1014:	f4 e6       	ldi	r31, 0x64	; 100
    1016:	cf 2e       	mov	r12, r31
    1018:	f0 2d       	mov	r31, r0
    101a:	d1 2c       	mov	r13, r1
    101c:	0f 2e       	mov	r0, r31
    101e:	f2 e3       	ldi	r31, 0x32	; 50
    1020:	ef 2e       	mov	r14, r31
    1022:	f1 2c       	mov	r15, r1
    1024:	f0 2d       	mov	r31, r0
    1026:	06 e9       	ldi	r16, 0x96	; 150
    1028:	10 e0       	ldi	r17, 0x00	; 0
    102a:	cc 2d       	mov	r28, r12
    102c:	dd 2d       	mov	r29, r13
    102e:	94 d2       	rcall	.+1320   	; 0x1558 <_Z12motorForwardv>
    1030:	53 d3       	rcall	.+1702   	; 0x16d8 <_Z12startStepperv>
    1032:	78 94       	sei
    1034:	5e d1       	rcall	.+700    	; 0x12f2 <_Z10menuDebugQv>
    1036:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <reflQueueChange>
    103a:	88 23       	and	r24, r24
    103c:	09 f4       	brne	.+2      	; 0x1040 <main+0x114>
    103e:	8e c0       	rjmp	.+284    	; 0x115c <main+0x230>
    1040:	f8 94       	cli
    1042:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <delayStepper>
    1046:	88 23       	and	r24, r24
    1048:	29 f0       	breq	.+10     	; 0x1054 <main+0x128>
    104a:	84 e1       	ldi	r24, 0x14	; 20
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	d5 d4       	rcall	.+2474   	; 0x19fa <_Z6mTimeri>
    1050:	10 92 d8 05 	sts	0x05D8, r1	; 0x8005d8 <delayStepper>
    1054:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <firstEnqueue>
    1058:	88 23       	and	r24, r24
    105a:	b1 f1       	breq	.+108    	; 0x10c8 <main+0x19c>
    105c:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <frontOfQueue>
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	e2 53       	subi	r30, 0x32	; 50
    1064:	fe 4f       	sbci	r31, 0xFE	; 254
    1066:	80 81       	ld	r24, Z
    1068:	81 11       	cpse	r24, r1
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <main+0x14a>
    106c:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <stepGoalPosition+0x1>
    1070:	10 92 dc 05 	sts	0x05DC, r1	; 0x8005dc <stepGoalPosition>
    1074:	26 c0       	rjmp	.+76     	; 0x10c2 <main+0x196>
    1076:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <frontOfQueue>
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	e2 53       	subi	r30, 0x32	; 50
    107e:	fe 4f       	sbci	r31, 0xFE	; 254
    1080:	80 81       	ld	r24, Z
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	29 f4       	brne	.+10     	; 0x1090 <main+0x164>
    1086:	d0 93 dd 05 	sts	0x05DD, r29	; 0x8005dd <stepGoalPosition+0x1>
    108a:	c0 93 dc 05 	sts	0x05DC, r28	; 0x8005dc <stepGoalPosition>
    108e:	19 c0       	rjmp	.+50     	; 0x10c2 <main+0x196>
    1090:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <frontOfQueue>
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	e2 53       	subi	r30, 0x32	; 50
    1098:	fe 4f       	sbci	r31, 0xFE	; 254
    109a:	80 81       	ld	r24, Z
    109c:	82 30       	cpi	r24, 0x02	; 2
    109e:	29 f4       	brne	.+10     	; 0x10aa <main+0x17e>
    10a0:	10 93 dd 05 	sts	0x05DD, r17	; 0x8005dd <stepGoalPosition+0x1>
    10a4:	00 93 dc 05 	sts	0x05DC, r16	; 0x8005dc <stepGoalPosition>
    10a8:	0c c0       	rjmp	.+24     	; 0x10c2 <main+0x196>
    10aa:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <frontOfQueue>
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	e2 53       	subi	r30, 0x32	; 50
    10b2:	fe 4f       	sbci	r31, 0xFE	; 254
    10b4:	80 81       	ld	r24, Z
    10b6:	83 30       	cpi	r24, 0x03	; 3
    10b8:	21 f4       	brne	.+8      	; 0x10c2 <main+0x196>
    10ba:	f0 92 dd 05 	sts	0x05DD, r15	; 0x8005dd <stepGoalPosition+0x1>
    10be:	e0 92 dc 05 	sts	0x05DC, r14	; 0x8005dc <stepGoalPosition>
    10c2:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <firstEnqueue>
    10c6:	47 c0       	rjmp	.+142    	; 0x1156 <main+0x22a>
    10c8:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <frontOfQueue>
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	e2 53       	subi	r30, 0x32	; 50
    10d0:	fe 4f       	sbci	r31, 0xFE	; 254
    10d2:	80 81       	ld	r24, Z
    10d4:	81 11       	cpse	r24, r1
    10d6:	0a c0       	rjmp	.+20     	; 0x10ec <main+0x1c0>
    10d8:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <stepGoalPosition+0x1>
    10dc:	10 92 dc 05 	sts	0x05DC, r1	; 0x8005dc <stepGoalPosition>
    10e0:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <blackCount>
    10e4:	8f 5f       	subi	r24, 0xFF	; 255
    10e6:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blackCount>
    10ea:	35 c0       	rjmp	.+106    	; 0x1156 <main+0x22a>
    10ec:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <frontOfQueue>
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	e2 53       	subi	r30, 0x32	; 50
    10f4:	fe 4f       	sbci	r31, 0xFE	; 254
    10f6:	80 81       	ld	r24, Z
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	51 f4       	brne	.+20     	; 0x1110 <main+0x1e4>
    10fc:	d0 93 dd 05 	sts	0x05DD, r29	; 0x8005dd <stepGoalPosition+0x1>
    1100:	c0 93 dc 05 	sts	0x05DC, r28	; 0x8005dc <stepGoalPosition>
    1104:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <whiteCount>
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <whiteCount>
    110e:	23 c0       	rjmp	.+70     	; 0x1156 <main+0x22a>
    1110:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <frontOfQueue>
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	e2 53       	subi	r30, 0x32	; 50
    1118:	fe 4f       	sbci	r31, 0xFE	; 254
    111a:	80 81       	ld	r24, Z
    111c:	82 30       	cpi	r24, 0x02	; 2
    111e:	51 f4       	brne	.+20     	; 0x1134 <main+0x208>
    1120:	10 93 dd 05 	sts	0x05DD, r17	; 0x8005dd <stepGoalPosition+0x1>
    1124:	00 93 dc 05 	sts	0x05DC, r16	; 0x8005dc <stepGoalPosition>
    1128:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <steelCount>
    112c:	8f 5f       	subi	r24, 0xFF	; 255
    112e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <steelCount>
    1132:	11 c0       	rjmp	.+34     	; 0x1156 <main+0x22a>
    1134:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <frontOfQueue>
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	e2 53       	subi	r30, 0x32	; 50
    113c:	fe 4f       	sbci	r31, 0xFE	; 254
    113e:	80 81       	ld	r24, Z
    1140:	83 30       	cpi	r24, 0x03	; 3
    1142:	49 f4       	brne	.+18     	; 0x1156 <main+0x22a>
    1144:	f0 92 dd 05 	sts	0x05DD, r15	; 0x8005dd <stepGoalPosition+0x1>
    1148:	e0 92 dc 05 	sts	0x05DC, r14	; 0x8005dc <stepGoalPosition>
    114c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <aluminumCount>
    1150:	8f 5f       	subi	r24, 0xFF	; 255
    1152:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <aluminumCount>
    1156:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <reflQueueChange>
    115a:	78 94       	sei
    115c:	64 99       	sbic	0x0c, 4	; 12
    115e:	6a cf       	rjmp	.-300    	; 0x1034 <main+0x108>
    1160:	82 b1       	in	r24, 0x02	; 2
    1162:	8f 73       	andi	r24, 0x3F	; 63
    1164:	82 b9       	out	0x02, r24	; 2
    1166:	8c 2d       	mov	r24, r12
    1168:	9d 2d       	mov	r25, r13
    116a:	47 d4       	rcall	.+2190   	; 0x19fa <_Z6mTimeri>
    116c:	f8 94       	cli
    116e:	67 d1       	rcall	.+718    	; 0x143e <_Z20menuDisplayItemCountv>
    1170:	4d cf       	rjmp	.-358    	; 0x100c <main+0xe0>

00001172 <_GLOBAL__sub_I_debug>:
    1172:	86 ed       	ldi	r24, 0xD6	; 214
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	55 cd       	rjmp	.-1366   	; 0xc22 <_ZN11FramebufferC1Ev>
    1178:	08 95       	ret

0000117a <_Z10menu1Startv>:
	myDisplay.drawNumber(60,0,stepGoalPosition);
	myDisplay.drawString(0,16,"Cur:");
	myDisplay.drawNumber(60,16,stepGoalPosition);
	myDisplay.drawString(0,32,"Delay:");
	myDisplay.drawNumber(72,32,stepperDelay);
	myDisplay.show();
    117a:	ef 92       	push	r14
    117c:	0f 93       	push	r16
    117e:	86 ed       	ldi	r24, 0xD6	; 214
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	48 dd       	rcall	.-1392   	; 0xc14 <_ZN11Framebuffer5clearEv>
    1184:	27 e3       	ldi	r18, 0x37	; 55
    1186:	31 e0       	ldi	r19, 0x01	; 1
    1188:	40 e0       	ldi	r20, 0x00	; 0
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	86 ed       	ldi	r24, 0xD6	; 214
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	e8 dd       	rcall	.-1072   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    1196:	ee 24       	eor	r14, r14
    1198:	e3 94       	inc	r14
    119a:	01 e1       	ldi	r16, 0x11	; 17
    119c:	2f e7       	ldi	r18, 0x7F	; 127
    119e:	40 e1       	ldi	r20, 0x10	; 16
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	86 ed       	ldi	r24, 0xD6	; 214
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	f3 dc       	rcall	.-1562   	; 0xb8e <_ZN11Framebuffer13drawRectangleEhhhhh>
    11a8:	23 e4       	ldi	r18, 0x43	; 67
    11aa:	31 e0       	ldi	r19, 0x01	; 1
    11ac:	44 e1       	ldi	r20, 0x14	; 20
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	86 ed       	ldi	r24, 0xD6	; 214
    11b6:	91 e0       	ldi	r25, 0x01	; 1
    11b8:	d6 dd       	rcall	.-1108   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    11ba:	2a e4       	ldi	r18, 0x4A	; 74
    11bc:	31 e0       	ldi	r19, 0x01	; 1
    11be:	44 e2       	ldi	r20, 0x24	; 36
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	86 ed       	ldi	r24, 0xD6	; 214
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	cd dd       	rcall	.-1126   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    11cc:	86 ed       	ldi	r24, 0xD6	; 214
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	32 dd       	rcall	.-1436   	; 0xc36 <_ZN11Framebuffer4showEv>
    11d2:	0f 91       	pop	r16
    11d4:	ef 90       	pop	r14
    11d6:	08 95       	ret

000011d8 <_Z16menu1Calibrationv>:
    11d8:	ef 92       	push	r14
    11da:	0f 93       	push	r16
    11dc:	86 ed       	ldi	r24, 0xD6	; 214
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	19 dd       	rcall	.-1486   	; 0xc14 <_ZN11Framebuffer5clearEv>
    11e2:	27 e3       	ldi	r18, 0x37	; 55
    11e4:	31 e0       	ldi	r19, 0x01	; 1
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	86 ed       	ldi	r24, 0xD6	; 214
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	b9 dd       	rcall	.-1166   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    11f4:	ee 24       	eor	r14, r14
    11f6:	e3 94       	inc	r14
    11f8:	01 e1       	ldi	r16, 0x11	; 17
    11fa:	2f e7       	ldi	r18, 0x7F	; 127
    11fc:	40 e1       	ldi	r20, 0x10	; 16
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	86 ed       	ldi	r24, 0xD6	; 214
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	c4 dc       	rcall	.-1656   	; 0xb8e <_ZN11Framebuffer13drawRectangleEhhhhh>
    1206:	25 e5       	ldi	r18, 0x55	; 85
    1208:	31 e0       	ldi	r19, 0x01	; 1
    120a:	44 e1       	ldi	r20, 0x14	; 20
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	86 ed       	ldi	r24, 0xD6	; 214
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	a7 dd       	rcall	.-1202   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    1218:	2c e5       	ldi	r18, 0x5C	; 92
    121a:	31 e0       	ldi	r19, 0x01	; 1
    121c:	44 e2       	ldi	r20, 0x24	; 36
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	86 ed       	ldi	r24, 0xD6	; 214
    1226:	91 e0       	ldi	r25, 0x01	; 1
    1228:	9e dd       	rcall	.-1220   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    122a:	86 ed       	ldi	r24, 0xD6	; 214
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	03 dd       	rcall	.-1530   	; 0xc36 <_ZN11Framebuffer4showEv>
    1230:	0f 91       	pop	r16
    1232:	ef 90       	pop	r14
    1234:	08 95       	ret

00001236 <_Z12menu2Stepperv>:
    1236:	ef 92       	push	r14
    1238:	0f 93       	push	r16
    123a:	86 ed       	ldi	r24, 0xD6	; 214
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	ea dc       	rcall	.-1580   	; 0xc14 <_ZN11Framebuffer5clearEv>
    1240:	2b e4       	ldi	r18, 0x4B	; 75
    1242:	31 e0       	ldi	r19, 0x01	; 1
    1244:	40 e0       	ldi	r20, 0x00	; 0
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	86 ed       	ldi	r24, 0xD6	; 214
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	8a dd       	rcall	.-1260   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    1252:	ee 24       	eor	r14, r14
    1254:	e3 94       	inc	r14
    1256:	01 e1       	ldi	r16, 0x11	; 17
    1258:	2f e7       	ldi	r18, 0x7F	; 127
    125a:	40 e1       	ldi	r20, 0x10	; 16
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	86 ed       	ldi	r24, 0xD6	; 214
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	95 dc       	rcall	.-1750   	; 0xb8e <_ZN11Framebuffer13drawRectangleEhhhhh>
    1264:	27 e6       	ldi	r18, 0x67	; 103
    1266:	31 e0       	ldi	r19, 0x01	; 1
    1268:	44 e1       	ldi	r20, 0x14	; 20
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	86 ed       	ldi	r24, 0xD6	; 214
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	78 dd       	rcall	.-1296   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    1276:	20 e7       	ldi	r18, 0x70	; 112
    1278:	31 e0       	ldi	r19, 0x01	; 1
    127a:	44 e2       	ldi	r20, 0x24	; 36
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	86 ed       	ldi	r24, 0xD6	; 214
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	6f dd       	rcall	.-1314   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    1288:	86 ed       	ldi	r24, 0xD6	; 214
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	d4 dc       	rcall	.-1624   	; 0xc36 <_ZN11Framebuffer4showEv>
    128e:	0f 91       	pop	r16
    1290:	ef 90       	pop	r14
    1292:	08 95       	ret

00001294 <_Z9menu2Reflv>:
    1294:	ef 92       	push	r14
    1296:	0f 93       	push	r16
    1298:	86 ed       	ldi	r24, 0xD6	; 214
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	bb dc       	rcall	.-1674   	; 0xc14 <_ZN11Framebuffer5clearEv>
    129e:	2b e4       	ldi	r18, 0x4B	; 75
    12a0:	31 e0       	ldi	r19, 0x01	; 1
    12a2:	40 e0       	ldi	r20, 0x00	; 0
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	86 ed       	ldi	r24, 0xD6	; 214
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	5b dd       	rcall	.-1354   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    12b0:	ee 24       	eor	r14, r14
    12b2:	e3 94       	inc	r14
    12b4:	01 e1       	ldi	r16, 0x11	; 17
    12b6:	2f e7       	ldi	r18, 0x7F	; 127
    12b8:	40 e1       	ldi	r20, 0x10	; 16
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	86 ed       	ldi	r24, 0xD6	; 214
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	66 dc       	rcall	.-1844   	; 0xb8e <_ZN11Framebuffer13drawRectangleEhhhhh>
    12c2:	2b e7       	ldi	r18, 0x7B	; 123
    12c4:	31 e0       	ldi	r19, 0x01	; 1
    12c6:	44 e1       	ldi	r20, 0x14	; 20
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	86 ed       	ldi	r24, 0xD6	; 214
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	49 dd       	rcall	.-1390   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    12d4:	24 e8       	ldi	r18, 0x84	; 132
    12d6:	31 e0       	ldi	r19, 0x01	; 1
    12d8:	44 e2       	ldi	r20, 0x24	; 36
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	86 ed       	ldi	r24, 0xD6	; 214
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	40 dd       	rcall	.-1408   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    12e6:	86 ed       	ldi	r24, 0xD6	; 214
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	a5 dc       	rcall	.-1718   	; 0xc36 <_ZN11Framebuffer4showEv>
    12ec:	0f 91       	pop	r16
    12ee:	ef 90       	pop	r14
    12f0:	08 95       	ret

000012f2 <_Z10menuDebugQv>:
    12f2:	ef 92       	push	r14
    12f4:	0f 93       	push	r16
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	86 ed       	ldi	r24, 0xD6	; 214
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	8a dc       	rcall	.-1772   	; 0xc14 <_ZN11Framebuffer5clearEv>
    1300:	2f e8       	ldi	r18, 0x8F	; 143
    1302:	31 e0       	ldi	r19, 0x01	; 1
    1304:	40 e0       	ldi	r20, 0x00	; 0
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	86 ed       	ldi	r24, 0xD6	; 214
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	2a dd       	rcall	.-1452   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    1312:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
    1316:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	68 e4       	ldi	r22, 0x48	; 72
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	86 ed       	ldi	r24, 0xD6	; 214
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	55 dd       	rcall	.-1366   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
    1328:	ee 24       	eor	r14, r14
    132a:	e3 94       	inc	r14
    132c:	01 e1       	ldi	r16, 0x11	; 17
    132e:	2f e7       	ldi	r18, 0x7F	; 127
    1330:	40 e1       	ldi	r20, 0x10	; 16
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	86 ed       	ldi	r24, 0xD6	; 214
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	2a dc       	rcall	.-1964   	; 0xb8e <_ZN11Framebuffer13drawRectangleEhhhhh>
    133a:	ce ec       	ldi	r28, 0xCE	; 206
    133c:	d1 e0       	ldi	r29, 0x01	; 1
    133e:	28 81       	ld	r18, Y
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	44 e1       	ldi	r20, 0x14	; 20
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	86 ed       	ldi	r24, 0xD6	; 214
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	41 dd       	rcall	.-1406   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
    1350:	29 81       	ldd	r18, Y+1	; 0x01
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	44 e1       	ldi	r20, 0x14	; 20
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	6c e0       	ldi	r22, 0x0C	; 12
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	86 ed       	ldi	r24, 0xD6	; 214
    135e:	91 e0       	ldi	r25, 0x01	; 1
    1360:	38 dd       	rcall	.-1424   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
    1362:	2a 81       	ldd	r18, Y+2	; 0x02
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	44 e1       	ldi	r20, 0x14	; 20
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	68 e1       	ldi	r22, 0x18	; 24
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	86 ed       	ldi	r24, 0xD6	; 214
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	2f dd       	rcall	.-1442   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
    1374:	2b 81       	ldd	r18, Y+3	; 0x03
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	44 e1       	ldi	r20, 0x14	; 20
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	64 e2       	ldi	r22, 0x24	; 36
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	86 ed       	ldi	r24, 0xD6	; 214
    1382:	91 e0       	ldi	r25, 0x01	; 1
    1384:	26 dd       	rcall	.-1460   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
    1386:	2c 81       	ldd	r18, Y+4	; 0x04
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	44 e1       	ldi	r20, 0x14	; 20
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	60 e3       	ldi	r22, 0x30	; 48
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	86 ed       	ldi	r24, 0xD6	; 214
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	1d dd       	rcall	.-1478   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
    1398:	2d 81       	ldd	r18, Y+5	; 0x05
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	44 e1       	ldi	r20, 0x14	; 20
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	6c e3       	ldi	r22, 0x3C	; 60
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	86 ed       	ldi	r24, 0xD6	; 214
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	14 dd       	rcall	.-1496   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
    13aa:	2e 81       	ldd	r18, Y+6	; 0x06
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	44 e1       	ldi	r20, 0x14	; 20
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	68 e4       	ldi	r22, 0x48	; 72
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	86 ed       	ldi	r24, 0xD6	; 214
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	0b dd       	rcall	.-1514   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
    13bc:	2f 81       	ldd	r18, Y+7	; 0x07
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	44 e1       	ldi	r20, 0x14	; 20
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	64 e5       	ldi	r22, 0x54	; 84
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	86 ed       	ldi	r24, 0xD6	; 214
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	02 dd       	rcall	.-1532   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
    13ce:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <reflQueueCount>
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	44 e1       	ldi	r20, 0x14	; 20
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	6c e6       	ldi	r22, 0x6C	; 108
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	86 ed       	ldi	r24, 0xD6	; 214
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	f8 dc       	rcall	.-1552   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
    13e2:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <frontOfQueue>
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	cb 01       	movw	r24, r22
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	68 0f       	add	r22, r24
    13f0:	79 1f       	adc	r23, r25
    13f2:	66 0f       	add	r22, r22
    13f4:	77 1f       	adc	r23, r23
    13f6:	66 0f       	add	r22, r22
    13f8:	77 1f       	adc	r23, r23
    13fa:	25 e9       	ldi	r18, 0x95	; 149
    13fc:	31 e0       	ldi	r19, 0x01	; 1
    13fe:	44 e2       	ldi	r20, 0x24	; 36
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	86 ed       	ldi	r24, 0xD6	; 214
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	af dc       	rcall	.-1698   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    1408:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <backOfQueue>
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	cb 01       	movw	r24, r22
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	68 0f       	add	r22, r24
    1416:	79 1f       	adc	r23, r25
    1418:	66 0f       	add	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	66 0f       	add	r22, r22
    141e:	77 1f       	adc	r23, r23
    1420:	27 e9       	ldi	r18, 0x97	; 151
    1422:	31 e0       	ldi	r19, 0x01	; 1
    1424:	44 e2       	ldi	r20, 0x24	; 36
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	86 ed       	ldi	r24, 0xD6	; 214
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	9c dc       	rcall	.-1736   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    142e:	86 ed       	ldi	r24, 0xD6	; 214
    1430:	91 e0       	ldi	r25, 0x01	; 1
    1432:	01 dc       	rcall	.-2046   	; 0xc36 <_ZN11Framebuffer4showEv>
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	0f 91       	pop	r16
    143a:	ef 90       	pop	r14
    143c:	08 95       	ret

0000143e <_Z20menuDisplayItemCountv>:
}

void menuDisplayItemCount(){
	myDisplay.clear();
    143e:	86 ed       	ldi	r24, 0xD6	; 214
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	e8 db       	rcall	.-2096   	; 0xc14 <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(column(1),row(1),"On Belt:");
    1444:	2b ea       	ldi	r18, 0xAB	; 171
    1446:	31 e0       	ldi	r19, 0x01	; 1
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	86 ed       	ldi	r24, 0xD6	; 214
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	88 dc       	rcall	.-1776   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(9),row(1),reflQueueCount);
    1456:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <reflQueueCount>
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	60 e6       	ldi	r22, 0x60	; 96
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	86 ed       	ldi	r24, 0xD6	; 214
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	b4 dc       	rcall	.-1688   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(column(1),row(2),"Sorted:");
    146a:	24 eb       	ldi	r18, 0xB4	; 180
    146c:	31 e0       	ldi	r19, 0x01	; 1
    146e:	40 e1       	ldi	r20, 0x10	; 16
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	86 ed       	ldi	r24, 0xD6	; 214
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	75 dc       	rcall	.-1814   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(column(1),row(3),"B=");
    147c:	2c eb       	ldi	r18, 0xBC	; 188
    147e:	31 e0       	ldi	r19, 0x01	; 1
    1480:	40 e2       	ldi	r20, 0x20	; 32
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	86 ed       	ldi	r24, 0xD6	; 214
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	6c dc       	rcall	.-1832   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(3),row(3),blackCount);
    148e:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <blackCount>
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e2       	ldi	r20, 0x20	; 32
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	68 e1       	ldi	r22, 0x18	; 24
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	86 ed       	ldi	r24, 0xD6	; 214
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	98 dc       	rcall	.-1744   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(column(6),row(3),"W:");
    14a2:	2b e2       	ldi	r18, 0x2B	; 43
    14a4:	31 e0       	ldi	r19, 0x01	; 1
    14a6:	40 e2       	ldi	r20, 0x20	; 32
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	6c e3       	ldi	r22, 0x3C	; 60
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	86 ed       	ldi	r24, 0xD6	; 214
    14b0:	91 e0       	ldi	r25, 0x01	; 1
    14b2:	59 dc       	rcall	.-1870   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(8),row(3),whiteCount);
    14b4:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <whiteCount>
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	40 e2       	ldi	r20, 0x20	; 32
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	64 e5       	ldi	r22, 0x54	; 84
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	86 ed       	ldi	r24, 0xD6	; 214
    14c4:	91 e0       	ldi	r25, 0x01	; 1
	myDisplay.drawString(column(1),row(4),"S:");
    14c6:	85 dc       	rcall	.-1782   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
    14c8:	2e e2       	ldi	r18, 0x2E	; 46
    14ca:	31 e0       	ldi	r19, 0x01	; 1
    14cc:	40 e3       	ldi	r20, 0x30	; 48
    14ce:	50 e0       	ldi	r21, 0x00	; 0
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	86 ed       	ldi	r24, 0xD6	; 214
	myDisplay.drawNumber(column(3),row(4),steelCount);
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	46 dc       	rcall	.-1908   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    14da:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <steelCount>
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e3       	ldi	r20, 0x30	; 48
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	68 e1       	ldi	r22, 0x18	; 24
    14e6:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawString(column(6),row(4),"A:");
    14e8:	86 ed       	ldi	r24, 0xD6	; 214
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	72 dc       	rcall	.-1820   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
    14ee:	21 e3       	ldi	r18, 0x31	; 49
    14f0:	31 e0       	ldi	r19, 0x01	; 1
    14f2:	40 e3       	ldi	r20, 0x30	; 48
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	6c e3       	ldi	r22, 0x3C	; 60
    14f8:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawNumber(column(8),row(4),aluminumCount);
    14fa:	86 ed       	ldi	r24, 0xD6	; 214
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	33 dc       	rcall	.-1946   	; 0xd66 <_ZN11Framebuffer10drawStringEiiPKc>
    1500:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <aluminumCount>
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e3       	ldi	r20, 0x30	; 48
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	64 e5       	ldi	r22, 0x54	; 84
    150c:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.show();
    150e:	86 ed       	ldi	r24, 0xD6	; 214
    1510:	91 e0       	ldi	r25, 0x01	; 1
    1512:	5f dc       	rcall	.-1858   	; 0xdd2 <_ZN11Framebuffer10drawNumberEiii>
    1514:	86 ed       	ldi	r24, 0xD6	; 214
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	8e cb       	rjmp	.-2276   	; 0xc36 <_ZN11Framebuffer4showEv>
    151a:	08 95       	ret

0000151c <_Z9initMotorv>:
void motorForward(){
	MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_FORWARD;
}

void motorReverse(){
	MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_REVERSE;
    151c:	84 b1       	in	r24, 0x04	; 4
    151e:	81 61       	ori	r24, 0x11	; 17
    1520:	84 b9       	out	0x04, r24	; 4
    1522:	81 b1       	in	r24, 0x01	; 1
    1524:	80 6c       	ori	r24, 0xC0	; 192
    1526:	81 b9       	out	0x01, r24	; 1
    1528:	20 9a       	sbi	0x04, 0	; 4
    152a:	e0 eb       	ldi	r30, 0xB0	; 176
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	83 60       	ori	r24, 0x03	; 3
    1532:	80 83       	st	Z, r24
    1534:	80 81       	ld	r24, Z
    1536:	80 68       	ori	r24, 0x80	; 128
    1538:	80 83       	st	Z, r24
    153a:	e1 eb       	ldi	r30, 0xB1	; 177
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	81 60       	ori	r24, 0x01	; 1
    1542:	80 83       	st	Z, r24
    1544:	80 e8       	ldi	r24, 0x80	; 128
    1546:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    154a:	28 98       	cbi	0x05, 0	; 5
    154c:	08 95       	ret

0000154e <_Z10motorSpeedc>:
    154e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    1552:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1556:	08 95       	ret

00001558 <_Z12motorForwardv>:
    1558:	82 b1       	in	r24, 0x02	; 2
    155a:	8f 73       	andi	r24, 0x3F	; 63
    155c:	80 64       	ori	r24, 0x40	; 64
    155e:	82 b9       	out	0x02, r24	; 2
    1560:	08 95       	ret

00001562 <_Z10motorBrakev>:
}

void motorBrake(){
	MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_BRAKE;
    1562:	82 b1       	in	r24, 0x02	; 2
    1564:	8f 73       	andi	r24, 0x3F	; 63
    1566:	82 b9       	out	0x02, r24	; 2
    1568:	08 95       	ret

0000156a <_ZN7SSD130611sendCommandEh>:

void SSD1306::invert(uint8_t inverted) {
    if (inverted) {
        sendCommand(SSD1306_INVERTDISPLAY);
    } else {
        sendCommand(SSD1306_NORMALDISPLAY);
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	ec 01       	movw	r28, r24
    1572:	16 2f       	mov	r17, r22
    1574:	8f dc       	rcall	.-1762   	; 0xe94 <_ZN3I2C5startEv>
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	ce 01       	movw	r24, r28
    157a:	ba dc       	rcall	.-1676   	; 0xef0 <_ZN3I2C5writeEh>
    157c:	61 2f       	mov	r22, r17
    157e:	ce 01       	movw	r24, r28
    1580:	b7 dc       	rcall	.-1682   	; 0xef0 <_ZN3I2C5writeEh>
    1582:	ce 01       	movw	r24, r28
    1584:	ca dc       	rcall	.-1644   	; 0xf1a <_ZN3I2C4stopEv>
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	08 95       	ret

0000158e <_ZN7SSD1306C1Ev>:
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	ec 01       	movw	r28, r24
    1594:	76 dc       	rcall	.-1812   	; 0xe82 <_ZN3I2CC1Ev>
    1596:	68 e7       	ldi	r22, 0x78	; 120
    1598:	ce 01       	movw	r24, r28
    159a:	74 dc       	rcall	.-1816   	; 0xe84 <_ZN3I2C4initEh>
    159c:	6e ea       	ldi	r22, 0xAE	; 174
    159e:	ce 01       	movw	r24, r28
    15a0:	e4 df       	rcall	.-56     	; 0x156a <_ZN7SSD130611sendCommandEh>
    15a2:	65 ed       	ldi	r22, 0xD5	; 213
    15a4:	ce 01       	movw	r24, r28
    15a6:	e1 df       	rcall	.-62     	; 0x156a <_ZN7SSD130611sendCommandEh>
    15a8:	60 e8       	ldi	r22, 0x80	; 128
    15aa:	ce 01       	movw	r24, r28
    15ac:	de df       	rcall	.-68     	; 0x156a <_ZN7SSD130611sendCommandEh>
    15ae:	68 ea       	ldi	r22, 0xA8	; 168
    15b0:	ce 01       	movw	r24, r28
    15b2:	db df       	rcall	.-74     	; 0x156a <_ZN7SSD130611sendCommandEh>
    15b4:	6f e3       	ldi	r22, 0x3F	; 63
    15b6:	ce 01       	movw	r24, r28
    15b8:	d8 df       	rcall	.-80     	; 0x156a <_ZN7SSD130611sendCommandEh>
    15ba:	63 ed       	ldi	r22, 0xD3	; 211
    15bc:	ce 01       	movw	r24, r28
    15be:	d5 df       	rcall	.-86     	; 0x156a <_ZN7SSD130611sendCommandEh>
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	ce 01       	movw	r24, r28
    15c4:	d2 df       	rcall	.-92     	; 0x156a <_ZN7SSD130611sendCommandEh>
    15c6:	60 e4       	ldi	r22, 0x40	; 64
    15c8:	ce 01       	movw	r24, r28
    15ca:	cf df       	rcall	.-98     	; 0x156a <_ZN7SSD130611sendCommandEh>
    15cc:	6d e8       	ldi	r22, 0x8D	; 141
    15ce:	ce 01       	movw	r24, r28
    15d0:	cc df       	rcall	.-104    	; 0x156a <_ZN7SSD130611sendCommandEh>
    15d2:	64 e1       	ldi	r22, 0x14	; 20
    15d4:	ce 01       	movw	r24, r28
    15d6:	c9 df       	rcall	.-110    	; 0x156a <_ZN7SSD130611sendCommandEh>
    15d8:	60 e2       	ldi	r22, 0x20	; 32
    15da:	ce 01       	movw	r24, r28
    15dc:	c6 df       	rcall	.-116    	; 0x156a <_ZN7SSD130611sendCommandEh>
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	ce 01       	movw	r24, r28
    15e2:	c3 df       	rcall	.-122    	; 0x156a <_ZN7SSD130611sendCommandEh>
    15e4:	61 ea       	ldi	r22, 0xA1	; 161
    15e6:	ce 01       	movw	r24, r28
    15e8:	c0 df       	rcall	.-128    	; 0x156a <_ZN7SSD130611sendCommandEh>
    15ea:	68 ec       	ldi	r22, 0xC8	; 200
    15ec:	ce 01       	movw	r24, r28
    15ee:	bd df       	rcall	.-134    	; 0x156a <_ZN7SSD130611sendCommandEh>
    15f0:	6a ed       	ldi	r22, 0xDA	; 218
    15f2:	ce 01       	movw	r24, r28
    15f4:	ba df       	rcall	.-140    	; 0x156a <_ZN7SSD130611sendCommandEh>
    15f6:	62 e1       	ldi	r22, 0x12	; 18
    15f8:	ce 01       	movw	r24, r28
    15fa:	b7 df       	rcall	.-146    	; 0x156a <_ZN7SSD130611sendCommandEh>
    15fc:	61 e8       	ldi	r22, 0x81	; 129
    15fe:	ce 01       	movw	r24, r28
    1600:	b4 df       	rcall	.-152    	; 0x156a <_ZN7SSD130611sendCommandEh>
    1602:	6f ec       	ldi	r22, 0xCF	; 207
    1604:	ce 01       	movw	r24, r28
    1606:	b1 df       	rcall	.-158    	; 0x156a <_ZN7SSD130611sendCommandEh>
    1608:	69 ed       	ldi	r22, 0xD9	; 217
    160a:	ce 01       	movw	r24, r28
    160c:	ae df       	rcall	.-164    	; 0x156a <_ZN7SSD130611sendCommandEh>
    160e:	61 ef       	ldi	r22, 0xF1	; 241
    1610:	ce 01       	movw	r24, r28
    1612:	ab df       	rcall	.-170    	; 0x156a <_ZN7SSD130611sendCommandEh>
    1614:	6b ed       	ldi	r22, 0xDB	; 219
    1616:	ce 01       	movw	r24, r28
    1618:	a8 df       	rcall	.-176    	; 0x156a <_ZN7SSD130611sendCommandEh>
    161a:	60 e4       	ldi	r22, 0x40	; 64
    161c:	ce 01       	movw	r24, r28
    161e:	a5 df       	rcall	.-182    	; 0x156a <_ZN7SSD130611sendCommandEh>
    1620:	64 ea       	ldi	r22, 0xA4	; 164
    1622:	ce 01       	movw	r24, r28
    1624:	a2 df       	rcall	.-188    	; 0x156a <_ZN7SSD130611sendCommandEh>
    1626:	66 ea       	ldi	r22, 0xA6	; 166
    1628:	ce 01       	movw	r24, r28
    162a:	9f df       	rcall	.-194    	; 0x156a <_ZN7SSD130611sendCommandEh>
    162c:	6f ea       	ldi	r22, 0xAF	; 175
    162e:	ce 01       	movw	r24, r28
    1630:	9c df       	rcall	.-200    	; 0x156a <_ZN7SSD130611sendCommandEh>
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	08 95       	ret

00001638 <_ZN7SSD130615sendFramebufferEPh>:
    }
}

void SSD1306::sendFramebuffer(uint8_t *buffer) {
    1638:	cf 92       	push	r12
    163a:	df 92       	push	r13
    163c:	ef 92       	push	r14
    163e:	ff 92       	push	r15
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	08 2f       	mov	r16, r24
    164a:	19 2f       	mov	r17, r25
    164c:	7b 01       	movw	r14, r22
    sendCommand(SSD1306_COLUMNADDR);
    164e:	61 e2       	ldi	r22, 0x21	; 33
    1650:	8c df       	rcall	.-232    	; 0x156a <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	80 2f       	mov	r24, r16
    1656:	91 2f       	mov	r25, r17
    1658:	88 df       	rcall	.-240    	; 0x156a <_ZN7SSD130611sendCommandEh>
    sendCommand(0x7F);
    165a:	6f e7       	ldi	r22, 0x7F	; 127
    165c:	80 2f       	mov	r24, r16
    165e:	91 2f       	mov	r25, r17

    sendCommand(SSD1306_PAGEADDR);
    1660:	84 df       	rcall	.-248    	; 0x156a <_ZN7SSD130611sendCommandEh>
    1662:	62 e2       	ldi	r22, 0x22	; 34
    1664:	80 2f       	mov	r24, r16
    sendCommand(0x00);
    1666:	91 2f       	mov	r25, r17
    1668:	80 df       	rcall	.-256    	; 0x156a <_ZN7SSD130611sendCommandEh>
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	80 2f       	mov	r24, r16
    sendCommand(0x07);
    166e:	91 2f       	mov	r25, r17
    1670:	7c df       	rcall	.-264    	; 0x156a <_ZN7SSD130611sendCommandEh>
    1672:	67 e0       	ldi	r22, 0x07	; 7
    1674:	80 2f       	mov	r24, r16
    1676:	91 2f       	mov	r25, r17
    1678:	78 df       	rcall	.-272    	; 0x156a <_ZN7SSD130611sendCommandEh>

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) { //*** change to 32? was 64
        i2c.start();
    167a:	e7 01       	movw	r28, r14
    167c:	8c ef       	ldi	r24, 0xFC	; 252
    167e:	f8 1a       	sub	r15, r24
        i2c.write(0x40);
    1680:	80 2f       	mov	r24, r16
    1682:	91 2f       	mov	r25, r17
    1684:	07 dc       	rcall	.-2034   	; 0xe94 <_ZN3I2C5startEv>
    1686:	60 e4       	ldi	r22, 0x40	; 64
    1688:	80 2f       	mov	r24, r16
    168a:	91 2f       	mov	r25, r17
    168c:	31 dc       	rcall	.-1950   	; 0xef0 <_ZN3I2C5writeEh>
    168e:	6e 01       	movw	r12, r28
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
    1690:	80 e1       	ldi	r24, 0x10	; 16
    1692:	c8 0e       	add	r12, r24
    1694:	d1 1c       	adc	r13, r1
    1696:	69 91       	ld	r22, Y+
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) { //*** change to 32? was 64
        i2c.start();
        i2c.write(0x40);
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
    1698:	80 2f       	mov	r24, r16
    169a:	91 2f       	mov	r25, r17
    169c:	29 dc       	rcall	.-1966   	; 0xef0 <_ZN3I2C5writeEh>
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    169e:	cc 15       	cp	r28, r12
    16a0:	dd 05       	cpc	r29, r13
    16a2:	c9 f7       	brne	.-14     	; 0x1696 <_ZN7SSD130615sendFramebufferEPh+0x5e>
    16a4:	80 2f       	mov	r24, r16
    16a6:	91 2f       	mov	r25, r17
    sendCommand(0x07);

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) { //*** change to 32? was 64
    16a8:	38 dc       	rcall	.-1936   	; 0xf1a <_ZN3I2C4stopEv>
    16aa:	e6 01       	movw	r28, r12
    16ac:	ec 14       	cp	r14, r12
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    }
}
    16ae:	fd 04       	cpc	r15, r13
    16b0:	39 f7       	brne	.-50     	; 0x1680 <_ZN7SSD130615sendFramebufferEPh+0x48>
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	df 90       	pop	r13
    16c0:	cf 90       	pop	r12
    16c2:	08 95       	ret

000016c4 <_Z11initStepperv>:
	else if(((difference < 0) && (difference >= -100))){
		//difference = ((difference >= 0) ? difference : -difference) -100;
		rotateStepper(abs(difference), 0);
	}
	else if(difference >= 100){
		rotateStepper(abs(shortPath), 0);
    16c4:	81 b1       	in	r24, 0x01	; 1
    16c6:	8f 63       	ori	r24, 0x3F	; 63
    16c8:	81 b9       	out	0x01, r24	; 1
    16ca:	84 b5       	in	r24, 0x24	; 36
    16cc:	82 60       	ori	r24, 0x02	; 2
    16ce:	84 bd       	out	0x24, r24	; 36
    16d0:	80 e7       	ldi	r24, 0x70	; 112
    16d2:	87 bd       	out	0x27, r24	; 39
    16d4:	16 bc       	out	0x26, r1	; 38
    16d6:	08 95       	ret

000016d8 <_Z12startStepperv>:
    16d8:	ee e6       	ldi	r30, 0x6E	; 110
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	82 60       	ori	r24, 0x02	; 2
    16e0:	80 83       	st	Z, r24
    16e2:	a9 9a       	sbi	0x15, 1	; 21
    16e4:	85 b5       	in	r24, 0x25	; 37
    16e6:	85 60       	ori	r24, 0x05	; 5
    16e8:	85 bd       	out	0x25, r24	; 37
    16ea:	08 95       	ret

000016ec <_Z13rotateStepperii>:
    16ec:	bf 92       	push	r11
    16ee:	cf 92       	push	r12
    16f0:	df 92       	push	r13
    16f2:	ef 92       	push	r14
    16f4:	ff 92       	push	r15
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	18 16       	cp	r1, r24
    1700:	19 06       	cpc	r1, r25
    1702:	0c f0       	brlt	.+2      	; 0x1706 <_Z13rotateStepperii+0x1a>
    1704:	65 c0       	rjmp	.+202    	; 0x17d0 <_Z13rotateStepperii+0xe4>
    1706:	8b 01       	movw	r16, r22
    1708:	ec 01       	movw	r28, r24
    170a:	c1 2c       	mov	r12, r1
    170c:	d1 2c       	mov	r13, r1
    170e:	0f 2e       	mov	r0, r31
    1710:	f2 e1       	ldi	r31, 0x12	; 18
    1712:	bf 2e       	mov	r11, r31
    1714:	f0 2d       	mov	r31, r0
    1716:	0f 2e       	mov	r0, r31
    1718:	f7 ec       	ldi	r31, 0xC7	; 199
    171a:	ef 2e       	mov	r14, r31
    171c:	f1 2c       	mov	r15, r1
    171e:	f0 2d       	mov	r31, r0
    1720:	01 15       	cp	r16, r1
    1722:	11 05       	cpc	r17, r1
    1724:	d9 f0       	breq	.+54     	; 0x175c <_Z13rotateStepperii+0x70>
    1726:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <stepCurrentPosition>
    172a:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <stepCurrentPosition+0x1>
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <stepCurrentPosition+0x1>
    1734:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <stepCurrentPosition>
    1738:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <stepAPosition>
    173c:	8f 5f       	subi	r24, 0xFF	; 255
    173e:	83 70       	andi	r24, 0x03	; 3
    1740:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <stepAPosition>
    1744:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <stepCurrentPosition>
    1748:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <stepCurrentPosition+0x1>
    174c:	88 3c       	cpi	r24, 0xC8	; 200
    174e:	91 05       	cpc	r25, r1
    1750:	fc f0       	brlt	.+62     	; 0x1790 <_Z13rotateStepperii+0xa4>
    1752:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <stepCurrentPosition+0x1>
    1756:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <stepCurrentPosition>
    175a:	1a c0       	rjmp	.+52     	; 0x1790 <_Z13rotateStepperii+0xa4>
    175c:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <stepCurrentPosition>
    1760:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <stepCurrentPosition+0x1>
    1764:	89 2b       	or	r24, r25
    1766:	29 f4       	brne	.+10     	; 0x1772 <_Z13rotateStepperii+0x86>
    1768:	f0 92 df 05 	sts	0x05DF, r15	; 0x8005df <stepCurrentPosition+0x1>
    176c:	e0 92 de 05 	sts	0x05DE, r14	; 0x8005de <stepCurrentPosition>
    1770:	09 c0       	rjmp	.+18     	; 0x1784 <_Z13rotateStepperii+0x98>
    1772:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <stepCurrentPosition>
    1776:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <stepCurrentPosition+0x1>
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <stepCurrentPosition+0x1>
    1780:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <stepCurrentPosition>
    1784:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <stepAPosition>
    1788:	81 50       	subi	r24, 0x01	; 1
    178a:	83 70       	andi	r24, 0x03	; 3
    178c:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <stepAPosition>
    1790:	82 b1       	in	r24, 0x02	; 2
    1792:	e0 91 db 05 	lds	r30, 0x05DB	; 0x8005db <stepAPosition>
    1796:	80 7c       	andi	r24, 0xC0	; 192
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	e1 54       	subi	r30, 0x41	; 65
    179c:	fe 4f       	sbci	r31, 0xFE	; 254
    179e:	90 81       	ld	r25, Z
    17a0:	89 2b       	or	r24, r25
    17a2:	82 b9       	out	0x02, r24	; 2
    17a4:	8a e0       	ldi	r24, 0x0A	; 10
    17a6:	c8 16       	cp	r12, r24
    17a8:	d1 04       	cpc	r13, r1
    17aa:	14 f4       	brge	.+4      	; 0x17b0 <_Z13rotateStepperii+0xc4>
    17ac:	ba 94       	dec	r11
    17ae:	06 c0       	rjmp	.+12     	; 0x17bc <_Z13rotateStepperii+0xd0>
    17b0:	ce 01       	movw	r24, r28
    17b2:	8c 19       	sub	r24, r12
    17b4:	9d 09       	sbc	r25, r13
    17b6:	44 97       	sbiw	r24, 0x14	; 20
    17b8:	0c f4       	brge	.+2      	; 0x17bc <_Z13rotateStepperii+0xd0>
    17ba:	b3 94       	inc	r11
    17bc:	8b 2d       	mov	r24, r11
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	1c d1       	rcall	.+568    	; 0x19fa <_Z6mTimeri>
    17c2:	8f ef       	ldi	r24, 0xFF	; 255
    17c4:	c8 1a       	sub	r12, r24
    17c6:	d8 0a       	sbc	r13, r24
    17c8:	cc 15       	cp	r28, r12
    17ca:	dd 05       	cpc	r29, r13
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <_Z13rotateStepperii+0xe4>
    17ce:	a8 cf       	rjmp	.-176    	; 0x1720 <_Z13rotateStepperii+0x34>
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	df 90       	pop	r13
    17de:	cf 90       	pop	r12
    17e0:	bf 90       	pop	r11
    17e2:	08 95       	ret

000017e4 <_Z11homeStepperv>:
    17e4:	61 e0       	ldi	r22, 0x01	; 1
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	89 e1       	ldi	r24, 0x19	; 25
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	7f df       	rcall	.-258    	; 0x16ec <_Z13rotateStepperii>
    17ee:	66 9b       	sbis	0x0c, 6	; 12
    17f0:	07 c0       	rjmp	.+14     	; 0x1800 <_Z11homeStepperv+0x1c>
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	78 df       	rcall	.-272    	; 0x16ec <_Z13rotateStepperii>
    17fc:	66 99       	sbic	0x0c, 6	; 12
    17fe:	f9 cf       	rjmp	.-14     	; 0x17f2 <_Z11homeStepperv+0xe>
    1800:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <stepCurrentPosition+0x1>
    1804:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <stepCurrentPosition>
    1808:	08 95       	ret

0000180a <__vector_21>:
	}
}

ISR(TIMER0_COMPA_vect){
    180a:	1f 92       	push	r1
    180c:	0f 92       	push	r0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	0f 92       	push	r0
    1812:	11 24       	eor	r1, r1
    1814:	0b b6       	in	r0, 0x3b	; 59
    1816:	0f 92       	push	r0
    1818:	2f 93       	push	r18
    181a:	3f 93       	push	r19
    181c:	4f 93       	push	r20
    181e:	5f 93       	push	r21
    1820:	8f 93       	push	r24
    1822:	9f 93       	push	r25
    1824:	ef 93       	push	r30
    1826:	ff 93       	push	r31
	
	unsigned char nextItem = 0;
	int difference =  stepGoalPosition - stepCurrentPosition;
    1828:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <stepGoalPosition>
    182c:	90 91 dd 05 	lds	r25, 0x05DD	; 0x8005dd <stepGoalPosition+0x1>
    1830:	20 91 de 05 	lds	r18, 0x05DE	; 0x8005de <stepCurrentPosition>
    1834:	30 91 df 05 	lds	r19, 0x05DF	; 0x8005df <stepCurrentPosition+0x1>
    1838:	82 1b       	sub	r24, r18
    183a:	93 0b       	sbc	r25, r19
	unsigned char shortAbsDifference = ((difference >= 0) ? difference : -difference);//abs(difference)
    183c:	ac 01       	movw	r20, r24
    183e:	22 f4       	brpl	.+8      	; 0x1848 <__vector_21+0x3e>
    1840:	44 27       	eor	r20, r20
    1842:	55 27       	eor	r21, r21
    1844:	48 1b       	sub	r20, r24
    1846:	59 0b       	sbc	r21, r25
    1848:	24 2f       	mov	r18, r20
	
	//Find circular shortest distance
	if(shortAbsDifference > 100){
    184a:	45 36       	cpi	r20, 0x65	; 101
    184c:	10 f0       	brcs	.+4      	; 0x1852 <__vector_21+0x48>
		shortAbsDifference = 200 - shortAbsDifference;
    184e:	28 ec       	ldi	r18, 0xC8	; 200
    1850:	24 1b       	sub	r18, r20
	}

	//////////PLACE BLOCK INTO BIN ONCE CLOSE ENOUGH
	if(shortAbsDifference < CLOSE_ENOUGH){
    1852:	2f 30       	cpi	r18, 0x0F	; 15
    1854:	08 f0       	brcs	.+2      	; 0x1858 <__vector_21+0x4e>
    1856:	42 c0       	rjmp	.+132    	; 0x18dc <__vector_21+0xd2>
		PORTC |= 8;
    1858:	43 9a       	sbi	0x08, 3	; 8
		if(blockReady){
    185a:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <__data_end>
    185e:	33 23       	and	r19, r19
    1860:	51 f0       	breq	.+20     	; 0x1876 <__vector_21+0x6c>
			//////////MOTOR ON
			MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_FORWARD;
    1862:	32 b1       	in	r19, 0x02	; 2
    1864:	3f 73       	andi	r19, 0x3F	; 63
    1866:	30 64       	ori	r19, 0x40	; 64
    1868:	32 b9       	out	0x02, r19	; 2
			sDequeueRdy = 1;
    186a:	31 e0       	ldi	r19, 0x01	; 1
    186c:	30 93 d9 05 	sts	0x05D9, r19	; 0x8005d9 <sDequeueRdy>
			blockReady = 0;
    1870:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <__data_end>
    1874:	35 c0       	rjmp	.+106    	; 0x18e0 <__vector_21+0xd6>
		} 
		else if(!sDequeueRdy){
    1876:	30 91 d9 05 	lds	r19, 0x05D9	; 0x8005d9 <sDequeueRdy>
    187a:	31 11       	cpse	r19, r1
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <__vector_21+0x7c>
			stepperReady = 1;
    187e:	31 e0       	ldi	r19, 0x01	; 1
    1880:	30 93 da 05 	sts	0x05DA, r19	; 0x8005da <stepperReady>
    1884:	2d c0       	rjmp	.+90     	; 0x18e0 <__vector_21+0xd6>
		}
		else if(difference == 0){
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	59 f5       	brne	.+86     	; 0x18e0 <__vector_21+0xd6>
			PORTC |= 0x10;
    188a:	44 9a       	sbi	0x08, 4	; 8
			//Stepper Dequeue is ready and we have arrived at goal
			//////////DEQUEUE BLOCK
			if(reflQueueCount < 2){
    188c:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <reflQueueCount>
    1890:	82 30       	cpi	r24, 0x02	; 2
    1892:	18 f4       	brcc	.+6      	; 0x189a <__vector_21+0x90>
				reflQueueCount = 0;
    1894:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <reflQueueCount>
    1898:	1e c0       	rjmp	.+60     	; 0x18d6 <__vector_21+0xcc>
			}
			else{
				nextItem = (frontOfQueue+1) & 7;
    189a:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <frontOfQueue>
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	87 70       	andi	r24, 0x07	; 7
				if(reflQueue[frontOfQueue] != reflQueue[nextItem]){
    18a2:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <frontOfQueue>
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	e2 53       	subi	r30, 0x32	; 50
    18aa:	fe 4f       	sbci	r31, 0xFE	; 254
    18ac:	30 81       	ld	r19, Z
    18ae:	e8 2f       	mov	r30, r24
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	e2 53       	subi	r30, 0x32	; 50
    18b4:	fe 4f       	sbci	r31, 0xFE	; 254
    18b6:	90 81       	ld	r25, Z
    18b8:	39 17       	cp	r19, r25
    18ba:	19 f0       	breq	.+6      	; 0x18c2 <__vector_21+0xb8>
					delayStepper = 1;
    18bc:	91 e0       	ldi	r25, 0x01	; 1
    18be:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <delayStepper>
				}
				frontOfQueue = nextItem; //& 7 implements a rotating array pointer
    18c2:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <frontOfQueue>
				reflQueueCount--;
    18c6:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <reflQueueCount>
    18ca:	81 50       	subi	r24, 0x01	; 1
    18cc:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <reflQueueCount>
				reflQueueChange = 1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <reflQueueChange>
			}
			sDequeueRdy = 0;	
    18d6:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <sDequeueRdy>
    18da:	4b c0       	rjmp	.+150    	; 0x1972 <__vector_21+0x168>
		}
	}
	else{
		stepperReady = 0;
    18dc:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <stepperReady>
	}
	//////////MOVE TOWARDS GOAL POSITION
	if(((difference > 0) && (difference < 100)) || (difference < -100)){//***change to make up for faster direction of stepper
    18e0:	ac 01       	movw	r20, r24
    18e2:	41 50       	subi	r20, 0x01	; 1
    18e4:	51 09       	sbc	r21, r1
    18e6:	43 36       	cpi	r20, 0x63	; 99
    18e8:	51 05       	cpc	r21, r1
    18ea:	20 f0       	brcs	.+8      	; 0x18f4 <__vector_21+0xea>
    18ec:	8c 39       	cpi	r24, 0x9C	; 156
    18ee:	3f ef       	ldi	r19, 0xFF	; 255
    18f0:	93 07       	cpc	r25, r19
    18f2:	dc f4       	brge	.+54     	; 0x192a <__vector_21+0x120>
		stepCurrentPosition++;
    18f4:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <stepCurrentPosition>
    18f8:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <stepCurrentPosition+0x1>
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <stepCurrentPosition+0x1>
    1902:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <stepCurrentPosition>
		if(stepCurrentPosition > 199){
    1906:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <stepCurrentPosition>
    190a:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <stepCurrentPosition+0x1>
    190e:	88 3c       	cpi	r24, 0xC8	; 200
    1910:	91 05       	cpc	r25, r1
    1912:	24 f0       	brlt	.+8      	; 0x191c <__vector_21+0x112>
			stepCurrentPosition = 0;
    1914:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <stepCurrentPosition+0x1>
    1918:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <stepCurrentPosition>
		}
		stepAPosition = (stepAPosition + 1) & 3; //& 3 is a bitwise %4, creates a circular loop through stepArray	
    191c:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <stepAPosition>
    1920:	8f 5f       	subi	r24, 0xFF	; 255
    1922:	83 70       	andi	r24, 0x03	; 3
    1924:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <stepAPosition>
    1928:	24 c0       	rjmp	.+72     	; 0x1972 <__vector_21+0x168>
	}
	else if(((difference < 0) && (difference >= -100)) || (difference >= 100)){
    192a:	ac 01       	movw	r20, r24
    192c:	4c 59       	subi	r20, 0x9C	; 156
    192e:	5f 4f       	sbci	r21, 0xFF	; 255
    1930:	44 36       	cpi	r20, 0x64	; 100
    1932:	51 05       	cpc	r21, r1
    1934:	18 f0       	brcs	.+6      	; 0x193c <__vector_21+0x132>
    1936:	84 36       	cpi	r24, 0x64	; 100
    1938:	91 05       	cpc	r25, r1
    193a:	dc f0       	brlt	.+54     	; 0x1972 <__vector_21+0x168>
		stepCurrentPosition--;
    193c:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <stepCurrentPosition>
    1940:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <stepCurrentPosition+0x1>
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <stepCurrentPosition+0x1>
    194a:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <stepCurrentPosition>
		if(stepCurrentPosition < 0){
    194e:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <stepCurrentPosition>
    1952:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <stepCurrentPosition+0x1>
    1956:	99 23       	and	r25, r25
    1958:	34 f4       	brge	.+12     	; 0x1966 <__vector_21+0x15c>
			stepCurrentPosition = 199;
    195a:	87 ec       	ldi	r24, 0xC7	; 199
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <stepCurrentPosition+0x1>
    1962:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <stepCurrentPosition>
		}
		//***
		stepAPosition = (stepAPosition - 1) & 3; //& 3 is a bitwise %4, creates a circular loop through stepArray
    1966:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <stepAPosition>
    196a:	81 50       	subi	r24, 0x01	; 1
    196c:	83 70       	andi	r24, 0x03	; 3
    196e:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <stepAPosition>
	}

	PORTA = (PORTA & 0b11000000) | stepArray[stepAPosition];
    1972:	82 b1       	in	r24, 0x02	; 2
    1974:	e0 91 db 05 	lds	r30, 0x05DB	; 0x8005db <stepAPosition>
    1978:	80 7c       	andi	r24, 0xC0	; 192
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	e1 54       	subi	r30, 0x41	; 65
    197e:	fe 4f       	sbci	r31, 0xFE	; 254
    1980:	90 81       	ld	r25, Z
    1982:	89 2b       	or	r24, r25
    1984:	82 b9       	out	0x02, r24	; 2
	//PORTC = stepArray[stepAPosition];

	//////////ACCELERATION/DECELERATION ***
	if(shortAbsDifference > 30 && stepperDelay > MIN_STEPPER_DELAY){
    1986:	2f 31       	cpi	r18, 0x1F	; 31
    1988:	a0 f0       	brcs	.+40     	; 0x19b2 <__vector_21+0x1a8>
    198a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <stepperDelay>
    198e:	8a 34       	cpi	r24, 0x4A	; 74
    1990:	50 f4       	brcc	.+20     	; 0x19a6 <__vector_21+0x19c>
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <__vector_21+0x1a8>
		stepperDelay -= STEPPER_ACCELERATION_RATE; //+= ~ 1 ms
	}
	else if(shortAbsDifference < NUMBER_STEPS_DECELERATION && stepperDelay <= MAX_STEPPER_DELAY){
    1994:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <stepperDelay>
    1998:	81 37       	cpi	r24, 0x71	; 113
    199a:	70 f0       	brcs	.+28     	; 0x19b8 <__vector_21+0x1ae>
		stepperDelay += STEPPER_ACCELERATION_RATE;
	}
	//Set the initial value of the timer counter to 0
	TCNT0 = 0x0;
    199c:	16 bc       	out	0x26, r1	; 38
	//Sets stepper delay to max value
	OCR0A = stepperDelay;
    199e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <stepperDelay>
    19a2:	87 bd       	out	0x27, r24	; 39
    19a4:	0f c0       	rjmp	.+30     	; 0x19c4 <__vector_21+0x1ba>
	PORTA = (PORTA & 0b11000000) | stepArray[stepAPosition];
	//PORTC = stepArray[stepAPosition];

	//////////ACCELERATION/DECELERATION ***
	if(shortAbsDifference > 30 && stepperDelay > MIN_STEPPER_DELAY){
		stepperDelay -= STEPPER_ACCELERATION_RATE; //+= ~ 1 ms
    19a6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <stepperDelay>
    19aa:	84 50       	subi	r24, 0x04	; 4
    19ac:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <stepperDelay>
    19b0:	f5 cf       	rjmp	.-22     	; 0x199c <__vector_21+0x192>
	}
	else if(shortAbsDifference < NUMBER_STEPS_DECELERATION && stepperDelay <= MAX_STEPPER_DELAY){
    19b2:	2b 30       	cpi	r18, 0x0B	; 11
    19b4:	78 f3       	brcs	.-34     	; 0x1994 <__vector_21+0x18a>
    19b6:	f2 cf       	rjmp	.-28     	; 0x199c <__vector_21+0x192>
		stepperDelay += STEPPER_ACCELERATION_RATE;
    19b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <stepperDelay>
    19bc:	8c 5f       	subi	r24, 0xFC	; 252
    19be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <stepperDelay>
    19c2:	ec cf       	rjmp	.-40     	; 0x199c <__vector_21+0x192>
	}
	//Set the initial value of the timer counter to 0
	TCNT0 = 0x0;
	//Sets stepper delay to max value
	OCR0A = stepperDelay;
    19c4:	ff 91       	pop	r31
    19c6:	ef 91       	pop	r30
    19c8:	9f 91       	pop	r25
    19ca:	8f 91       	pop	r24
    19cc:	5f 91       	pop	r21
    19ce:	4f 91       	pop	r20
    19d0:	3f 91       	pop	r19
    19d2:	2f 91       	pop	r18
    19d4:	0f 90       	pop	r0
    19d6:	0b be       	out	0x3b, r0	; 59
    19d8:	0f 90       	pop	r0
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	0f 90       	pop	r0
    19de:	1f 90       	pop	r1
    19e0:	18 95       	reti

000019e2 <_Z9initTimerv>:
#include "timer.h"

void initTimer(void){
	//Set the waveform generation mode bit to clear timer
	//on Compare Math mode (CTC) only
	TCCR1B |= _BV(WGM12);
    19e2:	e1 e8       	ldi	r30, 0x81	; 129
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	88 60       	ori	r24, 0x08	; 8
    19ea:	80 83       	st	Z, r24
	
	//Set output compare register for 1000 cycles (1 ms)
	OCR1A = 0x3e8;
    19ec:	88 ee       	ldi	r24, 0xE8	; 232
    19ee:	93 e0       	ldi	r25, 0x03	; 3
    19f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    19f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    19f8:	08 95       	ret

000019fa <_Z6mTimeri>:
}

//Timer function
void mTimer(int count){
    19fa:	ac 01       	movw	r20, r24
	int i = 0;
	
	//Enable
	//Sets bit 0 of the Timer/Counter control register (prescaler)
	//CS = 0b010 (8 MHz Clock prescaled by 1/8)
	TCCR1B |= _BV(CS11);
    19fc:	e1 e8       	ldi	r30, 0x81	; 129
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	90 81       	ld	r25, Z
    1a02:	92 60       	ori	r25, 0x02	; 2
    1a04:	90 83       	st	Z, r25
	
	//Set the initial value of the timer counter to 0
	TCNT1 = 0x0;
    1a06:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1a0a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	//Clear the interrupt flag and begin timer
	TIFR1 |= _BV(OCF1A);
    1a0e:	b1 9a       	sbi	0x16, 1	; 22
	OCR1A = 0x3e8;
}

//Timer function
void mTimer(int count){
	int i = 0;
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
	
	//Clear the interrupt flag and begin timer
	TIFR1 |= _BV(OCF1A);
	
	//Poll the timer to determine when the timer has reached OCR1A
	while(i<count){
    1a14:	24 17       	cp	r18, r20
    1a16:	35 07       	cpc	r19, r21
    1a18:	44 f4       	brge	.+16     	; 0x1a2a <_Z6mTimeri+0x30>

		if((TIFR1 & 0x02) == 0x02){
    1a1a:	b1 99       	sbic	0x16, 1	; 22
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <_Z6mTimeri+0x28>
    1a1e:	b1 9b       	sbis	0x16, 1	; 22
    1a20:	fe cf       	rjmp	.-4      	; 0x1a1e <_Z6mTimeri+0x24>
			//Clear the interrupt flag by writing a one to the bit
			TIFR1 |= _BV(OCF1A);
    1a22:	b1 9a       	sbi	0x16, 1	; 22
			
			i++; //Increment the loop counter
    1a24:	2f 5f       	subi	r18, 0xFF	; 255
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	f5 cf       	rjmp	.-22     	; 0x1a14 <_Z6mTimeri+0x1a>
		}
	}
	TCCR1B &= ~DISABLE_TIMER1;
    1a2a:	e1 e8       	ldi	r30, 0x81	; 129
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	88 7f       	andi	r24, 0xF8	; 248
    1a32:	80 83       	st	Z, r24
    1a34:	08 95       	ret

00001a36 <__tablejump2__>:
    1a36:	ee 0f       	add	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	00 24       	eor	r0, r0
    1a3c:	00 1c       	adc	r0, r0
    1a3e:	0b be       	out	0x3b, r0	; 59
    1a40:	07 90       	elpm	r0, Z+
    1a42:	f6 91       	elpm	r31, Z
    1a44:	e0 2d       	mov	r30, r0
    1a46:	09 94       	ijmp

00001a48 <sprintf>:
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	2e 97       	sbiw	r28, 0x0e	; 14
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	0d 89       	ldd	r16, Y+21	; 0x15
    1a62:	1e 89       	ldd	r17, Y+22	; 0x16
    1a64:	86 e0       	ldi	r24, 0x06	; 6
    1a66:	8c 83       	std	Y+4, r24	; 0x04
    1a68:	1a 83       	std	Y+2, r17	; 0x02
    1a6a:	09 83       	std	Y+1, r16	; 0x01
    1a6c:	8f ef       	ldi	r24, 0xFF	; 255
    1a6e:	9f e7       	ldi	r25, 0x7F	; 127
    1a70:	9e 83       	std	Y+6, r25	; 0x06
    1a72:	8d 83       	std	Y+5, r24	; 0x05
    1a74:	ae 01       	movw	r20, r28
    1a76:	47 5e       	subi	r20, 0xE7	; 231
    1a78:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7a:	6f 89       	ldd	r22, Y+23	; 0x17
    1a7c:	78 8d       	ldd	r23, Y+24	; 0x18
    1a7e:	ce 01       	movw	r24, r28
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	10 d0       	rcall	.+32     	; 0x1aa4 <vfprintf>
    1a84:	ef 81       	ldd	r30, Y+7	; 0x07
    1a86:	f8 85       	ldd	r31, Y+8	; 0x08
    1a88:	e0 0f       	add	r30, r16
    1a8a:	f1 1f       	adc	r31, r17
    1a8c:	10 82       	st	Z, r1
    1a8e:	2e 96       	adiw	r28, 0x0e	; 14
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	08 95       	ret

00001aa4 <vfprintf>:
    1aa4:	2f 92       	push	r2
    1aa6:	3f 92       	push	r3
    1aa8:	4f 92       	push	r4
    1aaa:	5f 92       	push	r5
    1aac:	6f 92       	push	r6
    1aae:	7f 92       	push	r7
    1ab0:	8f 92       	push	r8
    1ab2:	9f 92       	push	r9
    1ab4:	af 92       	push	r10
    1ab6:	bf 92       	push	r11
    1ab8:	cf 92       	push	r12
    1aba:	df 92       	push	r13
    1abc:	ef 92       	push	r14
    1abe:	ff 92       	push	r15
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	2b 97       	sbiw	r28, 0x0b	; 11
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	6c 01       	movw	r12, r24
    1ada:	7b 01       	movw	r14, r22
    1adc:	8a 01       	movw	r16, r20
    1ade:	fc 01       	movw	r30, r24
    1ae0:	17 82       	std	Z+7, r1	; 0x07
    1ae2:	16 82       	std	Z+6, r1	; 0x06
    1ae4:	83 81       	ldd	r24, Z+3	; 0x03
    1ae6:	81 ff       	sbrs	r24, 1
    1ae8:	bf c1       	rjmp	.+894    	; 0x1e68 <vfprintf+0x3c4>
    1aea:	ce 01       	movw	r24, r28
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	3c 01       	movw	r6, r24
    1af0:	f6 01       	movw	r30, r12
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	f7 01       	movw	r30, r14
    1af6:	93 fd       	sbrc	r25, 3
    1af8:	85 91       	lpm	r24, Z+
    1afa:	93 ff       	sbrs	r25, 3
    1afc:	81 91       	ld	r24, Z+
    1afe:	7f 01       	movw	r14, r30
    1b00:	88 23       	and	r24, r24
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <vfprintf+0x62>
    1b04:	ad c1       	rjmp	.+858    	; 0x1e60 <vfprintf+0x3bc>
    1b06:	85 32       	cpi	r24, 0x25	; 37
    1b08:	39 f4       	brne	.+14     	; 0x1b18 <vfprintf+0x74>
    1b0a:	93 fd       	sbrc	r25, 3
    1b0c:	85 91       	lpm	r24, Z+
    1b0e:	93 ff       	sbrs	r25, 3
    1b10:	81 91       	ld	r24, Z+
    1b12:	7f 01       	movw	r14, r30
    1b14:	85 32       	cpi	r24, 0x25	; 37
    1b16:	21 f4       	brne	.+8      	; 0x1b20 <vfprintf+0x7c>
    1b18:	b6 01       	movw	r22, r12
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	d6 d1       	rcall	.+940    	; 0x1eca <fputc>
    1b1e:	e8 cf       	rjmp	.-48     	; 0x1af0 <vfprintf+0x4c>
    1b20:	91 2c       	mov	r9, r1
    1b22:	21 2c       	mov	r2, r1
    1b24:	31 2c       	mov	r3, r1
    1b26:	ff e1       	ldi	r31, 0x1F	; 31
    1b28:	f3 15       	cp	r31, r3
    1b2a:	d8 f0       	brcs	.+54     	; 0x1b62 <vfprintf+0xbe>
    1b2c:	8b 32       	cpi	r24, 0x2B	; 43
    1b2e:	79 f0       	breq	.+30     	; 0x1b4e <vfprintf+0xaa>
    1b30:	38 f4       	brcc	.+14     	; 0x1b40 <vfprintf+0x9c>
    1b32:	80 32       	cpi	r24, 0x20	; 32
    1b34:	79 f0       	breq	.+30     	; 0x1b54 <vfprintf+0xb0>
    1b36:	83 32       	cpi	r24, 0x23	; 35
    1b38:	a1 f4       	brne	.+40     	; 0x1b62 <vfprintf+0xbe>
    1b3a:	23 2d       	mov	r18, r3
    1b3c:	20 61       	ori	r18, 0x10	; 16
    1b3e:	1d c0       	rjmp	.+58     	; 0x1b7a <vfprintf+0xd6>
    1b40:	8d 32       	cpi	r24, 0x2D	; 45
    1b42:	61 f0       	breq	.+24     	; 0x1b5c <vfprintf+0xb8>
    1b44:	80 33       	cpi	r24, 0x30	; 48
    1b46:	69 f4       	brne	.+26     	; 0x1b62 <vfprintf+0xbe>
    1b48:	23 2d       	mov	r18, r3
    1b4a:	21 60       	ori	r18, 0x01	; 1
    1b4c:	16 c0       	rjmp	.+44     	; 0x1b7a <vfprintf+0xd6>
    1b4e:	83 2d       	mov	r24, r3
    1b50:	82 60       	ori	r24, 0x02	; 2
    1b52:	38 2e       	mov	r3, r24
    1b54:	e3 2d       	mov	r30, r3
    1b56:	e4 60       	ori	r30, 0x04	; 4
    1b58:	3e 2e       	mov	r3, r30
    1b5a:	2a c0       	rjmp	.+84     	; 0x1bb0 <vfprintf+0x10c>
    1b5c:	f3 2d       	mov	r31, r3
    1b5e:	f8 60       	ori	r31, 0x08	; 8
    1b60:	1d c0       	rjmp	.+58     	; 0x1b9c <vfprintf+0xf8>
    1b62:	37 fc       	sbrc	r3, 7
    1b64:	2d c0       	rjmp	.+90     	; 0x1bc0 <vfprintf+0x11c>
    1b66:	20 ed       	ldi	r18, 0xD0	; 208
    1b68:	28 0f       	add	r18, r24
    1b6a:	2a 30       	cpi	r18, 0x0A	; 10
    1b6c:	40 f0       	brcs	.+16     	; 0x1b7e <vfprintf+0xda>
    1b6e:	8e 32       	cpi	r24, 0x2E	; 46
    1b70:	b9 f4       	brne	.+46     	; 0x1ba0 <vfprintf+0xfc>
    1b72:	36 fc       	sbrc	r3, 6
    1b74:	75 c1       	rjmp	.+746    	; 0x1e60 <vfprintf+0x3bc>
    1b76:	23 2d       	mov	r18, r3
    1b78:	20 64       	ori	r18, 0x40	; 64
    1b7a:	32 2e       	mov	r3, r18
    1b7c:	19 c0       	rjmp	.+50     	; 0x1bb0 <vfprintf+0x10c>
    1b7e:	36 fe       	sbrs	r3, 6
    1b80:	06 c0       	rjmp	.+12     	; 0x1b8e <vfprintf+0xea>
    1b82:	8a e0       	ldi	r24, 0x0A	; 10
    1b84:	98 9e       	mul	r9, r24
    1b86:	20 0d       	add	r18, r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	92 2e       	mov	r9, r18
    1b8c:	11 c0       	rjmp	.+34     	; 0x1bb0 <vfprintf+0x10c>
    1b8e:	ea e0       	ldi	r30, 0x0A	; 10
    1b90:	2e 9e       	mul	r2, r30
    1b92:	20 0d       	add	r18, r0
    1b94:	11 24       	eor	r1, r1
    1b96:	22 2e       	mov	r2, r18
    1b98:	f3 2d       	mov	r31, r3
    1b9a:	f0 62       	ori	r31, 0x20	; 32
    1b9c:	3f 2e       	mov	r3, r31
    1b9e:	08 c0       	rjmp	.+16     	; 0x1bb0 <vfprintf+0x10c>
    1ba0:	8c 36       	cpi	r24, 0x6C	; 108
    1ba2:	21 f4       	brne	.+8      	; 0x1bac <vfprintf+0x108>
    1ba4:	83 2d       	mov	r24, r3
    1ba6:	80 68       	ori	r24, 0x80	; 128
    1ba8:	38 2e       	mov	r3, r24
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <vfprintf+0x10c>
    1bac:	88 36       	cpi	r24, 0x68	; 104
    1bae:	41 f4       	brne	.+16     	; 0x1bc0 <vfprintf+0x11c>
    1bb0:	f7 01       	movw	r30, r14
    1bb2:	93 fd       	sbrc	r25, 3
    1bb4:	85 91       	lpm	r24, Z+
    1bb6:	93 ff       	sbrs	r25, 3
    1bb8:	81 91       	ld	r24, Z+
    1bba:	7f 01       	movw	r14, r30
    1bbc:	81 11       	cpse	r24, r1
    1bbe:	b3 cf       	rjmp	.-154    	; 0x1b26 <vfprintf+0x82>
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	9f 7d       	andi	r25, 0xDF	; 223
    1bc4:	95 54       	subi	r25, 0x45	; 69
    1bc6:	93 30       	cpi	r25, 0x03	; 3
    1bc8:	28 f4       	brcc	.+10     	; 0x1bd4 <vfprintf+0x130>
    1bca:	0c 5f       	subi	r16, 0xFC	; 252
    1bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bce:	9f e3       	ldi	r25, 0x3F	; 63
    1bd0:	99 83       	std	Y+1, r25	; 0x01
    1bd2:	0d c0       	rjmp	.+26     	; 0x1bee <vfprintf+0x14a>
    1bd4:	83 36       	cpi	r24, 0x63	; 99
    1bd6:	31 f0       	breq	.+12     	; 0x1be4 <vfprintf+0x140>
    1bd8:	83 37       	cpi	r24, 0x73	; 115
    1bda:	71 f0       	breq	.+28     	; 0x1bf8 <vfprintf+0x154>
    1bdc:	83 35       	cpi	r24, 0x53	; 83
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <vfprintf+0x13e>
    1be0:	55 c0       	rjmp	.+170    	; 0x1c8c <vfprintf+0x1e8>
    1be2:	20 c0       	rjmp	.+64     	; 0x1c24 <vfprintf+0x180>
    1be4:	f8 01       	movw	r30, r16
    1be6:	80 81       	ld	r24, Z
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	0e 5f       	subi	r16, 0xFE	; 254
    1bec:	1f 4f       	sbci	r17, 0xFF	; 255
    1bee:	88 24       	eor	r8, r8
    1bf0:	83 94       	inc	r8
    1bf2:	91 2c       	mov	r9, r1
    1bf4:	53 01       	movw	r10, r6
    1bf6:	12 c0       	rjmp	.+36     	; 0x1c1c <vfprintf+0x178>
    1bf8:	28 01       	movw	r4, r16
    1bfa:	f2 e0       	ldi	r31, 0x02	; 2
    1bfc:	4f 0e       	add	r4, r31
    1bfe:	51 1c       	adc	r5, r1
    1c00:	f8 01       	movw	r30, r16
    1c02:	a0 80       	ld	r10, Z
    1c04:	b1 80       	ldd	r11, Z+1	; 0x01
    1c06:	36 fe       	sbrs	r3, 6
    1c08:	03 c0       	rjmp	.+6      	; 0x1c10 <vfprintf+0x16c>
    1c0a:	69 2d       	mov	r22, r9
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <vfprintf+0x170>
    1c10:	6f ef       	ldi	r22, 0xFF	; 255
    1c12:	7f ef       	ldi	r23, 0xFF	; 255
    1c14:	c5 01       	movw	r24, r10
    1c16:	4e d1       	rcall	.+668    	; 0x1eb4 <strnlen>
    1c18:	4c 01       	movw	r8, r24
    1c1a:	82 01       	movw	r16, r4
    1c1c:	f3 2d       	mov	r31, r3
    1c1e:	ff 77       	andi	r31, 0x7F	; 127
    1c20:	3f 2e       	mov	r3, r31
    1c22:	15 c0       	rjmp	.+42     	; 0x1c4e <vfprintf+0x1aa>
    1c24:	28 01       	movw	r4, r16
    1c26:	22 e0       	ldi	r18, 0x02	; 2
    1c28:	42 0e       	add	r4, r18
    1c2a:	51 1c       	adc	r5, r1
    1c2c:	f8 01       	movw	r30, r16
    1c2e:	a0 80       	ld	r10, Z
    1c30:	b1 80       	ldd	r11, Z+1	; 0x01
    1c32:	36 fe       	sbrs	r3, 6
    1c34:	03 c0       	rjmp	.+6      	; 0x1c3c <vfprintf+0x198>
    1c36:	69 2d       	mov	r22, r9
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <vfprintf+0x19c>
    1c3c:	6f ef       	ldi	r22, 0xFF	; 255
    1c3e:	7f ef       	ldi	r23, 0xFF	; 255
    1c40:	c5 01       	movw	r24, r10
    1c42:	2d d1       	rcall	.+602    	; 0x1e9e <strnlen_P>
    1c44:	4c 01       	movw	r8, r24
    1c46:	f3 2d       	mov	r31, r3
    1c48:	f0 68       	ori	r31, 0x80	; 128
    1c4a:	3f 2e       	mov	r3, r31
    1c4c:	82 01       	movw	r16, r4
    1c4e:	33 fc       	sbrc	r3, 3
    1c50:	19 c0       	rjmp	.+50     	; 0x1c84 <vfprintf+0x1e0>
    1c52:	82 2d       	mov	r24, r2
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	88 16       	cp	r8, r24
    1c58:	99 06       	cpc	r9, r25
    1c5a:	a0 f4       	brcc	.+40     	; 0x1c84 <vfprintf+0x1e0>
    1c5c:	b6 01       	movw	r22, r12
    1c5e:	80 e2       	ldi	r24, 0x20	; 32
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	33 d1       	rcall	.+614    	; 0x1eca <fputc>
    1c64:	2a 94       	dec	r2
    1c66:	f5 cf       	rjmp	.-22     	; 0x1c52 <vfprintf+0x1ae>
    1c68:	f5 01       	movw	r30, r10
    1c6a:	37 fc       	sbrc	r3, 7
    1c6c:	85 91       	lpm	r24, Z+
    1c6e:	37 fe       	sbrs	r3, 7
    1c70:	81 91       	ld	r24, Z+
    1c72:	5f 01       	movw	r10, r30
    1c74:	b6 01       	movw	r22, r12
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	28 d1       	rcall	.+592    	; 0x1eca <fputc>
    1c7a:	21 10       	cpse	r2, r1
    1c7c:	2a 94       	dec	r2
    1c7e:	21 e0       	ldi	r18, 0x01	; 1
    1c80:	82 1a       	sub	r8, r18
    1c82:	91 08       	sbc	r9, r1
    1c84:	81 14       	cp	r8, r1
    1c86:	91 04       	cpc	r9, r1
    1c88:	79 f7       	brne	.-34     	; 0x1c68 <vfprintf+0x1c4>
    1c8a:	e1 c0       	rjmp	.+450    	; 0x1e4e <vfprintf+0x3aa>
    1c8c:	84 36       	cpi	r24, 0x64	; 100
    1c8e:	11 f0       	breq	.+4      	; 0x1c94 <vfprintf+0x1f0>
    1c90:	89 36       	cpi	r24, 0x69	; 105
    1c92:	39 f5       	brne	.+78     	; 0x1ce2 <vfprintf+0x23e>
    1c94:	f8 01       	movw	r30, r16
    1c96:	37 fe       	sbrs	r3, 7
    1c98:	07 c0       	rjmp	.+14     	; 0x1ca8 <vfprintf+0x204>
    1c9a:	60 81       	ld	r22, Z
    1c9c:	71 81       	ldd	r23, Z+1	; 0x01
    1c9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ca0:	93 81       	ldd	r25, Z+3	; 0x03
    1ca2:	0c 5f       	subi	r16, 0xFC	; 252
    1ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca6:	08 c0       	rjmp	.+16     	; 0x1cb8 <vfprintf+0x214>
    1ca8:	60 81       	ld	r22, Z
    1caa:	71 81       	ldd	r23, Z+1	; 0x01
    1cac:	07 2e       	mov	r0, r23
    1cae:	00 0c       	add	r0, r0
    1cb0:	88 0b       	sbc	r24, r24
    1cb2:	99 0b       	sbc	r25, r25
    1cb4:	0e 5f       	subi	r16, 0xFE	; 254
    1cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb8:	f3 2d       	mov	r31, r3
    1cba:	ff 76       	andi	r31, 0x6F	; 111
    1cbc:	3f 2e       	mov	r3, r31
    1cbe:	97 ff       	sbrs	r25, 7
    1cc0:	09 c0       	rjmp	.+18     	; 0x1cd4 <vfprintf+0x230>
    1cc2:	90 95       	com	r25
    1cc4:	80 95       	com	r24
    1cc6:	70 95       	com	r23
    1cc8:	61 95       	neg	r22
    1cca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ccc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cce:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd0:	f0 68       	ori	r31, 0x80	; 128
    1cd2:	3f 2e       	mov	r3, r31
    1cd4:	2a e0       	ldi	r18, 0x0A	; 10
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	a3 01       	movw	r20, r6
    1cda:	33 d1       	rcall	.+614    	; 0x1f42 <__ultoa_invert>
    1cdc:	88 2e       	mov	r8, r24
    1cde:	86 18       	sub	r8, r6
    1ce0:	44 c0       	rjmp	.+136    	; 0x1d6a <vfprintf+0x2c6>
    1ce2:	85 37       	cpi	r24, 0x75	; 117
    1ce4:	31 f4       	brne	.+12     	; 0x1cf2 <vfprintf+0x24e>
    1ce6:	23 2d       	mov	r18, r3
    1ce8:	2f 7e       	andi	r18, 0xEF	; 239
    1cea:	b2 2e       	mov	r11, r18
    1cec:	2a e0       	ldi	r18, 0x0A	; 10
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	25 c0       	rjmp	.+74     	; 0x1d3c <vfprintf+0x298>
    1cf2:	93 2d       	mov	r25, r3
    1cf4:	99 7f       	andi	r25, 0xF9	; 249
    1cf6:	b9 2e       	mov	r11, r25
    1cf8:	8f 36       	cpi	r24, 0x6F	; 111
    1cfa:	c1 f0       	breq	.+48     	; 0x1d2c <vfprintf+0x288>
    1cfc:	18 f4       	brcc	.+6      	; 0x1d04 <vfprintf+0x260>
    1cfe:	88 35       	cpi	r24, 0x58	; 88
    1d00:	79 f0       	breq	.+30     	; 0x1d20 <vfprintf+0x27c>
    1d02:	ae c0       	rjmp	.+348    	; 0x1e60 <vfprintf+0x3bc>
    1d04:	80 37       	cpi	r24, 0x70	; 112
    1d06:	19 f0       	breq	.+6      	; 0x1d0e <vfprintf+0x26a>
    1d08:	88 37       	cpi	r24, 0x78	; 120
    1d0a:	21 f0       	breq	.+8      	; 0x1d14 <vfprintf+0x270>
    1d0c:	a9 c0       	rjmp	.+338    	; 0x1e60 <vfprintf+0x3bc>
    1d0e:	e9 2f       	mov	r30, r25
    1d10:	e0 61       	ori	r30, 0x10	; 16
    1d12:	be 2e       	mov	r11, r30
    1d14:	b4 fe       	sbrs	r11, 4
    1d16:	0d c0       	rjmp	.+26     	; 0x1d32 <vfprintf+0x28e>
    1d18:	fb 2d       	mov	r31, r11
    1d1a:	f4 60       	ori	r31, 0x04	; 4
    1d1c:	bf 2e       	mov	r11, r31
    1d1e:	09 c0       	rjmp	.+18     	; 0x1d32 <vfprintf+0x28e>
    1d20:	34 fe       	sbrs	r3, 4
    1d22:	0a c0       	rjmp	.+20     	; 0x1d38 <vfprintf+0x294>
    1d24:	29 2f       	mov	r18, r25
    1d26:	26 60       	ori	r18, 0x06	; 6
    1d28:	b2 2e       	mov	r11, r18
    1d2a:	06 c0       	rjmp	.+12     	; 0x1d38 <vfprintf+0x294>
    1d2c:	28 e0       	ldi	r18, 0x08	; 8
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	05 c0       	rjmp	.+10     	; 0x1d3c <vfprintf+0x298>
    1d32:	20 e1       	ldi	r18, 0x10	; 16
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <vfprintf+0x298>
    1d38:	20 e1       	ldi	r18, 0x10	; 16
    1d3a:	32 e0       	ldi	r19, 0x02	; 2
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	b7 fe       	sbrs	r11, 7
    1d40:	07 c0       	rjmp	.+14     	; 0x1d50 <vfprintf+0x2ac>
    1d42:	60 81       	ld	r22, Z
    1d44:	71 81       	ldd	r23, Z+1	; 0x01
    1d46:	82 81       	ldd	r24, Z+2	; 0x02
    1d48:	93 81       	ldd	r25, Z+3	; 0x03
    1d4a:	0c 5f       	subi	r16, 0xFC	; 252
    1d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4e:	06 c0       	rjmp	.+12     	; 0x1d5c <vfprintf+0x2b8>
    1d50:	60 81       	ld	r22, Z
    1d52:	71 81       	ldd	r23, Z+1	; 0x01
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 5f       	subi	r16, 0xFE	; 254
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	a3 01       	movw	r20, r6
    1d5e:	f1 d0       	rcall	.+482    	; 0x1f42 <__ultoa_invert>
    1d60:	88 2e       	mov	r8, r24
    1d62:	86 18       	sub	r8, r6
    1d64:	fb 2d       	mov	r31, r11
    1d66:	ff 77       	andi	r31, 0x7F	; 127
    1d68:	3f 2e       	mov	r3, r31
    1d6a:	36 fe       	sbrs	r3, 6
    1d6c:	0d c0       	rjmp	.+26     	; 0x1d88 <vfprintf+0x2e4>
    1d6e:	23 2d       	mov	r18, r3
    1d70:	2e 7f       	andi	r18, 0xFE	; 254
    1d72:	a2 2e       	mov	r10, r18
    1d74:	89 14       	cp	r8, r9
    1d76:	58 f4       	brcc	.+22     	; 0x1d8e <vfprintf+0x2ea>
    1d78:	34 fe       	sbrs	r3, 4
    1d7a:	0b c0       	rjmp	.+22     	; 0x1d92 <vfprintf+0x2ee>
    1d7c:	32 fc       	sbrc	r3, 2
    1d7e:	09 c0       	rjmp	.+18     	; 0x1d92 <vfprintf+0x2ee>
    1d80:	83 2d       	mov	r24, r3
    1d82:	8e 7e       	andi	r24, 0xEE	; 238
    1d84:	a8 2e       	mov	r10, r24
    1d86:	05 c0       	rjmp	.+10     	; 0x1d92 <vfprintf+0x2ee>
    1d88:	b8 2c       	mov	r11, r8
    1d8a:	a3 2c       	mov	r10, r3
    1d8c:	03 c0       	rjmp	.+6      	; 0x1d94 <vfprintf+0x2f0>
    1d8e:	b8 2c       	mov	r11, r8
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <vfprintf+0x2f0>
    1d92:	b9 2c       	mov	r11, r9
    1d94:	a4 fe       	sbrs	r10, 4
    1d96:	0f c0       	rjmp	.+30     	; 0x1db6 <vfprintf+0x312>
    1d98:	fe 01       	movw	r30, r28
    1d9a:	e8 0d       	add	r30, r8
    1d9c:	f1 1d       	adc	r31, r1
    1d9e:	80 81       	ld	r24, Z
    1da0:	80 33       	cpi	r24, 0x30	; 48
    1da2:	21 f4       	brne	.+8      	; 0x1dac <vfprintf+0x308>
    1da4:	9a 2d       	mov	r25, r10
    1da6:	99 7e       	andi	r25, 0xE9	; 233
    1da8:	a9 2e       	mov	r10, r25
    1daa:	09 c0       	rjmp	.+18     	; 0x1dbe <vfprintf+0x31a>
    1dac:	a2 fe       	sbrs	r10, 2
    1dae:	06 c0       	rjmp	.+12     	; 0x1dbc <vfprintf+0x318>
    1db0:	b3 94       	inc	r11
    1db2:	b3 94       	inc	r11
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <vfprintf+0x31a>
    1db6:	8a 2d       	mov	r24, r10
    1db8:	86 78       	andi	r24, 0x86	; 134
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <vfprintf+0x31a>
    1dbc:	b3 94       	inc	r11
    1dbe:	a3 fc       	sbrc	r10, 3
    1dc0:	10 c0       	rjmp	.+32     	; 0x1de2 <vfprintf+0x33e>
    1dc2:	a0 fe       	sbrs	r10, 0
    1dc4:	06 c0       	rjmp	.+12     	; 0x1dd2 <vfprintf+0x32e>
    1dc6:	b2 14       	cp	r11, r2
    1dc8:	80 f4       	brcc	.+32     	; 0x1dea <vfprintf+0x346>
    1dca:	28 0c       	add	r2, r8
    1dcc:	92 2c       	mov	r9, r2
    1dce:	9b 18       	sub	r9, r11
    1dd0:	0d c0       	rjmp	.+26     	; 0x1dec <vfprintf+0x348>
    1dd2:	b2 14       	cp	r11, r2
    1dd4:	58 f4       	brcc	.+22     	; 0x1dec <vfprintf+0x348>
    1dd6:	b6 01       	movw	r22, r12
    1dd8:	80 e2       	ldi	r24, 0x20	; 32
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	76 d0       	rcall	.+236    	; 0x1eca <fputc>
    1dde:	b3 94       	inc	r11
    1de0:	f8 cf       	rjmp	.-16     	; 0x1dd2 <vfprintf+0x32e>
    1de2:	b2 14       	cp	r11, r2
    1de4:	18 f4       	brcc	.+6      	; 0x1dec <vfprintf+0x348>
    1de6:	2b 18       	sub	r2, r11
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <vfprintf+0x34a>
    1dea:	98 2c       	mov	r9, r8
    1dec:	21 2c       	mov	r2, r1
    1dee:	a4 fe       	sbrs	r10, 4
    1df0:	0f c0       	rjmp	.+30     	; 0x1e10 <vfprintf+0x36c>
    1df2:	b6 01       	movw	r22, r12
    1df4:	80 e3       	ldi	r24, 0x30	; 48
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	68 d0       	rcall	.+208    	; 0x1eca <fputc>
    1dfa:	a2 fe       	sbrs	r10, 2
    1dfc:	16 c0       	rjmp	.+44     	; 0x1e2a <vfprintf+0x386>
    1dfe:	a1 fc       	sbrc	r10, 1
    1e00:	03 c0       	rjmp	.+6      	; 0x1e08 <vfprintf+0x364>
    1e02:	88 e7       	ldi	r24, 0x78	; 120
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <vfprintf+0x368>
    1e08:	88 e5       	ldi	r24, 0x58	; 88
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	b6 01       	movw	r22, r12
    1e0e:	0c c0       	rjmp	.+24     	; 0x1e28 <vfprintf+0x384>
    1e10:	8a 2d       	mov	r24, r10
    1e12:	86 78       	andi	r24, 0x86	; 134
    1e14:	51 f0       	breq	.+20     	; 0x1e2a <vfprintf+0x386>
    1e16:	a1 fe       	sbrs	r10, 1
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <vfprintf+0x37a>
    1e1a:	8b e2       	ldi	r24, 0x2B	; 43
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <vfprintf+0x37c>
    1e1e:	80 e2       	ldi	r24, 0x20	; 32
    1e20:	a7 fc       	sbrc	r10, 7
    1e22:	8d e2       	ldi	r24, 0x2D	; 45
    1e24:	b6 01       	movw	r22, r12
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	50 d0       	rcall	.+160    	; 0x1eca <fputc>
    1e2a:	89 14       	cp	r8, r9
    1e2c:	30 f4       	brcc	.+12     	; 0x1e3a <vfprintf+0x396>
    1e2e:	b6 01       	movw	r22, r12
    1e30:	80 e3       	ldi	r24, 0x30	; 48
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	4a d0       	rcall	.+148    	; 0x1eca <fputc>
    1e36:	9a 94       	dec	r9
    1e38:	f8 cf       	rjmp	.-16     	; 0x1e2a <vfprintf+0x386>
    1e3a:	8a 94       	dec	r8
    1e3c:	f3 01       	movw	r30, r6
    1e3e:	e8 0d       	add	r30, r8
    1e40:	f1 1d       	adc	r31, r1
    1e42:	80 81       	ld	r24, Z
    1e44:	b6 01       	movw	r22, r12
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	40 d0       	rcall	.+128    	; 0x1eca <fputc>
    1e4a:	81 10       	cpse	r8, r1
    1e4c:	f6 cf       	rjmp	.-20     	; 0x1e3a <vfprintf+0x396>
    1e4e:	22 20       	and	r2, r2
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <vfprintf+0x3b0>
    1e52:	4e ce       	rjmp	.-868    	; 0x1af0 <vfprintf+0x4c>
    1e54:	b6 01       	movw	r22, r12
    1e56:	80 e2       	ldi	r24, 0x20	; 32
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	37 d0       	rcall	.+110    	; 0x1eca <fputc>
    1e5c:	2a 94       	dec	r2
    1e5e:	f7 cf       	rjmp	.-18     	; 0x1e4e <vfprintf+0x3aa>
    1e60:	f6 01       	movw	r30, r12
    1e62:	86 81       	ldd	r24, Z+6	; 0x06
    1e64:	97 81       	ldd	r25, Z+7	; 0x07
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <vfprintf+0x3c8>
    1e68:	8f ef       	ldi	r24, 0xFF	; 255
    1e6a:	9f ef       	ldi	r25, 0xFF	; 255
    1e6c:	2b 96       	adiw	r28, 0x0b	; 11
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	1f 91       	pop	r17
    1e7e:	0f 91       	pop	r16
    1e80:	ff 90       	pop	r15
    1e82:	ef 90       	pop	r14
    1e84:	df 90       	pop	r13
    1e86:	cf 90       	pop	r12
    1e88:	bf 90       	pop	r11
    1e8a:	af 90       	pop	r10
    1e8c:	9f 90       	pop	r9
    1e8e:	8f 90       	pop	r8
    1e90:	7f 90       	pop	r7
    1e92:	6f 90       	pop	r6
    1e94:	5f 90       	pop	r5
    1e96:	4f 90       	pop	r4
    1e98:	3f 90       	pop	r3
    1e9a:	2f 90       	pop	r2
    1e9c:	08 95       	ret

00001e9e <strnlen_P>:
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	05 90       	lpm	r0, Z+
    1ea2:	61 50       	subi	r22, 0x01	; 1
    1ea4:	70 40       	sbci	r23, 0x00	; 0
    1ea6:	01 10       	cpse	r0, r1
    1ea8:	d8 f7       	brcc	.-10     	; 0x1ea0 <strnlen_P+0x2>
    1eaa:	80 95       	com	r24
    1eac:	90 95       	com	r25
    1eae:	8e 0f       	add	r24, r30
    1eb0:	9f 1f       	adc	r25, r31
    1eb2:	08 95       	ret

00001eb4 <strnlen>:
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	61 50       	subi	r22, 0x01	; 1
    1eb8:	70 40       	sbci	r23, 0x00	; 0
    1eba:	01 90       	ld	r0, Z+
    1ebc:	01 10       	cpse	r0, r1
    1ebe:	d8 f7       	brcc	.-10     	; 0x1eb6 <strnlen+0x2>
    1ec0:	80 95       	com	r24
    1ec2:	90 95       	com	r25
    1ec4:	8e 0f       	add	r24, r30
    1ec6:	9f 1f       	adc	r25, r31
    1ec8:	08 95       	ret

00001eca <fputc>:
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	fb 01       	movw	r30, r22
    1ed4:	23 81       	ldd	r18, Z+3	; 0x03
    1ed6:	21 fd       	sbrc	r18, 1
    1ed8:	03 c0       	rjmp	.+6      	; 0x1ee0 <fputc+0x16>
    1eda:	8f ef       	ldi	r24, 0xFF	; 255
    1edc:	9f ef       	ldi	r25, 0xFF	; 255
    1ede:	2c c0       	rjmp	.+88     	; 0x1f38 <fputc+0x6e>
    1ee0:	22 ff       	sbrs	r18, 2
    1ee2:	16 c0       	rjmp	.+44     	; 0x1f10 <fputc+0x46>
    1ee4:	46 81       	ldd	r20, Z+6	; 0x06
    1ee6:	57 81       	ldd	r21, Z+7	; 0x07
    1ee8:	24 81       	ldd	r18, Z+4	; 0x04
    1eea:	35 81       	ldd	r19, Z+5	; 0x05
    1eec:	42 17       	cp	r20, r18
    1eee:	53 07       	cpc	r21, r19
    1ef0:	44 f4       	brge	.+16     	; 0x1f02 <fputc+0x38>
    1ef2:	a0 81       	ld	r26, Z
    1ef4:	b1 81       	ldd	r27, Z+1	; 0x01
    1ef6:	9d 01       	movw	r18, r26
    1ef8:	2f 5f       	subi	r18, 0xFF	; 255
    1efa:	3f 4f       	sbci	r19, 0xFF	; 255
    1efc:	31 83       	std	Z+1, r19	; 0x01
    1efe:	20 83       	st	Z, r18
    1f00:	8c 93       	st	X, r24
    1f02:	26 81       	ldd	r18, Z+6	; 0x06
    1f04:	37 81       	ldd	r19, Z+7	; 0x07
    1f06:	2f 5f       	subi	r18, 0xFF	; 255
    1f08:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0a:	37 83       	std	Z+7, r19	; 0x07
    1f0c:	26 83       	std	Z+6, r18	; 0x06
    1f0e:	14 c0       	rjmp	.+40     	; 0x1f38 <fputc+0x6e>
    1f10:	8b 01       	movw	r16, r22
    1f12:	ec 01       	movw	r28, r24
    1f14:	fb 01       	movw	r30, r22
    1f16:	00 84       	ldd	r0, Z+8	; 0x08
    1f18:	f1 85       	ldd	r31, Z+9	; 0x09
    1f1a:	e0 2d       	mov	r30, r0
    1f1c:	09 95       	icall
    1f1e:	89 2b       	or	r24, r25
    1f20:	e1 f6       	brne	.-72     	; 0x1eda <fputc+0x10>
    1f22:	d8 01       	movw	r26, r16
    1f24:	16 96       	adiw	r26, 0x06	; 6
    1f26:	8d 91       	ld	r24, X+
    1f28:	9c 91       	ld	r25, X
    1f2a:	17 97       	sbiw	r26, 0x07	; 7
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	17 96       	adiw	r26, 0x07	; 7
    1f30:	9c 93       	st	X, r25
    1f32:	8e 93       	st	-X, r24
    1f34:	16 97       	sbiw	r26, 0x06	; 6
    1f36:	ce 01       	movw	r24, r28
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	08 95       	ret

00001f42 <__ultoa_invert>:
    1f42:	fa 01       	movw	r30, r20
    1f44:	aa 27       	eor	r26, r26
    1f46:	28 30       	cpi	r18, 0x08	; 8
    1f48:	51 f1       	breq	.+84     	; 0x1f9e <__ultoa_invert+0x5c>
    1f4a:	20 31       	cpi	r18, 0x10	; 16
    1f4c:	81 f1       	breq	.+96     	; 0x1fae <__ultoa_invert+0x6c>
    1f4e:	e8 94       	clt
    1f50:	6f 93       	push	r22
    1f52:	6e 7f       	andi	r22, 0xFE	; 254
    1f54:	6e 5f       	subi	r22, 0xFE	; 254
    1f56:	7f 4f       	sbci	r23, 0xFF	; 255
    1f58:	8f 4f       	sbci	r24, 0xFF	; 255
    1f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5c:	af 4f       	sbci	r26, 0xFF	; 255
    1f5e:	b1 e0       	ldi	r27, 0x01	; 1
    1f60:	3e d0       	rcall	.+124    	; 0x1fde <__ultoa_invert+0x9c>
    1f62:	b4 e0       	ldi	r27, 0x04	; 4
    1f64:	3c d0       	rcall	.+120    	; 0x1fde <__ultoa_invert+0x9c>
    1f66:	67 0f       	add	r22, r23
    1f68:	78 1f       	adc	r23, r24
    1f6a:	89 1f       	adc	r24, r25
    1f6c:	9a 1f       	adc	r25, r26
    1f6e:	a1 1d       	adc	r26, r1
    1f70:	68 0f       	add	r22, r24
    1f72:	79 1f       	adc	r23, r25
    1f74:	8a 1f       	adc	r24, r26
    1f76:	91 1d       	adc	r25, r1
    1f78:	a1 1d       	adc	r26, r1
    1f7a:	6a 0f       	add	r22, r26
    1f7c:	71 1d       	adc	r23, r1
    1f7e:	81 1d       	adc	r24, r1
    1f80:	91 1d       	adc	r25, r1
    1f82:	a1 1d       	adc	r26, r1
    1f84:	20 d0       	rcall	.+64     	; 0x1fc6 <__ultoa_invert+0x84>
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <__ultoa_invert+0x48>
    1f88:	68 94       	set
    1f8a:	3f 91       	pop	r19
    1f8c:	2a e0       	ldi	r18, 0x0A	; 10
    1f8e:	26 9f       	mul	r18, r22
    1f90:	11 24       	eor	r1, r1
    1f92:	30 19       	sub	r19, r0
    1f94:	30 5d       	subi	r19, 0xD0	; 208
    1f96:	31 93       	st	Z+, r19
    1f98:	de f6       	brtc	.-74     	; 0x1f50 <__ultoa_invert+0xe>
    1f9a:	cf 01       	movw	r24, r30
    1f9c:	08 95       	ret
    1f9e:	46 2f       	mov	r20, r22
    1fa0:	47 70       	andi	r20, 0x07	; 7
    1fa2:	40 5d       	subi	r20, 0xD0	; 208
    1fa4:	41 93       	st	Z+, r20
    1fa6:	b3 e0       	ldi	r27, 0x03	; 3
    1fa8:	0f d0       	rcall	.+30     	; 0x1fc8 <__ultoa_invert+0x86>
    1faa:	c9 f7       	brne	.-14     	; 0x1f9e <__ultoa_invert+0x5c>
    1fac:	f6 cf       	rjmp	.-20     	; 0x1f9a <__ultoa_invert+0x58>
    1fae:	46 2f       	mov	r20, r22
    1fb0:	4f 70       	andi	r20, 0x0F	; 15
    1fb2:	40 5d       	subi	r20, 0xD0	; 208
    1fb4:	4a 33       	cpi	r20, 0x3A	; 58
    1fb6:	18 f0       	brcs	.+6      	; 0x1fbe <__ultoa_invert+0x7c>
    1fb8:	49 5d       	subi	r20, 0xD9	; 217
    1fba:	31 fd       	sbrc	r19, 1
    1fbc:	40 52       	subi	r20, 0x20	; 32
    1fbe:	41 93       	st	Z+, r20
    1fc0:	02 d0       	rcall	.+4      	; 0x1fc6 <__ultoa_invert+0x84>
    1fc2:	a9 f7       	brne	.-22     	; 0x1fae <__ultoa_invert+0x6c>
    1fc4:	ea cf       	rjmp	.-44     	; 0x1f9a <__ultoa_invert+0x58>
    1fc6:	b4 e0       	ldi	r27, 0x04	; 4
    1fc8:	a6 95       	lsr	r26
    1fca:	97 95       	ror	r25
    1fcc:	87 95       	ror	r24
    1fce:	77 95       	ror	r23
    1fd0:	67 95       	ror	r22
    1fd2:	ba 95       	dec	r27
    1fd4:	c9 f7       	brne	.-14     	; 0x1fc8 <__ultoa_invert+0x86>
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	61 05       	cpc	r22, r1
    1fda:	71 05       	cpc	r23, r1
    1fdc:	08 95       	ret
    1fde:	9b 01       	movw	r18, r22
    1fe0:	ac 01       	movw	r20, r24
    1fe2:	0a 2e       	mov	r0, r26
    1fe4:	06 94       	lsr	r0
    1fe6:	57 95       	ror	r21
    1fe8:	47 95       	ror	r20
    1fea:	37 95       	ror	r19
    1fec:	27 95       	ror	r18
    1fee:	ba 95       	dec	r27
    1ff0:	c9 f7       	brne	.-14     	; 0x1fe4 <__ultoa_invert+0xa2>
    1ff2:	62 0f       	add	r22, r18
    1ff4:	73 1f       	adc	r23, r19
    1ff6:	84 1f       	adc	r24, r20
    1ff8:	95 1f       	adc	r25, r21
    1ffa:	a0 1d       	adc	r26, r0
    1ffc:	08 95       	ret

00001ffe <_exit>:
    1ffe:	f8 94       	cli

00002000 <__stop_program>:
    2000:	ff cf       	rjmp	.-2      	; 0x2000 <__stop_program>
