
sortingProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  000026e0  00002774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000425  00800232  00800232  000028a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000028a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002904  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00002944  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000057ea  00000000  00000000  00002c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001adc  00000000  00000000  0000840e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cd1  00000000  00000000  00009eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008c8  00000000  00000000  0000bbbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000121e  00000000  00000000  0000c484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002509  00000000  00000000  0000d6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000fbab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ca c2       	rjmp	.+1428   	; 0x596 <__ctors_end>
       2:	00 00       	nop
       4:	f1 c2       	rjmp	.+1506   	; 0x5e8 <__bad_interrupt>
       6:	00 00       	nop
       8:	ef c2       	rjmp	.+1502   	; 0x5e8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5f c4       	rjmp	.+2238   	; 0x8cc <__vector_3>
       e:	00 00       	nop
      10:	0a c5       	rjmp	.+2580   	; 0xa26 <__vector_4>
      12:	00 00       	nop
      14:	e9 c2       	rjmp	.+1490   	; 0x5e8 <__bad_interrupt>
      16:	00 00       	nop
      18:	e7 c2       	rjmp	.+1486   	; 0x5e8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e5 c2       	rjmp	.+1482   	; 0x5e8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e3 c2       	rjmp	.+1478   	; 0x5e8 <__bad_interrupt>
      22:	00 00       	nop
      24:	e1 c2       	rjmp	.+1474   	; 0x5e8 <__bad_interrupt>
      26:	00 00       	nop
      28:	df c2       	rjmp	.+1470   	; 0x5e8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	dd c2       	rjmp	.+1466   	; 0x5e8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	db c2       	rjmp	.+1462   	; 0x5e8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d9 c2       	rjmp	.+1458   	; 0x5e8 <__bad_interrupt>
      36:	00 00       	nop
      38:	d7 c2       	rjmp	.+1454   	; 0x5e8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d5 c2       	rjmp	.+1450   	; 0x5e8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d3 c2       	rjmp	.+1446   	; 0x5e8 <__bad_interrupt>
      42:	00 00       	nop
      44:	d1 c2       	rjmp	.+1442   	; 0x5e8 <__bad_interrupt>
      46:	00 00       	nop
      48:	cf c2       	rjmp	.+1438   	; 0x5e8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	cd c2       	rjmp	.+1434   	; 0x5e8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	cb c2       	rjmp	.+1430   	; 0x5e8 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__vector_21>
      58:	c7 c2       	rjmp	.+1422   	; 0x5e8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c5 c2       	rjmp	.+1418   	; 0x5e8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c3 c2       	rjmp	.+1414   	; 0x5e8 <__bad_interrupt>
      62:	00 00       	nop
      64:	c1 c2       	rjmp	.+1410   	; 0x5e8 <__bad_interrupt>
      66:	00 00       	nop
      68:	bf c2       	rjmp	.+1406   	; 0x5e8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	bd c2       	rjmp	.+1402   	; 0x5e8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	bb c2       	rjmp	.+1398   	; 0x5e8 <__bad_interrupt>
      72:	00 00       	nop
      74:	bb c3       	rjmp	.+1910   	; 0x7ec <__vector_29>
      76:	00 00       	nop
      78:	b7 c2       	rjmp	.+1390   	; 0x5e8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b5 c2       	rjmp	.+1386   	; 0x5e8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b3 c2       	rjmp	.+1382   	; 0x5e8 <__bad_interrupt>
      82:	00 00       	nop
      84:	b1 c2       	rjmp	.+1378   	; 0x5e8 <__bad_interrupt>
      86:	00 00       	nop
      88:	af c2       	rjmp	.+1374   	; 0x5e8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ad c2       	rjmp	.+1370   	; 0x5e8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ab c2       	rjmp	.+1366   	; 0x5e8 <__bad_interrupt>
      92:	00 00       	nop
      94:	a9 c2       	rjmp	.+1362   	; 0x5e8 <__bad_interrupt>
	...

00000098 <__trampolines_end>:
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	00 3e       	cpi	r16, 0xE0	; 224
      9e:	5b 4f       	sbci	r21, 0xFB	; 251
      a0:	5b 3e       	cpi	r21, 0xEB	; 235
      a2:	3e 6b       	ori	r19, 0xBE	; 190
      a4:	4f 6b       	ori	r20, 0xBF	; 191
      a6:	3e 1c       	adc	r3, r14
      a8:	3e 7c       	andi	r19, 0xCE	; 206
      aa:	3e 1c       	adc	r3, r14
      ac:	18 3c       	cpi	r17, 0xC8	; 200
      ae:	7e 3c       	cpi	r23, 0xCE	; 206
      b0:	18 1c       	adc	r1, r8
      b2:	57 7d       	andi	r21, 0xD7	; 215
      b4:	57 1c       	adc	r5, r7
      b6:	1c 5e       	subi	r17, 0xEC	; 236
      b8:	7f 5e       	subi	r23, 0xEF	; 239
      ba:	1c 00       	.word	0x001c	; ????
      bc:	18 3c       	cpi	r17, 0xC8	; 200
      be:	18 00       	.word	0x0018	; ????
      c0:	ff e7       	ldi	r31, 0x7F	; 127
      c2:	c3 e7       	ldi	r28, 0x73	; 115
      c4:	ff 00       	.word	0x00ff	; ????
      c6:	18 24       	eor	r1, r8
      c8:	18 00       	.word	0x0018	; ????
      ca:	ff e7       	ldi	r31, 0x7F	; 127
      cc:	db e7       	ldi	r29, 0x7B	; 123
      ce:	ff 30       	cpi	r31, 0x0F	; 15
      d0:	48 3a       	cpi	r20, 0xA8	; 168
      d2:	06 0e       	add	r0, r22
      d4:	26 29       	or	r18, r6
      d6:	79 29       	or	r23, r9
      d8:	26 40       	sbci	r18, 0x06	; 6
      da:	7f 05       	cpc	r23, r15
      dc:	05 07       	cpc	r16, r21
      de:	40 7f       	andi	r20, 0xF0	; 240
      e0:	05 25       	eor	r16, r5
      e2:	3f 5a       	subi	r19, 0xAF	; 175
      e4:	3c e7       	ldi	r19, 0x7C	; 124
      e6:	3c 5a       	subi	r19, 0xAC	; 172
      e8:	7f 3e       	cpi	r23, 0xEF	; 239
      ea:	1c 1c       	adc	r1, r12
      ec:	08 08       	sbc	r0, r8
      ee:	1c 1c       	adc	r1, r12
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	14 22       	and	r1, r20
      f4:	7f 22       	and	r7, r31
      f6:	14 5f       	subi	r17, 0xF4	; 244
      f8:	5f 00       	.word	0x005f	; ????
      fa:	5f 5f       	subi	r21, 0xFF	; 255
      fc:	06 09       	sbc	r16, r6
      fe:	7f 01       	movw	r14, r30
     100:	7f 00       	.word	0x007f	; ????
     102:	66 89       	ldd	r22, Z+22	; 0x16
     104:	95 6a       	ori	r25, 0xA5	; 165
     106:	60 60       	ori	r22, 0x00	; 0
     108:	60 60       	ori	r22, 0x00	; 0
     10a:	60 94       	com	r6
     10c:	a2 ff       	sbrs	r26, 2
     10e:	a2 94       	swap	r10
     110:	08 04       	cpc	r0, r8
     112:	7e 04       	cpc	r7, r14
     114:	08 10       	cpse	r0, r8
     116:	20 7e       	andi	r18, 0xE0	; 224
     118:	20 10       	cpse	r2, r0
     11a:	08 08       	sbc	r0, r8
     11c:	2a 1c       	adc	r2, r10
     11e:	08 08       	sbc	r0, r8
     120:	1c 2a       	or	r1, r28
     122:	08 08       	sbc	r0, r8
     124:	1e 10       	cpse	r1, r14
     126:	10 10       	cpse	r1, r0
     128:	10 0c       	add	r1, r0
     12a:	1e 0c       	add	r1, r14
     12c:	1e 0c       	add	r1, r14
     12e:	30 38       	cpi	r19, 0x80	; 128
     130:	3e 38       	cpi	r19, 0x8E	; 142
     132:	30 06       	cpc	r3, r16
     134:	0e 3e       	cpi	r16, 0xEE	; 238
     136:	0e 06       	cpc	r0, r30
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 5f       	subi	r16, 0xF0	; 240
     140:	00 00       	nop
     142:	00 07       	cpc	r16, r16
     144:	00 07       	cpc	r16, r16
     146:	00 14       	cp	r0, r0
     148:	7f 14       	cp	r7, r15
     14a:	7f 14       	cp	r7, r15
     14c:	24 2a       	or	r2, r20
     14e:	7f 2a       	or	r7, r31
     150:	12 23       	and	r17, r18
     152:	13 08       	sbc	r1, r3
     154:	64 62       	ori	r22, 0x24	; 36
     156:	36 49       	sbci	r19, 0x96	; 150
     158:	56 20       	and	r5, r6
     15a:	50 00       	.word	0x0050	; ????
     15c:	08 07       	cpc	r16, r24
     15e:	03 00       	.word	0x0003	; ????
     160:	00 1c       	adc	r0, r0
     162:	22 41       	sbci	r18, 0x12	; 18
     164:	00 00       	nop
     166:	41 22       	and	r4, r17
     168:	1c 00       	.word	0x001c	; ????
     16a:	2a 1c       	adc	r2, r10
     16c:	7f 1c       	adc	r7, r15
     16e:	2a 08       	sbc	r2, r10
     170:	08 3e       	cpi	r16, 0xE8	; 232
     172:	08 08       	sbc	r0, r8
     174:	00 80       	ld	r0, Z
     176:	70 30       	cpi	r23, 0x00	; 0
     178:	00 08       	sbc	r0, r0
     17a:	08 08       	sbc	r0, r8
     17c:	08 08       	sbc	r0, r8
     17e:	00 00       	nop
     180:	60 60       	ori	r22, 0x00	; 0
     182:	00 20       	and	r0, r0
     184:	10 08       	sbc	r1, r0
     186:	04 02       	muls	r16, r20
     188:	3e 51       	subi	r19, 0x1E	; 30
     18a:	49 45       	sbci	r20, 0x59	; 89
     18c:	3e 00       	.word	0x003e	; ????
     18e:	42 7f       	andi	r20, 0xF2	; 242
     190:	40 00       	.word	0x0040	; ????
     192:	72 49       	sbci	r23, 0x92	; 146
     194:	49 49       	sbci	r20, 0x99	; 153
     196:	46 21       	and	r20, r6
     198:	41 49       	sbci	r20, 0x91	; 145
     19a:	4d 33       	cpi	r20, 0x3D	; 61
     19c:	18 14       	cp	r1, r8
     19e:	12 7f       	andi	r17, 0xF2	; 242
     1a0:	10 27       	eor	r17, r16
     1a2:	45 45       	sbci	r20, 0x55	; 85
     1a4:	45 39       	cpi	r20, 0x95	; 149
     1a6:	3c 4a       	sbci	r19, 0xAC	; 172
     1a8:	49 49       	sbci	r20, 0x99	; 153
     1aa:	31 41       	sbci	r19, 0x11	; 17
     1ac:	21 11       	cpse	r18, r1
     1ae:	09 07       	cpc	r16, r25
     1b0:	36 49       	sbci	r19, 0x96	; 150
     1b2:	49 49       	sbci	r20, 0x99	; 153
     1b4:	36 46       	sbci	r19, 0x66	; 102
     1b6:	49 49       	sbci	r20, 0x99	; 153
     1b8:	29 1e       	adc	r2, r25
     1ba:	00 00       	nop
     1bc:	14 00       	.word	0x0014	; ????
     1be:	00 00       	nop
     1c0:	40 34       	cpi	r20, 0x40	; 64
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	14 22       	and	r1, r20
     1c8:	41 14       	cp	r4, r1
     1ca:	14 14       	cp	r1, r4
     1cc:	14 14       	cp	r1, r4
     1ce:	00 41       	sbci	r16, 0x10	; 16
     1d0:	22 14       	cp	r2, r2
     1d2:	08 02       	muls	r16, r24
     1d4:	01 59       	subi	r16, 0x91	; 145
     1d6:	09 06       	cpc	r0, r25
     1d8:	3e 41       	sbci	r19, 0x1E	; 30
     1da:	5d 59       	subi	r21, 0x9D	; 157
     1dc:	4e 7c       	andi	r20, 0xCE	; 206
     1de:	12 11       	cpse	r17, r2
     1e0:	12 7c       	andi	r17, 0xC2	; 194
     1e2:	7f 49       	sbci	r23, 0x9F	; 159
     1e4:	49 49       	sbci	r20, 0x99	; 153
     1e6:	36 3e       	cpi	r19, 0xE6	; 230
     1e8:	41 41       	sbci	r20, 0x11	; 17
     1ea:	41 22       	and	r4, r17
     1ec:	7f 41       	sbci	r23, 0x1F	; 31
     1ee:	41 41       	sbci	r20, 0x11	; 17
     1f0:	3e 7f       	andi	r19, 0xFE	; 254
     1f2:	49 49       	sbci	r20, 0x99	; 153
     1f4:	49 41       	sbci	r20, 0x19	; 25
     1f6:	7f 09       	sbc	r23, r15
     1f8:	09 09       	sbc	r16, r9
     1fa:	01 3e       	cpi	r16, 0xE1	; 225
     1fc:	41 41       	sbci	r20, 0x11	; 17
     1fe:	51 73       	andi	r21, 0x31	; 49
     200:	7f 08       	sbc	r7, r15
     202:	08 08       	sbc	r0, r8
     204:	7f 00       	.word	0x007f	; ????
     206:	41 7f       	andi	r20, 0xF1	; 241
     208:	41 00       	.word	0x0041	; ????
     20a:	20 40       	sbci	r18, 0x00	; 0
     20c:	41 3f       	cpi	r20, 0xF1	; 241
     20e:	01 7f       	andi	r16, 0xF1	; 241
     210:	08 14       	cp	r0, r8
     212:	22 41       	sbci	r18, 0x12	; 18
     214:	7f 40       	sbci	r23, 0x0F	; 15
     216:	40 40       	sbci	r20, 0x00	; 0
     218:	40 7f       	andi	r20, 0xF0	; 240
     21a:	02 1c       	adc	r0, r2
     21c:	02 7f       	andi	r16, 0xF2	; 242
     21e:	7f 04       	cpc	r7, r15
     220:	08 10       	cpse	r0, r8
     222:	7f 3e       	cpi	r23, 0xEF	; 239
     224:	41 41       	sbci	r20, 0x11	; 17
     226:	41 3e       	cpi	r20, 0xE1	; 225
     228:	7f 09       	sbc	r23, r15
     22a:	09 09       	sbc	r16, r9
     22c:	06 3e       	cpi	r16, 0xE6	; 230
     22e:	41 51       	subi	r20, 0x11	; 17
     230:	21 5e       	subi	r18, 0xE1	; 225
     232:	7f 09       	sbc	r23, r15
     234:	19 29       	or	r17, r9
     236:	46 26       	eor	r4, r22
     238:	49 49       	sbci	r20, 0x99	; 153
     23a:	49 32       	cpi	r20, 0x29	; 41
     23c:	03 01       	movw	r0, r6
     23e:	7f 01       	movw	r14, r30
     240:	03 3f       	cpi	r16, 0xF3	; 243
     242:	40 40       	sbci	r20, 0x00	; 0
     244:	40 3f       	cpi	r20, 0xF0	; 240
     246:	1f 20       	and	r1, r15
     248:	40 20       	and	r4, r0
     24a:	1f 3f       	cpi	r17, 0xFF	; 255
     24c:	40 38       	cpi	r20, 0x80	; 128
     24e:	40 3f       	cpi	r20, 0xF0	; 240
     250:	63 14       	cp	r6, r3
     252:	08 14       	cp	r0, r8
     254:	63 03       	mulsu	r22, r19
     256:	04 78       	andi	r16, 0x84	; 132
     258:	04 03       	mulsu	r16, r20
     25a:	61 59       	subi	r22, 0x91	; 145
     25c:	49 4d       	sbci	r20, 0xD9	; 217
     25e:	43 00       	.word	0x0043	; ????
     260:	7f 41       	sbci	r23, 0x1F	; 31
     262:	41 41       	sbci	r20, 0x11	; 17
     264:	02 04       	cpc	r0, r2
     266:	08 10       	cpse	r0, r8
     268:	20 00       	.word	0x0020	; ????
     26a:	41 41       	sbci	r20, 0x11	; 17
     26c:	41 7f       	andi	r20, 0xF1	; 241
     26e:	04 02       	muls	r16, r20
     270:	01 02       	muls	r16, r17
     272:	04 40       	sbci	r16, 0x04	; 4
     274:	40 40       	sbci	r20, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	00 03       	mulsu	r16, r16
     27a:	07 08       	sbc	r0, r7
     27c:	00 20       	and	r0, r0
     27e:	54 54       	subi	r21, 0x44	; 68
     280:	78 40       	sbci	r23, 0x08	; 8
     282:	7f 28       	or	r7, r15
     284:	44 44       	sbci	r20, 0x44	; 68
     286:	38 38       	cpi	r19, 0x88	; 136
     288:	44 44       	sbci	r20, 0x44	; 68
     28a:	44 28       	or	r4, r4
     28c:	38 44       	sbci	r19, 0x48	; 72
     28e:	44 28       	or	r4, r4
     290:	7f 38       	cpi	r23, 0x8F	; 143
     292:	54 54       	subi	r21, 0x44	; 68
     294:	54 18       	sub	r5, r4
     296:	00 08       	sbc	r0, r0
     298:	7e 09       	sbc	r23, r14
     29a:	02 18       	sub	r0, r2
     29c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     29e:	9c 78       	andi	r25, 0x8C	; 140
     2a0:	7f 08       	sbc	r7, r15
     2a2:	04 04       	cpc	r0, r4
     2a4:	78 00       	.word	0x0078	; ????
     2a6:	44 7d       	andi	r20, 0xD4	; 212
     2a8:	40 00       	.word	0x0040	; ????
     2aa:	20 40       	sbci	r18, 0x00	; 0
     2ac:	40 3d       	cpi	r20, 0xD0	; 208
     2ae:	00 7f       	andi	r16, 0xF0	; 240
     2b0:	10 28       	or	r1, r0
     2b2:	44 00       	.word	0x0044	; ????
     2b4:	00 41       	sbci	r16, 0x10	; 16
     2b6:	7f 40       	sbci	r23, 0x0F	; 15
     2b8:	00 7c       	andi	r16, 0xC0	; 192
     2ba:	04 78       	andi	r16, 0x84	; 132
     2bc:	04 78       	andi	r16, 0x84	; 132
     2be:	7c 08       	sbc	r7, r12
     2c0:	04 04       	cpc	r0, r4
     2c2:	78 38       	cpi	r23, 0x88	; 136
     2c4:	44 44       	sbci	r20, 0x44	; 68
     2c6:	44 38       	cpi	r20, 0x84	; 132
     2c8:	fc 18       	sub	r15, r12
     2ca:	24 24       	eor	r2, r4
     2cc:	18 18       	sub	r1, r8
     2ce:	24 24       	eor	r2, r4
     2d0:	18 fc       	.word	0xfc18	; ????
     2d2:	7c 08       	sbc	r7, r12
     2d4:	04 04       	cpc	r0, r4
     2d6:	08 48       	sbci	r16, 0x88	; 136
     2d8:	54 54       	subi	r21, 0x44	; 68
     2da:	54 24       	eor	r5, r4
     2dc:	04 04       	cpc	r0, r4
     2de:	3f 44       	sbci	r19, 0x4F	; 79
     2e0:	24 3c       	cpi	r18, 0xC4	; 196
     2e2:	40 40       	sbci	r20, 0x00	; 0
     2e4:	20 7c       	andi	r18, 0xC0	; 192
     2e6:	1c 20       	and	r1, r12
     2e8:	40 20       	and	r4, r0
     2ea:	1c 3c       	cpi	r17, 0xCC	; 204
     2ec:	40 30       	cpi	r20, 0x00	; 0
     2ee:	40 3c       	cpi	r20, 0xC0	; 192
     2f0:	44 28       	or	r4, r4
     2f2:	10 28       	or	r1, r0
     2f4:	44 4c       	sbci	r20, 0xC4	; 196
     2f6:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x7639>
     2fa:	44 64       	ori	r20, 0x44	; 68
     2fc:	54 4c       	sbci	r21, 0xC4	; 196
     2fe:	44 00       	.word	0x0044	; ????
     300:	08 36       	cpi	r16, 0x68	; 104
     302:	41 00       	.word	0x0041	; ????
     304:	00 00       	nop
     306:	77 00       	.word	0x0077	; ????
     308:	00 00       	nop
     30a:	41 36       	cpi	r20, 0x61	; 97
     30c:	08 00       	.word	0x0008	; ????
     30e:	02 01       	movw	r0, r4
     310:	02 04       	cpc	r0, r2
     312:	02 3c       	cpi	r16, 0xC2	; 194
     314:	26 23       	and	r18, r22
     316:	26 3c       	cpi	r18, 0xC6	; 198
     318:	1e a1       	ldd	r17, Y+38	; 0x26
     31a:	a1 61       	ori	r26, 0x11	; 17
     31c:	12 3a       	cpi	r17, 0xA2	; 162
     31e:	40 40       	sbci	r20, 0x00	; 0
     320:	20 7a       	andi	r18, 0xA0	; 160
     322:	38 54       	subi	r19, 0x48	; 72
     324:	54 55       	subi	r21, 0x54	; 84
     326:	59 21       	and	r21, r9
     328:	55 55       	subi	r21, 0x55	; 85
     32a:	79 41       	sbci	r23, 0x19	; 25
     32c:	22 54       	subi	r18, 0x42	; 66
     32e:	54 78       	andi	r21, 0x84	; 132
     330:	42 21       	and	r20, r2
     332:	55 54       	subi	r21, 0x45	; 69
     334:	78 40       	sbci	r23, 0x08	; 8
     336:	20 54       	subi	r18, 0x40	; 64
     338:	55 79       	andi	r21, 0x95	; 149
     33a:	40 0c       	add	r4, r0
     33c:	1e 52       	subi	r17, 0x2E	; 46
     33e:	72 12       	cpse	r7, r18
     340:	39 55       	subi	r19, 0x59	; 89
     342:	55 55       	subi	r21, 0x55	; 85
     344:	59 39       	cpi	r21, 0x99	; 153
     346:	54 54       	subi	r21, 0x44	; 68
     348:	54 59       	subi	r21, 0x94	; 148
     34a:	39 55       	subi	r19, 0x59	; 89
     34c:	54 54       	subi	r21, 0x44	; 68
     34e:	58 00       	.word	0x0058	; ????
     350:	00 45       	sbci	r16, 0x50	; 80
     352:	7c 41       	sbci	r23, 0x1C	; 28
     354:	00 02       	muls	r16, r16
     356:	45 7d       	andi	r20, 0xD5	; 213
     358:	42 00       	.word	0x0042	; ????
     35a:	01 45       	sbci	r16, 0x51	; 81
     35c:	7c 40       	sbci	r23, 0x0C	; 12
     35e:	7d 12       	cpse	r7, r29
     360:	11 12       	cpse	r1, r17
     362:	7d f0       	brhs	.+30     	; 0x382 <__trampolines_end+0x2ea>
     364:	28 25       	eor	r18, r8
     366:	28 f0       	brcs	.+10     	; 0x372 <__trampolines_end+0x2da>
     368:	7c 54       	subi	r23, 0x4C	; 76
     36a:	55 45       	sbci	r21, 0x55	; 85
     36c:	00 20       	and	r0, r0
     36e:	54 54       	subi	r21, 0x44	; 68
     370:	7c 54       	subi	r23, 0x4C	; 76
     372:	7c 0a       	sbc	r7, r28
     374:	09 7f       	andi	r16, 0xF9	; 249
     376:	49 32       	cpi	r20, 0x29	; 41
     378:	49 49       	sbci	r20, 0x99	; 153
     37a:	49 32       	cpi	r20, 0x29	; 41
     37c:	3a 44       	sbci	r19, 0x4A	; 74
     37e:	44 44       	sbci	r20, 0x44	; 68
     380:	3a 32       	cpi	r19, 0x2A	; 42
     382:	4a 48       	sbci	r20, 0x8A	; 138
     384:	48 30       	cpi	r20, 0x08	; 8
     386:	3a 41       	sbci	r19, 0x1A	; 26
     388:	41 21       	and	r20, r1
     38a:	7a 3a       	cpi	r23, 0xAA	; 170
     38c:	42 40       	sbci	r20, 0x02	; 2
     38e:	20 78       	andi	r18, 0x80	; 128
     390:	00 9d       	mul	r16, r0
     392:	a0 a0       	ldd	r10, Z+32	; 0x20
     394:	7d 3d       	cpi	r23, 0xDD	; 221
     396:	42 42       	sbci	r20, 0x22	; 34
     398:	42 3d       	cpi	r20, 0xD2	; 210
     39a:	3d 40       	sbci	r19, 0x0D	; 13
     39c:	40 40       	sbci	r20, 0x00	; 0
     39e:	3d 3c       	cpi	r19, 0xCD	; 205
     3a0:	24 ff       	sbrs	r18, 4
     3a2:	24 24       	eor	r2, r4
     3a4:	48 7e       	andi	r20, 0xE8	; 232
     3a6:	49 43       	sbci	r20, 0x39	; 57
     3a8:	66 2b       	or	r22, r22
     3aa:	2f fc       	.word	0xfc2f	; ????
     3ac:	2f 2b       	or	r18, r31
     3ae:	ff 09       	sbc	r31, r15
     3b0:	29 f6       	brne	.-118    	; 0x33c <__trampolines_end+0x2a4>
     3b2:	20 c0       	rjmp	.+64     	; 0x3f4 <__trampolines_end+0x35c>
     3b4:	88 7e       	andi	r24, 0xE8	; 232
     3b6:	09 03       	fmul	r16, r17
     3b8:	20 54       	subi	r18, 0x40	; 64
     3ba:	54 79       	andi	r21, 0x94	; 148
     3bc:	41 00       	.word	0x0041	; ????
     3be:	00 44       	sbci	r16, 0x40	; 64
     3c0:	7d 41       	sbci	r23, 0x1D	; 29
     3c2:	30 48       	sbci	r19, 0x80	; 128
     3c4:	48 4a       	sbci	r20, 0xA8	; 168
     3c6:	32 38       	cpi	r19, 0x82	; 130
     3c8:	40 40       	sbci	r20, 0x00	; 0
     3ca:	22 7a       	andi	r18, 0xA2	; 162
     3cc:	00 7a       	andi	r16, 0xA0	; 160
     3ce:	0a 0a       	sbc	r0, r26
     3d0:	72 7d       	andi	r23, 0xD2	; 210
     3d2:	0d 19       	sub	r16, r13
     3d4:	31 7d       	andi	r19, 0xD1	; 209
     3d6:	26 29       	or	r18, r6
     3d8:	29 2f       	mov	r18, r25
     3da:	28 26       	eor	r2, r24
     3dc:	29 29       	or	r18, r9
     3de:	29 26       	eor	r2, r25
     3e0:	30 48       	sbci	r19, 0x80	; 128
     3e2:	4d 40       	sbci	r20, 0x0D	; 13
     3e4:	20 38       	cpi	r18, 0x80	; 128
     3e6:	08 08       	sbc	r0, r8
     3e8:	08 08       	sbc	r0, r8
     3ea:	08 08       	sbc	r0, r8
     3ec:	08 08       	sbc	r0, r8
     3ee:	38 2f       	mov	r19, r24
     3f0:	10 c8       	rjmp	.-4064   	; 0xfffff412 <__eeprom_end+0xff7ef412>
     3f2:	ac ba       	out	0x1c, r10	; 28
     3f4:	2f 10       	cpse	r2, r15
     3f6:	28 34       	cpi	r18, 0x48	; 72
     3f8:	fa 00       	.word	0x00fa	; ????
     3fa:	00 7b       	andi	r16, 0xB0	; 176
     3fc:	00 00       	nop
     3fe:	08 14       	cp	r0, r8
     400:	2a 14       	cp	r2, r10
     402:	22 22       	and	r2, r18
     404:	14 2a       	or	r1, r20
     406:	14 08       	sbc	r1, r4
     408:	aa 00       	.word	0x00aa	; ????
     40a:	55 00       	.word	0x0055	; ????
     40c:	aa aa       	std	Y+50, r10	; 0x32
     40e:	55 aa       	std	Z+53, r5	; 0x35
     410:	55 aa       	std	Z+53, r5	; 0x35
     412:	00 00       	nop
     414:	00 ff       	sbrs	r16, 0
     416:	00 10       	cpse	r0, r0
     418:	10 10       	cpse	r1, r0
     41a:	ff 00       	.word	0x00ff	; ????
     41c:	14 14       	cp	r1, r4
     41e:	14 ff       	sbrs	r17, 4
     420:	00 10       	cpse	r0, r0
     422:	10 ff       	sbrs	r17, 0
     424:	00 ff       	sbrs	r16, 0
     426:	10 10       	cpse	r1, r0
     428:	f0 10       	cpse	r15, r0
     42a:	f0 14       	cp	r15, r0
     42c:	14 14       	cp	r1, r4
     42e:	fc 00       	.word	0x00fc	; ????
     430:	14 14       	cp	r1, r4
     432:	f7 00       	.word	0x00f7	; ????
     434:	ff 00       	.word	0x00ff	; ????
     436:	00 ff       	sbrs	r16, 0
     438:	00 ff       	sbrs	r16, 0
     43a:	14 14       	cp	r1, r4
     43c:	f4 04       	cpc	r15, r4
     43e:	fc 14       	cp	r15, r12
     440:	14 17       	cp	r17, r20
     442:	10 1f       	adc	r17, r16
     444:	10 10       	cpse	r1, r0
     446:	1f 10       	cpse	r1, r15
     448:	1f 14       	cp	r1, r15
     44a:	14 14       	cp	r1, r4
     44c:	1f 00       	.word	0x001f	; ????
     44e:	10 10       	cpse	r1, r0
     450:	10 f0       	brcs	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     452:	00 00       	nop
     454:	00 00       	nop
     456:	1f 10       	cpse	r1, r15
     458:	10 10       	cpse	r1, r0
     45a:	10 1f       	adc	r17, r16
     45c:	10 10       	cpse	r1, r0
     45e:	10 10       	cpse	r1, r0
     460:	f0 10       	cpse	r15, r0
     462:	00 00       	nop
     464:	00 ff       	sbrs	r16, 0
     466:	10 10       	cpse	r1, r0
     468:	10 10       	cpse	r1, r0
     46a:	10 10       	cpse	r1, r0
     46c:	10 10       	cpse	r1, r0
     46e:	10 ff       	sbrs	r17, 0
     470:	10 00       	.word	0x0010	; ????
     472:	00 00       	nop
     474:	ff 14       	cp	r15, r15
     476:	00 00       	nop
     478:	ff 00       	.word	0x00ff	; ????
     47a:	ff 00       	.word	0x00ff	; ????
     47c:	00 1f       	adc	r16, r16
     47e:	10 17       	cp	r17, r16
     480:	00 00       	nop
     482:	fc 04       	cpc	r15, r12
     484:	f4 14       	cp	r15, r4
     486:	14 17       	cp	r17, r20
     488:	10 17       	cp	r17, r16
     48a:	14 14       	cp	r1, r4
     48c:	f4 04       	cpc	r15, r4
     48e:	f4 00       	.word	0x00f4	; ????
     490:	00 ff       	sbrs	r16, 0
     492:	00 f7       	brcc	.-64     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     494:	14 14       	cp	r1, r4
     496:	14 14       	cp	r1, r4
     498:	14 14       	cp	r1, r4
     49a:	14 f7       	brge	.-60     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     49c:	00 f7       	brcc	.-64     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     49e:	14 14       	cp	r1, r4
     4a0:	14 17       	cp	r17, r20
     4a2:	14 10       	cpse	r1, r4
     4a4:	10 1f       	adc	r17, r16
     4a6:	10 1f       	adc	r17, r16
     4a8:	14 14       	cp	r1, r4
     4aa:	14 f4       	brge	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4ac:	14 10       	cpse	r1, r4
     4ae:	10 f0       	brcs	.+4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b0:	10 f0       	brcs	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b2:	00 00       	nop
     4b4:	1f 10       	cpse	r1, r15
     4b6:	1f 00       	.word	0x001f	; ????
     4b8:	00 00       	nop
     4ba:	1f 14       	cp	r1, r15
     4bc:	00 00       	nop
     4be:	00 fc       	sbrc	r0, 0
     4c0:	14 00       	.word	0x0014	; ????
     4c2:	00 f0       	brcs	.+0      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4c4:	10 f0       	brcs	.+4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4c6:	10 10       	cpse	r1, r0
     4c8:	ff 10       	cpse	r15, r15
     4ca:	ff 14       	cp	r15, r15
     4cc:	14 14       	cp	r1, r4
     4ce:	ff 14       	cp	r15, r15
     4d0:	10 10       	cpse	r1, r0
     4d2:	10 1f       	adc	r17, r16
     4d4:	00 00       	nop
     4d6:	00 00       	nop
     4d8:	f0 10       	cpse	r15, r0
     4da:	ff ff       	.word	0xffff	; ????
     4dc:	ff ff       	.word	0xffff	; ????
     4de:	ff f0       	brie	.+62     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     4e0:	f0 f0       	brcs	.+60     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     4e2:	f0 f0       	brcs	.+60     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     4e4:	ff ff       	.word	0xffff	; ????
     4e6:	ff 00       	.word	0x00ff	; ????
     4e8:	00 00       	nop
     4ea:	00 00       	nop
     4ec:	ff ff       	.word	0xffff	; ????
     4ee:	0f 0f       	add	r16, r31
     4f0:	0f 0f       	add	r16, r31
     4f2:	0f 38       	cpi	r16, 0x8F	; 143
     4f4:	44 44       	sbci	r20, 0x44	; 68
     4f6:	38 44       	sbci	r19, 0x48	; 72
     4f8:	fc 4a       	sbci	r31, 0xAC	; 172
     4fa:	4a 4a       	sbci	r20, 0xAA	; 170
     4fc:	34 7e       	andi	r19, 0xE4	; 228
     4fe:	02 02       	muls	r16, r18
     500:	06 06       	cpc	r0, r22
     502:	02 7e       	andi	r16, 0xE2	; 226
     504:	02 7e       	andi	r16, 0xE2	; 226
     506:	02 63       	ori	r16, 0x32	; 50
     508:	55 49       	sbci	r21, 0x95	; 149
     50a:	41 63       	ori	r20, 0x31	; 49
     50c:	38 44       	sbci	r19, 0x48	; 72
     50e:	44 3c       	cpi	r20, 0xC4	; 196
     510:	04 40       	sbci	r16, 0x04	; 4
     512:	7e 20       	and	r7, r14
     514:	1e 20       	and	r1, r14
     516:	06 02       	muls	r16, r22
     518:	7e 02       	muls	r23, r30
     51a:	02 99       	sbic	0x00, 2	; 0
     51c:	a5 e7       	ldi	r26, 0x75	; 117
     51e:	a5 99       	sbic	0x14, 5	; 20
     520:	1c 2a       	or	r1, r28
     522:	49 2a       	or	r4, r25
     524:	1c 4c       	sbci	r17, 0xCC	; 204
     526:	72 01       	movw	r14, r4
     528:	72 4c       	sbci	r23, 0xC2	; 194
     52a:	30 4a       	sbci	r19, 0xA0	; 160
     52c:	4d 4d       	sbci	r20, 0xDD	; 221
     52e:	30 30       	cpi	r19, 0x00	; 0
     530:	48 78       	andi	r20, 0x88	; 136
     532:	48 30       	cpi	r20, 0x08	; 8
     534:	bc 62       	ori	r27, 0x2C	; 44
     536:	5a 46       	sbci	r21, 0x6A	; 106
     538:	3d 3e       	cpi	r19, 0xED	; 237
     53a:	49 49       	sbci	r20, 0x99	; 153
     53c:	49 00       	.word	0x0049	; ????
     53e:	7e 01       	movw	r14, r28
     540:	01 01       	movw	r0, r2
     542:	7e 2a       	or	r7, r30
     544:	2a 2a       	or	r2, r26
     546:	2a 2a       	or	r2, r26
     548:	44 44       	sbci	r20, 0x44	; 68
     54a:	5f 44       	sbci	r21, 0x4F	; 79
     54c:	44 40       	sbci	r20, 0x04	; 4
     54e:	51 4a       	sbci	r21, 0xA1	; 161
     550:	44 40       	sbci	r20, 0x04	; 4
     552:	40 44       	sbci	r20, 0x40	; 64
     554:	4a 51       	subi	r20, 0x1A	; 26
     556:	40 00       	.word	0x0040	; ????
     558:	00 ff       	sbrs	r16, 0
     55a:	01 03       	mulsu	r16, r17
     55c:	e0 80       	ld	r14, Z
     55e:	ff 00       	.word	0x00ff	; ????
     560:	00 08       	sbc	r0, r0
     562:	08 6b       	ori	r16, 0xB8	; 184
     564:	6b 08       	sbc	r6, r11
     566:	36 12       	cpse	r3, r22
     568:	36 24       	eor	r3, r6
     56a:	36 06       	cpc	r3, r22
     56c:	0f 09       	sbc	r16, r15
     56e:	0f 06       	cpc	r0, r31
     570:	00 00       	nop
     572:	18 18       	sub	r1, r8
     574:	00 00       	nop
     576:	00 10       	cpse	r0, r0
     578:	10 00       	.word	0x0010	; ????
     57a:	30 40       	sbci	r19, 0x00	; 0
     57c:	ff 01       	movw	r30, r30
     57e:	01 00       	.word	0x0001	; ????
     580:	1f 01       	movw	r2, r30
     582:	01 1e       	adc	r0, r17
     584:	00 19       	sub	r16, r0
     586:	1d 17       	cp	r17, r29
     588:	12 00       	.word	0x0012	; ????
     58a:	3c 3c       	cpi	r19, 0xCC	; 204
     58c:	3c 3c       	cpi	r19, 0xCC	; 204
     58e:	00 00       	nop
     590:	00 00       	nop
	...

00000594 <__ctors_start>:
     594:	56 09       	sbc	r21, r6

00000596 <__ctors_end>:
     596:	11 24       	eor	r1, r1
     598:	1f be       	out	0x3f, r1	; 63
     59a:	cf ef       	ldi	r28, 0xFF	; 255
     59c:	d0 e2       	ldi	r29, 0x20	; 32
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	cd bf       	out	0x3d, r28	; 61

000005a2 <__do_copy_data>:
     5a2:	12 e0       	ldi	r17, 0x02	; 2
     5a4:	a0 e0       	ldi	r26, 0x00	; 0
     5a6:	b1 e0       	ldi	r27, 0x01	; 1
     5a8:	e0 ee       	ldi	r30, 0xE0	; 224
     5aa:	f6 e2       	ldi	r31, 0x26	; 38
     5ac:	00 e0       	ldi	r16, 0x00	; 0
     5ae:	0b bf       	out	0x3b, r16	; 59
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__do_copy_data+0x14>
     5b2:	07 90       	elpm	r0, Z+
     5b4:	0d 92       	st	X+, r0
     5b6:	a2 33       	cpi	r26, 0x32	; 50
     5b8:	b1 07       	cpc	r27, r17
     5ba:	d9 f7       	brne	.-10     	; 0x5b2 <__do_copy_data+0x10>

000005bc <__do_clear_bss>:
     5bc:	26 e0       	ldi	r18, 0x06	; 6
     5be:	a2 e3       	ldi	r26, 0x32	; 50
     5c0:	b2 e0       	ldi	r27, 0x02	; 2
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <.do_clear_bss_start>

000005c4 <.do_clear_bss_loop>:
     5c4:	1d 92       	st	X+, r1

000005c6 <.do_clear_bss_start>:
     5c6:	a7 35       	cpi	r26, 0x57	; 87
     5c8:	b2 07       	cpc	r27, r18
     5ca:	e1 f7       	brne	.-8      	; 0x5c4 <.do_clear_bss_loop>

000005cc <__do_global_ctors>:
     5cc:	12 e0       	ldi	r17, 0x02	; 2
     5ce:	cb ec       	ldi	r28, 0xCB	; 203
     5d0:	d2 e0       	ldi	r29, 0x02	; 2
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <__do_global_ctors+0x10>
     5d4:	21 97       	sbiw	r28, 0x01	; 1
     5d6:	fe 01       	movw	r30, r28
     5d8:	0e 94 8a 10 	call	0x2114	; 0x2114 <__tablejump2__>
     5dc:	ca 3c       	cpi	r28, 0xCA	; 202
     5de:	d1 07       	cpc	r29, r17
     5e0:	c9 f7       	brne	.-14     	; 0x5d4 <__do_global_ctors+0x8>
     5e2:	11 d5       	rcall	.+2594   	; 0x1006 <main>
     5e4:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <_exit>

000005e8 <__bad_interrupt>:
     5e8:	b6 c2       	rjmp	.+1388   	; 0xb56 <__vector_default>

000005ea <_Z7initADCv>:
		myDisplay.drawString(0,0,"Calibrate");
		myDisplay.drawString(0,16,objectType);
		myDisplay.drawNumber(0,32,calibCount);
		myDisplay.show();
	}
}
     5ea:	10 ba       	out	0x10, r1	; 16
     5ec:	ea e7       	ldi	r30, 0x7A	; 122
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	80 68       	ori	r24, 0x80	; 128
     5f4:	80 83       	st	Z, r24
     5f6:	80 81       	ld	r24, Z
     5f8:	87 60       	ori	r24, 0x07	; 7
     5fa:	80 83       	st	Z, r24
     5fc:	ec e7       	ldi	r30, 0x7C	; 124
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	81 64       	ori	r24, 0x41	; 65
     604:	80 83       	st	Z, r24
     606:	08 95       	ret

00000608 <_Z17findLowestReadingPKc>:
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	ec 01       	movw	r28, r24
     60e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <reflQueueCount>
     612:	88 30       	cpi	r24, 0x08	; 8
     614:	c0 f5       	brcc	.+112    	; 0x686 <_Z17findLowestReadingPKc+0x7e>
     616:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     61a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     61e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     622:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     626:	28 17       	cp	r18, r24
     628:	39 07       	cpc	r19, r25
     62a:	40 f4       	brcc	.+16     	; 0x63c <_Z17findLowestReadingPKc+0x34>
     62c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lowestRefl>
     630:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lowestRefl+0x1>
     634:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     638:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     63c:	86 e4       	ldi	r24, 0x46	; 70
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	55 d3       	rcall	.+1706   	; 0xcec <_ZN11Framebuffer5clearEv>
     642:	2f e5       	ldi	r18, 0x5F	; 95
     644:	31 e0       	ldi	r19, 0x01	; 1
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	86 e4       	ldi	r24, 0x46	; 70
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	f5 d3       	rcall	.+2026   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
     654:	9e 01       	movw	r18, r28
     656:	40 e1       	ldi	r20, 0x10	; 16
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	86 e4       	ldi	r24, 0x46	; 70
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	ed d3       	rcall	.+2010   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
     664:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <reflQueueCount>
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	40 e2       	ldi	r20, 0x20	; 32
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	86 e4       	ldi	r24, 0x46	; 70
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	19 d4       	rcall	.+2098   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
     678:	86 e4       	ldi	r24, 0x46	; 70
     67a:	92 e0       	ldi	r25, 0x02	; 2
     67c:	48 d3       	rcall	.+1680   	; 0xd0e <_ZN11Framebuffer4showEv>
     67e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <reflQueueCount>
     682:	88 30       	cpi	r24, 0x08	; 8
     684:	40 f2       	brcs	.-112    	; 0x616 <_Z17findLowestReadingPKc+0xe>
     686:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <reflQueueCount>
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <_Z12calibrateADCv>:


void calibrateADC(){
	
	myDisplay.clear();
     690:	86 e4       	ldi	r24, 0x46	; 70
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	2b d3       	rcall	.+1622   	; 0xcec <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0,"Calibrate");
     696:	2f e5       	ldi	r18, 0x5F	; 95
     698:	31 e0       	ldi	r19, 0x01	; 1
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	86 e4       	ldi	r24, 0x46	; 70
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	cb d3       	rcall	.+1942   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,16,"Black");
     6a8:	20 e1       	ldi	r18, 0x10	; 16
     6aa:	31 e0       	ldi	r19, 0x01	; 1
     6ac:	40 e1       	ldi	r20, 0x10	; 16
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	86 e4       	ldi	r24, 0x46	; 70
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	c2 d3       	rcall	.+1924   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(0,32,0);
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e2       	ldi	r20, 0x20	; 32
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	86 e4       	ldi	r24, 0x46	; 70
     6c8:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
     6ca:	ef d3       	rcall	.+2014   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
     6cc:	86 e4       	ldi	r24, 0x46	; 70
     6ce:	92 e0       	ldi	r25, 0x02	; 2
	
	sei();
	motorForward();
     6d0:	1e d3       	rcall	.+1596   	; 0xd0e <_ZN11Framebuffer4showEv>
     6d2:	78 94       	sei
	//Black -> White -> Steel -> Aluminum
	findLowestReading("Black");
     6d4:	0e 94 5f 0c 	call	0x18be	; 0x18be <_Z12motorForwardv>
     6d8:	80 e1       	ldi	r24, 0x10	; 16
     6da:	91 e0       	ldi	r25, 0x01	; 1
	blackMinRef = calibReading - REFL_VALUE_BUFFER;
     6dc:	95 df       	rcall	.-214    	; 0x608 <_Z17findLowestReadingPKc>
     6de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6e6:	05 97       	sbiw	r24, 0x05	; 5
     6e8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <blackMinRef+0x1>
	findLowestReading("White");
     6ec:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <blackMinRef>
     6f0:	86 e1       	ldi	r24, 0x16	; 22
     6f2:	91 e0       	ldi	r25, 0x01	; 1
	whiteMinRef = calibReading - REFL_VALUE_BUFFER;
     6f4:	89 df       	rcall	.-238    	; 0x608 <_Z17findLowestReadingPKc>
     6f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6fe:	05 97       	sbiw	r24, 0x05	; 5
     700:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <whiteMinRef+0x1>
	findLowestReading("Steel");
     704:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <whiteMinRef>
     708:	8c e1       	ldi	r24, 0x1C	; 28
     70a:	91 e0       	ldi	r25, 0x01	; 1
	steelMinRef = calibReading - REFL_VALUE_BUFFER;
     70c:	7d df       	rcall	.-262    	; 0x608 <_Z17findLowestReadingPKc>
     70e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     712:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     716:	05 97       	sbiw	r24, 0x05	; 5
     718:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <steelMinRef+0x1>
	findLowestReading("Aluminum");
     71c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <steelMinRef>
     720:	82 e2       	ldi	r24, 0x22	; 34
     722:	91 e0       	ldi	r25, 0x01	; 1
	aluminumMinRef = calibReading - REFL_VALUE_BUFFER;
     724:	71 df       	rcall	.-286    	; 0x608 <_Z17findLowestReadingPKc>
     726:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     72a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     72e:	05 97       	sbiw	r24, 0x05	; 5
     730:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <aluminumMinRef+0x1>
		
	motorBrake();
     734:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <aluminumMinRef>
	myDisplay.clear();
     738:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_Z10motorBrakev>
     73c:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.drawString(0,0,"B:");
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	d5 d2       	rcall	.+1450   	; 0xcec <_ZN11Framebuffer5clearEv>
     742:	2b e2       	ldi	r18, 0x2B	; 43
     744:	31 e0       	ldi	r19, 0x01	; 1
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.drawNumber(24,0,blackMinRef);
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	75 d3       	rcall	.+1770   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
     754:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <blackMinRef>
     758:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <blackMinRef+0x1>
     75c:	40 e0       	ldi	r20, 0x00	; 0
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	68 e1       	ldi	r22, 0x18	; 24
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.drawString(0,16,"W:");
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	a0 d3       	rcall	.+1856   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
     76a:	2e e2       	ldi	r18, 0x2E	; 46
     76c:	31 e0       	ldi	r19, 0x01	; 1
     76e:	40 e1       	ldi	r20, 0x10	; 16
     770:	50 e0       	ldi	r21, 0x00	; 0
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.drawNumber(24,16,whiteMinRef);
     778:	92 e0       	ldi	r25, 0x02	; 2
     77a:	61 d3       	rcall	.+1730   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
     77c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <whiteMinRef>
     780:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <whiteMinRef+0x1>
     784:	40 e1       	ldi	r20, 0x10	; 16
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	68 e1       	ldi	r22, 0x18	; 24
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.drawString(0,32,"S:");
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	8c d3       	rcall	.+1816   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
     792:	21 e3       	ldi	r18, 0x31	; 49
     794:	31 e0       	ldi	r19, 0x01	; 1
     796:	40 e2       	ldi	r20, 0x20	; 32
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.drawNumber(24,32,steelMinRef);
     7a0:	92 e0       	ldi	r25, 0x02	; 2
     7a2:	4d d3       	rcall	.+1690   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
     7a4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <steelMinRef>
     7a8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <steelMinRef+0x1>
     7ac:	40 e2       	ldi	r20, 0x20	; 32
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	68 e1       	ldi	r22, 0x18	; 24
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.drawString(0,48,"A:");
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	78 d3       	rcall	.+1776   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
     7ba:	24 e3       	ldi	r18, 0x34	; 52
     7bc:	31 e0       	ldi	r19, 0x01	; 1
     7be:	40 e3       	ldi	r20, 0x30	; 48
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawNumber(24,48,aluminumMinRef);
     7c6:	86 e4       	ldi	r24, 0x46	; 70
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	39 d3       	rcall	.+1650   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
     7cc:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <aluminumMinRef>
     7d0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <aluminumMinRef+0x1>
     7d4:	40 e3       	ldi	r20, 0x30	; 48
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	68 e1       	ldi	r22, 0x18	; 24
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.show();
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	64 d3       	rcall	.+1736   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
     7e2:	86 e4       	ldi	r24, 0x46	; 70
     7e4:	92 e0       	ldi	r25, 0x02	; 2
	
	cli();
     7e6:	93 d2       	rcall	.+1318   	; 0xd0e <_ZN11Framebuffer4showEv>
     7e8:	f8 94       	cli
     7ea:	08 95       	ret

000007ec <__vector_29>:
	the lowest reflection reading is and save it in
	lowestRefl. Then it will start another ADC reading.
	Speed = ~0xa -> 309 readings per block.
	Speed = 0xff -> ~195 readings per block
*/
ISR(ADC_vect) {
     7ec:	1f 92       	push	r1
     7ee:	0f 92       	push	r0
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	0f 92       	push	r0
     7f4:	11 24       	eor	r1, r1
     7f6:	0b b6       	in	r0, 0x3b	; 59
     7f8:	0f 92       	push	r0
     7fa:	2f 93       	push	r18
     7fc:	3f 93       	push	r19
     7fe:	8f 93       	push	r24
     800:	9f 93       	push	r25
     802:	ef 93       	push	r30
     804:	ff 93       	push	r31
	//debugCount++;
 	
	//////////Moving Average filter (Note: need to calibrate motor speed so that adc reads 128 times going across blocks)
	//This one overflows and as such won't work for this project unless we significantly reduce the sampling rate
	//It also will not work in special cases where the belt stops a block right by the sensor.
	if(adcTotalCount < ADC_FILTER_COUNT){
     806:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
     80a:	80 32       	cpi	r24, 0x20	; 32
     80c:	a0 f4       	brcc	.+40     	; 0x836 <__vector_29+0x4a>
		adcAverage += ADC;
     80e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     812:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     816:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <adcAverage>
     81a:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <adcAverage+0x1>
     81e:	82 0f       	add	r24, r18
     820:	93 1f       	adc	r25, r19
     822:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <adcAverage+0x1>
     826:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <adcAverage>
		adcTotalCount++;
     82a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
     82e:	8f 5f       	subi	r24, 0xFF	; 255
     830:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
     834:	2d c0       	rjmp	.+90     	; 0x890 <__vector_29+0xa4>
	}
	else if(adcTotalCount == ADC_FILTER_COUNT){
     836:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
     83a:	80 32       	cpi	r24, 0x20	; 32
     83c:	49 f5       	brne	.+82     	; 0x890 <__vector_29+0xa4>
		adcAverage >>= ADC_FILTER_MOD_DIV;	//MA*/N
     83e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <adcAverage>
     842:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <adcAverage+0x1>
     846:	96 95       	lsr	r25
     848:	87 95       	ror	r24
     84a:	92 95       	swap	r25
     84c:	82 95       	swap	r24
     84e:	8f 70       	andi	r24, 0x0F	; 15
     850:	89 27       	eor	r24, r25
     852:	9f 70       	andi	r25, 0x0F	; 15
     854:	89 27       	eor	r24, r25
     856:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <adcAverage+0x1>
     85a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <adcAverage>
		adcTotalCount = 0;
     85e:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <__data_end>
		
		if(adcAverage < lowestRefl){
     862:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <adcAverage>
     866:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <adcAverage+0x1>
     86a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lowestRefl>
     86e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lowestRefl+0x1>
     872:	28 17       	cp	r18, r24
     874:	39 07       	cpc	r19, r25
     876:	40 f4       	brcc	.+16     	; 0x888 <__vector_29+0x9c>
			lowestRefl = adcAverage;
     878:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <adcAverage>
     87c:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <adcAverage+0x1>
     880:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <lowestRefl+0x1>
     884:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lowestRefl>
		if(adcAverage < pLowestRefl){
			pLowestRefl = adcAverage;
		}
		#endif
		
		adcAverage = 0;
     888:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <adcAverage+0x1>
     88c:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <adcAverage>
// 	if(ADC < pLowestRefl){
// 		pLowestRefl = ADC;
// 	}

	//Start another ADC conversion
	ADCSRA |= _BV(ADSC);
     890:	ea e7       	ldi	r30, 0x7A	; 122
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 81       	ld	r24, Z
     896:	80 64       	ori	r24, 0x40	; 64
     898:	80 83       	st	Z, r24
     89a:	ff 91       	pop	r31
     89c:	ef 91       	pop	r30
     89e:	9f 91       	pop	r25
     8a0:	8f 91       	pop	r24
     8a2:	3f 91       	pop	r19
     8a4:	2f 91       	pop	r18
     8a6:	0f 90       	pop	r0
     8a8:	0b be       	out	0x3b, r0	; 59
     8aa:	0f 90       	pop	r0
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	0f 90       	pop	r0
     8b0:	1f 90       	pop	r1
     8b2:	18 95       	reti

000008b4 <_Z10initExtIntv>:
volatile char blockReady = 0;
volatile char stepperRdy = 1; //*** turn this into extern when adding stepper

void initExtInt(void){
	//External interrupts on pin 2,3
	DDRD &= 0b11110011; 
     8b4:	8a b1       	in	r24, 0x0a	; 10
     8b6:	83 7f       	andi	r24, 0xF3	; 243
     8b8:	8a b9       	out	0x0a, r24	; 10
	
	//Turn off interrupt while configuring
	EIMSK = 0;
     8ba:	1d ba       	out	0x1d, r1	; 29
	
	//Any edge interrupt on PD2 (EXT INT2)
	//Falling edge interrupt on PD3 (EXT INT3)
	EICRA |= 0b10010000;
     8bc:	e9 e6       	ldi	r30, 0x69	; 105
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	80 81       	ld	r24, Z
     8c2:	80 69       	ori	r24, 0x90	; 144
     8c4:	80 83       	st	Z, r24
	
	//Turn on External Interrupt 2 and 3
	EIMSK = 0b1100;
     8c6:	8c e0       	ldi	r24, 0x0C	; 12
     8c8:	8d bb       	out	0x1d, r24	; 29
     8ca:	08 95       	ret

000008cc <__vector_3>:
	reading was. Add item to front of FIFO queue.
	
	TODO: Add a low range for each classification to make it
	more rubust.
*/
ISR(INT2_vect){
     8cc:	1f 92       	push	r1
     8ce:	0f 92       	push	r0
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	0f 92       	push	r0
     8d4:	11 24       	eor	r1, r1
     8d6:	0b b6       	in	r0, 0x3b	; 59
     8d8:	0f 92       	push	r0
     8da:	2f 93       	push	r18
     8dc:	3f 93       	push	r19
     8de:	4f 93       	push	r20
     8e0:	5f 93       	push	r21
     8e2:	6f 93       	push	r22
     8e4:	7f 93       	push	r23
     8e6:	8f 93       	push	r24
     8e8:	9f 93       	push	r25
     8ea:	af 93       	push	r26
     8ec:	bf 93       	push	r27
     8ee:	ef 93       	push	r30
     8f0:	ff 93       	push	r31
	//////////"Debounce" *** seems to work fine with 1 ms delay
	mTimer(5);
     8f2:	85 e0       	ldi	r24, 0x05	; 5
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_Z6mTimeri>
	//////////
	
	//if(REF_SENSOR_PORT & REF_SENSOR_PIN){
	if(PIND & 0x4){
     8fa:	4a 9b       	sbis	0x09, 2	; 9
     8fc:	15 c0       	rjmp	.+42     	; 0x928 <__vector_3+0x5c>
		//////////START ADC
		lowestRefl = 1023;
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	93 e0       	ldi	r25, 0x03	; 3
     902:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <lowestRefl+0x1>
     906:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lowestRefl>
		adcTotalCount = 0; 
     90a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <__data_end>
		adcAverage = 0;
     90e:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <adcAverage+0x1>
     912:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <adcAverage>
		
		//Enable ADC interrupt
		ADCSRA |= _BV(ADIE);
     916:	ea e7       	ldi	r30, 0x7A	; 122
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	88 60       	ori	r24, 0x08	; 8
     91e:	80 83       	st	Z, r24
		//Start ADC conversion
		ADCSRA |= _BV(ADSC);
     920:	80 81       	ld	r24, Z
     922:	80 64       	ori	r24, 0x40	; 64
     924:	80 83       	st	Z, r24
     926:	6a c0       	rjmp	.+212    	; 0x9fc <__vector_3+0x130>
		
	}
	else if((PIND & 0x4) == 0){
     928:	4a 99       	sbic	0x09, 2	; 9
     92a:	68 c0       	rjmp	.+208    	; 0x9fc <__vector_3+0x130>
		char unsigned itemValue = 0;
		//////////STOP ADC
		//Disable ADC interrupt
		ADCSRA &= ~_BV(ADIE);
     92c:	ea e7       	ldi	r30, 0x7A	; 122
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	87 7f       	andi	r24, 0xF7	; 247
     934:	80 83       	st	Z, r24
		//Cancel any pending ADC conversions
		ADCSRA &= ~_BV(ADSC);
     936:	80 81       	ld	r24, Z
     938:	8f 7b       	andi	r24, 0xBF	; 191
     93a:	80 83       	st	Z, r24
			maxRefl = lowestRefl;
		}
		#endif
		
		//////////CLASSIFY BLOCK
		if(lowestRefl > blackMinRef){
     93c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     940:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     944:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <blackMinRef>
     948:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <blackMinRef+0x1>
     94c:	82 17       	cp	r24, r18
     94e:	93 07       	cpc	r25, r19
     950:	18 f1       	brcs	.+70     	; 0x998 <__vector_3+0xcc>
			itemValue = BLACK;
		}
		else if(lowestRefl > whiteMinRef){
     952:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     956:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     95a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <whiteMinRef>
     95e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <whiteMinRef+0x1>
     962:	82 17       	cp	r24, r18
     964:	93 07       	cpc	r25, r19
     966:	d0 f0       	brcs	.+52     	; 0x99c <__vector_3+0xd0>
			itemValue = WHITE;
		}
		else if (lowestRefl > steelMinRef){
     968:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     96c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     970:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <steelMinRef>
     974:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <steelMinRef+0x1>
     978:	82 17       	cp	r24, r18
     97a:	93 07       	cpc	r25, r19
     97c:	88 f0       	brcs	.+34     	; 0x9a0 <__vector_3+0xd4>
			itemValue = STEEL;
		}
		else if(lowestRefl > aluminumMinRef){
     97e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     982:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     986:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <aluminumMinRef>
     98a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <aluminumMinRef+0x1>
     98e:	82 17       	cp	r24, r18
     990:	93 07       	cpc	r25, r19
     992:	40 f0       	brcs	.+16     	; 0x9a4 <__vector_3+0xd8>
		}
		else{
			#ifdef FAST_MODE
			itemValue = BLACK;
			#else
			itemValue = UNKNOWN;
     994:	94 e0       	ldi	r25, 0x04	; 4
     996:	07 c0       	rjmp	.+14     	; 0x9a6 <__vector_3+0xda>
		}
		#endif
		
		//////////CLASSIFY BLOCK
		if(lowestRefl > blackMinRef){
			itemValue = BLACK;
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	05 c0       	rjmp	.+10     	; 0x9a6 <__vector_3+0xda>
		}
		else if(lowestRefl > whiteMinRef){
			itemValue = WHITE;
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	03 c0       	rjmp	.+6      	; 0x9a6 <__vector_3+0xda>
		}
		else if (lowestRefl > steelMinRef){
			itemValue = STEEL;
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <__vector_3+0xda>
		}
		else if(lowestRefl > aluminumMinRef){
			itemValue = ALUMINUM;
     9a4:	93 e0       	ldi	r25, 0x03	; 3
			#endif
		}

		//////////ADD BLOCK TO QUEUE
		//Check to make sure we aren't passed max
		if(reflQueueCount > 7){ 
     9a6:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <reflQueueCount>
     9aa:	88 30       	cpi	r24, 0x08	; 8
     9ac:	18 f0       	brcs	.+6      	; 0x9b4 <__vector_3+0xe8>
			PORTC = 0xaa;
     9ae:	8a ea       	ldi	r24, 0xAA	; 170
     9b0:	88 b9       	out	0x08, r24	; 8
     9b2:	24 c0       	rjmp	.+72     	; 0x9fc <__vector_3+0x130>
		}
		else if(reflQueueCount == 0){
     9b4:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <reflQueueCount>
     9b8:	81 11       	cpse	r24, r1
     9ba:	0f c0       	rjmp	.+30     	; 0x9da <__vector_3+0x10e>
			reflQueueCount++;
     9bc:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <reflQueueCount>
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
     9c2:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <reflQueueCount>
			reflQueue[backOfQueue] = itemValue;
     9c6:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <backOfQueue>
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	e2 5c       	subi	r30, 0xC2	; 194
     9ce:	fd 4f       	sbci	r31, 0xFD	; 253
     9d0:	90 83       	st	Z, r25
			reflQueueChange = 1;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <reflQueueChange>
     9d8:	11 c0       	rjmp	.+34     	; 0x9fc <__vector_3+0x130>
		}
		else{
			reflQueueCount++;
     9da:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <reflQueueCount>
     9de:	8f 5f       	subi	r24, 0xFF	; 255
     9e0:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <reflQueueCount>
			backOfQueue = (backOfQueue + 1) & 7;
     9e4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <backOfQueue>
     9e8:	8f 5f       	subi	r24, 0xFF	; 255
     9ea:	87 70       	andi	r24, 0x07	; 7
     9ec:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <backOfQueue>
			reflQueue[backOfQueue] = itemValue;
     9f0:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <backOfQueue>
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	e2 5c       	subi	r30, 0xC2	; 194
     9f8:	fd 4f       	sbci	r31, 0xFD	; 253
     9fa:	90 83       	st	Z, r25
 		}	
		//Error checking for < 0? ***
		
	}
	//Clear interrupt flag
	EIFR = 0x4; 
     9fc:	84 e0       	ldi	r24, 0x04	; 4
     9fe:	8c bb       	out	0x1c, r24	; 28
	
}
     a00:	ff 91       	pop	r31
     a02:	ef 91       	pop	r30
     a04:	bf 91       	pop	r27
     a06:	af 91       	pop	r26
     a08:	9f 91       	pop	r25
     a0a:	8f 91       	pop	r24
     a0c:	7f 91       	pop	r23
     a0e:	6f 91       	pop	r22
     a10:	5f 91       	pop	r21
     a12:	4f 91       	pop	r20
     a14:	3f 91       	pop	r19
     a16:	2f 91       	pop	r18
     a18:	0f 90       	pop	r0
     a1a:	0b be       	out	0x3b, r0	; 59
     a1c:	0f 90       	pop	r0
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	0f 90       	pop	r0
     a22:	1f 90       	pop	r1
     a24:	18 95       	reti

00000a26 <__vector_4>:

ISR(INT3_vect){
     a26:	1f 92       	push	r1
     a28:	0f 92       	push	r0
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	0f 92       	push	r0
     a2e:	11 24       	eor	r1, r1
     a30:	0b b6       	in	r0, 0x3b	; 59
     a32:	0f 92       	push	r0
     a34:	2f 93       	push	r18
     a36:	3f 93       	push	r19
     a38:	4f 93       	push	r20
     a3a:	5f 93       	push	r21
     a3c:	6f 93       	push	r22
     a3e:	7f 93       	push	r23
     a40:	8f 93       	push	r24
     a42:	9f 93       	push	r25
     a44:	af 93       	push	r26
     a46:	bf 93       	push	r27
     a48:	ef 93       	push	r30
     a4a:	ff 93       	push	r31
	char nextItem = 0;
	//////////"Debounce" *** seems to work fine with 1 ms delay
	mTimer(10);
     a4c:	8a e0       	ldi	r24, 0x0A	; 10
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_Z6mTimeri>

	if((PIND & 0x8) == 0){
     a54:	4b 99       	sbic	0x09, 3	; 9
     a56:	6a c0       	rjmp	.+212    	; 0xb2c <__vector_4+0x106>
		if(stepperReady){
     a58:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <stepperReady>
     a5c:	88 23       	and	r24, r24
     a5e:	09 f4       	brne	.+2      	; 0xa62 <__vector_4+0x3c>
     a60:	5f c0       	rjmp	.+190    	; 0xb20 <__vector_4+0xfa>
			//////////PUT BLOCK IN BIN (leave motor on) 
			//PORTC++;
			//////////COUNT NUMBER OF EACH SORTED
			if(reflQueue[frontOfQueue] == BLACK){
     a62:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	e2 5c       	subi	r30, 0xC2	; 194
     a6a:	fd 4f       	sbci	r31, 0xFD	; 253
     a6c:	80 81       	ld	r24, Z
     a6e:	81 11       	cpse	r24, r1
     a70:	06 c0       	rjmp	.+12     	; 0xa7e <__vector_4+0x58>
				blackCount++;
     a72:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <blackCount>
     a76:	8f 5f       	subi	r24, 0xFF	; 255
     a78:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <blackCount>
     a7c:	29 c0       	rjmp	.+82     	; 0xad0 <__vector_4+0xaa>
			}
			else if(reflQueue[frontOfQueue] == WHITE){
     a7e:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	e2 5c       	subi	r30, 0xC2	; 194
     a86:	fd 4f       	sbci	r31, 0xFD	; 253
     a88:	80 81       	ld	r24, Z
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	31 f4       	brne	.+12     	; 0xa9a <__vector_4+0x74>
				whiteCount++;
     a8e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <whiteCount>
     a92:	8f 5f       	subi	r24, 0xFF	; 255
     a94:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <whiteCount>
     a98:	1b c0       	rjmp	.+54     	; 0xad0 <__vector_4+0xaa>
			}
			else if(reflQueue[frontOfQueue] == STEEL){
     a9a:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	e2 5c       	subi	r30, 0xC2	; 194
     aa2:	fd 4f       	sbci	r31, 0xFD	; 253
     aa4:	80 81       	ld	r24, Z
     aa6:	82 30       	cpi	r24, 0x02	; 2
     aa8:	31 f4       	brne	.+12     	; 0xab6 <__vector_4+0x90>
				steelCount++;
     aaa:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <steelCount>
     aae:	8f 5f       	subi	r24, 0xFF	; 255
     ab0:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <steelCount>
     ab4:	0d c0       	rjmp	.+26     	; 0xad0 <__vector_4+0xaa>
			}
			else if(reflQueue[frontOfQueue] == ALUMINUM){
     ab6:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	e2 5c       	subi	r30, 0xC2	; 194
     abe:	fd 4f       	sbci	r31, 0xFD	; 253
     ac0:	80 81       	ld	r24, Z
     ac2:	83 30       	cpi	r24, 0x03	; 3
     ac4:	29 f4       	brne	.+10     	; 0xad0 <__vector_4+0xaa>
				aluminumCount++;
     ac6:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <aluminumCount>
     aca:	8f 5f       	subi	r24, 0xFF	; 255
     acc:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <aluminumCount>
			}

			//////////DEQUEUE BLOCK
			if(reflQueueCount < 2){
     ad0:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <reflQueueCount>
     ad4:	82 30       	cpi	r24, 0x02	; 2
     ad6:	18 f4       	brcc	.+6      	; 0xade <__vector_4+0xb8>
				reflQueueCount = 0;
     ad8:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <reflQueueCount>
     adc:	27 c0       	rjmp	.+78     	; 0xb2c <__vector_4+0x106>
			}
			else{
				nextItem = (frontOfQueue+1) & 7; //& 7 implements a rotating array position
     ade:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <frontOfQueue>
     ae2:	8f 5f       	subi	r24, 0xFF	; 255
     ae4:	87 70       	andi	r24, 0x07	; 7
				if(reflQueue[frontOfQueue] != reflQueue[nextItem]){
     ae6:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	e2 5c       	subi	r30, 0xC2	; 194
     aee:	fd 4f       	sbci	r31, 0xFD	; 253
     af0:	20 81       	ld	r18, Z
     af2:	e8 2f       	mov	r30, r24
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	e2 5c       	subi	r30, 0xC2	; 194
     af8:	fd 4f       	sbci	r31, 0xFD	; 253
     afa:	90 81       	ld	r25, Z
     afc:	29 17       	cp	r18, r25
     afe:	29 f0       	breq	.+10     	; 0xb0a <__vector_4+0xe4>
					delayStepper = 1;
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	90 93 50 06 	sts	0x0650, r25	; 0x800650 <delayStepper>
					stepperReady = 0;
     b06:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <stepperReady>
				}
				frontOfQueue = nextItem; 
     b0a:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <frontOfQueue>
				reflQueueCount--;
     b0e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <reflQueueCount>
     b12:	81 50       	subi	r24, 0x01	; 1
     b14:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <reflQueueCount>
				reflQueueChange = 1;
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <reflQueueChange>
     b1e:	06 c0       	rjmp	.+12     	; 0xb2c <__vector_4+0x106>
			}
		}
		else{
			//Motor brake
			MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_BRAKE;
     b20:	82 b1       	in	r24, 0x02	; 2
     b22:	8f 73       	andi	r24, 0x3F	; 63
     b24:	82 b9       	out	0x02, r24	; 2
			blockReady = 1;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <blockReady>
		}
	}
	//Clear interrupt flag (else ISR runs twice)
	EIFR = 0x8; 
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	8c bb       	out	0x1c, r24	; 28
}
     b30:	ff 91       	pop	r31
     b32:	ef 91       	pop	r30
     b34:	bf 91       	pop	r27
     b36:	af 91       	pop	r26
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	7f 91       	pop	r23
     b3e:	6f 91       	pop	r22
     b40:	5f 91       	pop	r21
     b42:	4f 91       	pop	r20
     b44:	3f 91       	pop	r19
     b46:	2f 91       	pop	r18
     b48:	0f 90       	pop	r0
     b4a:	0b be       	out	0x3b, r0	; 59
     b4c:	0f 90       	pop	r0
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	0f 90       	pop	r0
     b52:	1f 90       	pop	r1
     b54:	18 95       	reti

00000b56 <__vector_default>:

ISR(BADISR_vect){
     b56:	1f 92       	push	r1
     b58:	0f 92       	push	r0
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	0f 92       	push	r0
     b5e:	11 24       	eor	r1, r1
     b60:	8f 93       	push	r24
	PORTC = 0xaa;
     b62:	8a ea       	ldi	r24, 0xAA	; 170
     b64:	88 b9       	out	0x08, r24	; 8
     b66:	8f 91       	pop	r24
     b68:	0f 90       	pop	r0
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	0f 90       	pop	r0
     b6e:	1f 90       	pop	r1
     b70:	18 95       	reti

00000b72 <_ZN11Framebuffer9drawPixelEhh>:
        this->buffer[buffer_location] = 0x00;
    }
}

void Framebuffer::invert(uint8_t status) {
    this->oled.invert(status);
     b72:	66 23       	and	r22, r22
     b74:	d4 f0       	brlt	.+52     	; 0xbaa <_ZN11Framebuffer9drawPixelEhh+0x38>
     b76:	40 34       	cpi	r20, 0x40	; 64
     b78:	c0 f4       	brcc	.+48     	; 0xbaa <_ZN11Framebuffer9drawPixelEhh+0x38>
     b7a:	24 2f       	mov	r18, r20
     b7c:	26 95       	lsr	r18
     b7e:	26 95       	lsr	r18
     b80:	26 95       	lsr	r18
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	30 e8       	ldi	r19, 0x80	; 128
     b86:	23 9f       	mul	r18, r19
     b88:	60 0d       	add	r22, r0
     b8a:	71 1d       	adc	r23, r1
     b8c:	11 24       	eor	r1, r1
     b8e:	fc 01       	movw	r30, r24
     b90:	e6 0f       	add	r30, r22
     b92:	f7 1f       	adc	r31, r23
     b94:	47 70       	andi	r20, 0x07	; 7
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <_ZN11Framebuffer9drawPixelEhh+0x2e>
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	4a 95       	dec	r20
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <_ZN11Framebuffer9drawPixelEhh+0x2a>
     ba4:	90 81       	ld	r25, Z
     ba6:	89 2b       	or	r24, r25
     ba8:	80 83       	st	Z, r24
     baa:	08 95       	ret

00000bac <_ZN11Framebuffer9drawVLineEhhh>:
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	22 23       	and	r18, r18
     bb8:	61 f0       	breq	.+24     	; 0xbd2 <_ZN11Framebuffer9drawVLineEhhh+0x26>
     bba:	c4 2f       	mov	r28, r20
     bbc:	f6 2e       	mov	r15, r22
     bbe:	8c 01       	movw	r16, r24
     bc0:	d2 2f       	mov	r29, r18
     bc2:	d4 0f       	add	r29, r20
     bc4:	4c 2f       	mov	r20, r28
     bc6:	6f 2d       	mov	r22, r15
     bc8:	c8 01       	movw	r24, r16
     bca:	d3 df       	rcall	.-90     	; 0xb72 <_ZN11Framebuffer9drawPixelEhh>
     bcc:	cf 5f       	subi	r28, 0xFF	; 255
     bce:	cd 13       	cpse	r28, r29
     bd0:	f9 cf       	rjmp	.-14     	; 0xbc4 <_ZN11Framebuffer9drawVLineEhhh+0x18>
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	08 95       	ret

00000bde <_ZN11Framebuffer9drawHLineEhhh>:
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	22 23       	and	r18, r18
     bea:	61 f0       	breq	.+24     	; 0xc04 <_ZN11Framebuffer9drawHLineEhhh+0x26>
     bec:	f4 2e       	mov	r15, r20
     bee:	c6 2f       	mov	r28, r22
     bf0:	8c 01       	movw	r16, r24
     bf2:	d2 2f       	mov	r29, r18
     bf4:	d6 0f       	add	r29, r22
     bf6:	4f 2d       	mov	r20, r15
     bf8:	6c 2f       	mov	r22, r28
     bfa:	c8 01       	movw	r24, r16
     bfc:	ba df       	rcall	.-140    	; 0xb72 <_ZN11Framebuffer9drawPixelEhh>
     bfe:	cf 5f       	subi	r28, 0xFF	; 255
     c00:	cd 13       	cpse	r28, r29
     c02:	f9 cf       	rjmp	.-14     	; 0xbf6 <_ZN11Framebuffer9drawHLineEhhh+0x18>
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	08 95       	ret

00000c10 <_ZN11Framebuffer13drawRectangleEhhhh>:
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	ec 01       	movw	r28, r24
     c22:	f6 2e       	mov	r15, r22
     c24:	14 2f       	mov	r17, r20
     c26:	d2 2e       	mov	r13, r18
     c28:	e2 2e       	mov	r14, r18
     c2a:	e6 1a       	sub	r14, r22
     c2c:	e3 94       	inc	r14
     c2e:	c0 2e       	mov	r12, r16
     c30:	c4 1a       	sub	r12, r20
     c32:	2e 2d       	mov	r18, r14
     c34:	d4 df       	rcall	.-88     	; 0xbde <_ZN11Framebuffer9drawHLineEhhh>
     c36:	2e 2d       	mov	r18, r14
     c38:	40 2f       	mov	r20, r16
     c3a:	6f 2d       	mov	r22, r15
     c3c:	ce 01       	movw	r24, r28
     c3e:	cf df       	rcall	.-98     	; 0xbde <_ZN11Framebuffer9drawHLineEhhh>
     c40:	2c 2d       	mov	r18, r12
     c42:	41 2f       	mov	r20, r17
     c44:	6f 2d       	mov	r22, r15
     c46:	ce 01       	movw	r24, r28
     c48:	b1 df       	rcall	.-158    	; 0xbac <_ZN11Framebuffer9drawVLineEhhh>
     c4a:	2c 2d       	mov	r18, r12
     c4c:	41 2f       	mov	r20, r17
     c4e:	6d 2d       	mov	r22, r13
     c50:	ce 01       	movw	r24, r28
     c52:	ac df       	rcall	.-168    	; 0xbac <_ZN11Framebuffer9drawVLineEhhh>
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	df 90       	pop	r13
     c62:	cf 90       	pop	r12
     c64:	08 95       	ret

00000c66 <_ZN11Framebuffer13drawRectangleEhhhhh>:
     c66:	6f 92       	push	r6
     c68:	7f 92       	push	r7
     c6a:	8f 92       	push	r8
     c6c:	9f 92       	push	r9
     c6e:	af 92       	push	r10
     c70:	bf 92       	push	r11
     c72:	cf 92       	push	r12
     c74:	df 92       	push	r13
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	6c 01       	movw	r12, r24
     c84:	64 2e       	mov	r6, r20
     c86:	e1 10       	cpse	r14, r1
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <_ZN11Framebuffer13drawRectangleEhhhhh+0x28>
     c8a:	c2 df       	rcall	.-124    	; 0xc10 <_ZN11Framebuffer13drawRectangleEhhhh>
     c8c:	20 c0       	rjmp	.+64     	; 0xcce <_ZN11Framebuffer13drawRectangleEhhhhh+0x68>
     c8e:	04 1b       	sub	r16, r20
     c90:	2f 5f       	subi	r18, 0xFF	; 255
     c92:	26 1b       	sub	r18, r22
     c94:	82 2e       	mov	r8, r18
     c96:	91 2c       	mov	r9, r1
     c98:	18 14       	cp	r1, r8
     c9a:	19 04       	cpc	r1, r9
     c9c:	c4 f4       	brge	.+48     	; 0xcce <_ZN11Framebuffer13drawRectangleEhhhhh+0x68>
     c9e:	76 2e       	mov	r7, r22
     ca0:	a1 2c       	mov	r10, r1
     ca2:	b1 2c       	mov	r11, r1
     ca4:	e0 2e       	mov	r14, r16
     ca6:	f1 2c       	mov	r15, r1
     ca8:	16 2d       	mov	r17, r6
     caa:	c0 e0       	ldi	r28, 0x00	; 0
     cac:	d0 e0       	ldi	r29, 0x00	; 0
     cae:	41 2f       	mov	r20, r17
     cb0:	67 2d       	mov	r22, r7
     cb2:	c6 01       	movw	r24, r12
     cb4:	5e df       	rcall	.-324    	; 0xb72 <_ZN11Framebuffer9drawPixelEhh>
     cb6:	21 96       	adiw	r28, 0x01	; 1
     cb8:	1f 5f       	subi	r17, 0xFF	; 255
     cba:	ec 16       	cp	r14, r28
     cbc:	fd 06       	cpc	r15, r29
     cbe:	bc f7       	brge	.-18     	; 0xcae <_ZN11Framebuffer13drawRectangleEhhhhh+0x48>
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	a8 1a       	sub	r10, r24
     cc4:	b8 0a       	sbc	r11, r24
     cc6:	73 94       	inc	r7
     cc8:	a8 14       	cp	r10, r8
     cca:	b9 04       	cpc	r11, r9
     ccc:	69 f7       	brne	.-38     	; 0xca8 <_ZN11Framebuffer13drawRectangleEhhhhh+0x42>
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	bf 90       	pop	r11
     ce0:	af 90       	pop	r10
     ce2:	9f 90       	pop	r9
     ce4:	8f 90       	pop	r8
     ce6:	7f 90       	pop	r7
     ce8:	6f 90       	pop	r6
     cea:	08 95       	ret

00000cec <_ZN11Framebuffer5clearEv>:
     cec:	fc 01       	movw	r30, r24
     cee:	9c 5f       	subi	r25, 0xFC	; 252
     cf0:	11 92       	st	Z+, r1
     cf2:	e8 17       	cp	r30, r24
     cf4:	f9 07       	cpc	r31, r25
     cf6:	e1 f7       	brne	.-8      	; 0xcf0 <_ZN11Framebuffer5clearEv+0x4>
     cf8:	08 95       	ret

00000cfa <_ZN11FramebufferC1Ev>:
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
     d00:	9c 5f       	subi	r25, 0xFC	; 252
     d02:	f8 d5       	rcall	.+3056   	; 0x18f4 <_ZN7SSD1306C1Ev>
     d04:	ce 01       	movw	r24, r28
     d06:	f2 df       	rcall	.-28     	; 0xcec <_ZN11Framebuffer5clearEv>
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	08 95       	ret

00000d0e <_ZN11Framebuffer4showEv>:
}

void Framebuffer::show() {
    this->oled.sendFramebuffer(this->buffer);
     d0e:	bc 01       	movw	r22, r24
     d10:	9c 5f       	subi	r25, 0xFC	; 252
     d12:	45 c6       	rjmp	.+3210   	; 0x199e <_ZN7SSD130615sendFramebufferEPh>
     d14:	08 95       	ret

00000d16 <_ZN11Framebuffer8drawCharEiihjjh>:

// Draw a character ***turn to uint8_t ?
//For size 2 the bottom right max is 117,50
//Size 2 fits 4 lines, at y= 0, 16, 32, 48
//fits 10 characters per line at multiples of 12
void Framebuffer::drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size) {
     d16:	2f 92       	push	r2
     d18:	3f 92       	push	r3
     d1a:	4f 92       	push	r4
     d1c:	5f 92       	push	r5
     d1e:	6f 92       	push	r6
     d20:	7f 92       	push	r7
     d22:	8f 92       	push	r8
     d24:	9f 92       	push	r9
     d26:	af 92       	push	r10
     d28:	bf 92       	push	r11
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <_ZN11Framebuffer8drawCharEiihjjh+0x26>
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <_ZN11Framebuffer8drawCharEiihjjh+0x28>
     d3e:	1f 92       	push	r1
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	5c 01       	movw	r10, r24
     d46:	4b 83       	std	Y+3, r20	; 0x03
     d48:	48 01       	movw	r8, r16
     d4a:	37 01       	movw	r6, r14
     d4c:	cd 82       	std	Y+5, r12	; 0x05
     d4e:	6a 83       	std	Y+2, r22	; 0x02
     d50:	2c 2c       	mov	r2, r12
     d52:	26 0e       	add	r2, r22
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	69 01       	movw	r12, r18
     d58:	cc 0c       	add	r12, r12
     d5a:	dd 1c       	adc	r13, r13
     d5c:	cc 0c       	add	r12, r12
     d5e:	dd 1c       	adc	r13, r13
     d60:	2c 0d       	add	r18, r12
     d62:	3d 1d       	adc	r19, r13
     d64:	c9 01       	movw	r24, r18
     d66:	88 56       	subi	r24, 0x68	; 104
     d68:	9f 4f       	sbci	r25, 0xFF	; 255
     d6a:	6c 01       	movw	r12, r24
    for (int8_t i=0; i<6; i++ ) {
        uint8_t line;
        if (i == 5)
        line = 0x0;
        else
        line = pgm_read_byte(font+(c*5)+i);
     d6c:	36 2e       	mov	r3, r22
//  (y >= _height)           || // Clip bottom
//  ((x + 6 * size - 1) < 0) || // Clip left
//  ((y + 8 * size - 1) < 0))   // Clip top
//  return;

    for (int8_t i=0; i<6; i++ ) {
     d6e:	19 82       	std	Y+1, r1	; 0x01
     d70:	44 2e       	mov	r4, r20
     d72:	98 e0       	ldi	r25, 0x08	; 8
     d74:	49 0e       	add	r4, r25
        uint8_t line;
        if (i == 5)
     d76:	e9 81       	ldd	r30, Y+1	; 0x01
     d78:	e5 30       	cpi	r30, 0x05	; 5
     d7a:	09 f4       	brne	.+2      	; 0xd7e <_ZN11Framebuffer8drawCharEiihjjh+0x68>
     d7c:	41 c0       	rjmp	.+130    	; 0xe00 <_ZN11Framebuffer8drawCharEiihjjh+0xea>
        line = 0x0;
        else
        line = pgm_read_byte(font+(c*5)+i);
     d7e:	f6 01       	movw	r30, r12
     d80:	14 91       	lpm	r17, Z
     d82:	3f c0       	rjmp	.+126    	; 0xe02 <_ZN11Framebuffer8drawCharEiihjjh+0xec>
        for (int8_t j = 0; j<8; j++) {
            if (line & 0x1) {
     d84:	10 ff       	sbrs	r17, 0
     d86:	11 c0       	rjmp	.+34     	; 0xdaa <_ZN11Framebuffer8drawCharEiihjjh+0x94>
                if (size == 1) // default size
     d88:	fd 81       	ldd	r31, Y+5	; 0x05
     d8a:	f1 30       	cpi	r31, 0x01	; 1
     d8c:	29 f4       	brne	.+10     	; 0xd98 <_ZN11Framebuffer8drawCharEiihjjh+0x82>
                drawPixel(x+i, y+j); //removed color***
     d8e:	4c 81       	ldd	r20, Y+4	; 0x04
     d90:	6a 81       	ldd	r22, Y+2	; 0x02
     d92:	c5 01       	movw	r24, r10
     d94:	ee de       	rcall	.-548    	; 0xb72 <_ZN11Framebuffer9drawPixelEhh>
     d96:	1c c0       	rjmp	.+56     	; 0xdd0 <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                else {  // big size
                    drawRectangle(x+(i*size), y+(j*size), size+x+(i*size), size+y+(j*size), 1);
     d98:	ee 24       	eor	r14, r14
     d9a:	e3 94       	inc	r14
     d9c:	0f 2d       	mov	r16, r15
     d9e:	22 2d       	mov	r18, r2
     da0:	45 2d       	mov	r20, r5
     da2:	63 2d       	mov	r22, r3
     da4:	c5 01       	movw	r24, r10
     da6:	5f df       	rcall	.-322    	; 0xc66 <_ZN11Framebuffer13drawRectangleEhhhhh>
     da8:	13 c0       	rjmp	.+38     	; 0xdd0 <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                }
                } else if (bg != color) { //*** remove?
     daa:	68 14       	cp	r6, r8
     dac:	79 04       	cpc	r7, r9
     dae:	81 f0       	breq	.+32     	; 0xdd0 <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                if (size == 1) // default size
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	81 30       	cpi	r24, 0x01	; 1
     db4:	29 f4       	brne	.+10     	; 0xdc0 <_ZN11Framebuffer8drawCharEiihjjh+0xaa>
                drawPixel(x+i, y+j); //removed color
     db6:	4c 81       	ldd	r20, Y+4	; 0x04
     db8:	6a 81       	ldd	r22, Y+2	; 0x02
     dba:	c5 01       	movw	r24, r10
     dbc:	da de       	rcall	.-588    	; 0xb72 <_ZN11Framebuffer9drawPixelEhh>
     dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                else {  // big size
                    drawRectangle(x+i*size, y+j*size, size+x+(i*size), size+y+(j*size), 1);
     dc0:	ee 24       	eor	r14, r14
     dc2:	e3 94       	inc	r14
     dc4:	0f 2d       	mov	r16, r15
     dc6:	22 2d       	mov	r18, r2
     dc8:	45 2d       	mov	r20, r5
     dca:	63 2d       	mov	r22, r3
     dcc:	c5 01       	movw	r24, r10
     dce:	4b df       	rcall	.-362    	; 0xc66 <_ZN11Framebuffer13drawRectangleEhhhhh>
                }
            }
            line >>= 1;
     dd0:	16 95       	lsr	r17
     dd2:	9d 81       	ldd	r25, Y+5	; 0x05
     dd4:	59 0e       	add	r5, r25
     dd6:	f9 0e       	add	r15, r25
     dd8:	ec 81       	ldd	r30, Y+4	; 0x04
     dda:	ef 5f       	subi	r30, 0xFF	; 255
     ddc:	ec 83       	std	Y+4, r30	; 0x04
        uint8_t line;
        if (i == 5)
        line = 0x0;
        else
        line = pgm_read_byte(font+(c*5)+i);
        for (int8_t j = 0; j<8; j++) {
     dde:	e4 11       	cpse	r30, r4
     de0:	d1 cf       	rjmp	.-94     	; 0xd84 <_ZN11Framebuffer8drawCharEiihjjh+0x6e>
     de2:	f9 81       	ldd	r31, Y+1	; 0x01
     de4:	ff 5f       	subi	r31, 0xFF	; 255
     de6:	f9 83       	std	Y+1, r31	; 0x01
     de8:	39 0e       	add	r3, r25
     dea:	29 0e       	add	r2, r25
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	8a 83       	std	Y+2, r24	; 0x02
     df2:	9f ef       	ldi	r25, 0xFF	; 255
     df4:	c9 1a       	sub	r12, r25
     df6:	d9 0a       	sbc	r13, r25
//  (y >= _height)           || // Clip bottom
//  ((x + 6 * size - 1) < 0) || // Clip left
//  ((y + 8 * size - 1) < 0))   // Clip top
//  return;

    for (int8_t i=0; i<6; i++ ) {
     df8:	f6 30       	cpi	r31, 0x06	; 6
     dfa:	09 f0       	breq	.+2      	; 0xdfe <_ZN11Framebuffer8drawCharEiihjjh+0xe8>
     dfc:	bc cf       	rjmp	.-136    	; 0xd76 <_ZN11Framebuffer8drawCharEiihjjh+0x60>
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <_ZN11Framebuffer8drawCharEiihjjh+0xf8>
        uint8_t line;
        if (i == 5)
        line = 0x0;
     e00:	10 e0       	ldi	r17, 0x00	; 0
     e02:	5b 80       	ldd	r5, Y+3	; 0x03
     e04:	f5 2c       	mov	r15, r5
     e06:	ed 81       	ldd	r30, Y+5	; 0x05
     e08:	fe 0e       	add	r15, r30
//  (y >= _height)           || // Clip bottom
//  ((x + 6 * size - 1) < 0) || // Clip left
//  ((y + 8 * size - 1) < 0))   // Clip top
//  return;

    for (int8_t i=0; i<6; i++ ) {
     e0a:	5c 82       	std	Y+4, r5	; 0x04
     e0c:	bb cf       	rjmp	.-138    	; 0xd84 <_ZN11Framebuffer8drawCharEiihjjh+0x6e>
                }
            }
            line >>= 1;
        }
    }
}
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	df 90       	pop	r13
     e26:	cf 90       	pop	r12
     e28:	bf 90       	pop	r11
     e2a:	af 90       	pop	r10
     e2c:	9f 90       	pop	r9
     e2e:	8f 90       	pop	r8
     e30:	7f 90       	pop	r7
     e32:	6f 90       	pop	r6
     e34:	5f 90       	pop	r5
     e36:	4f 90       	pop	r4
     e38:	3f 90       	pop	r3
     e3a:	2f 90       	pop	r2
     e3c:	08 95       	ret

00000e3e <_ZN11Framebuffer10drawStringEiiPKc>:

// Draw a string
void Framebuffer::drawString(int16_t x, int16_t y, const char *string){
     e3e:	6f 92       	push	r6
     e40:	7f 92       	push	r7
     e42:	8f 92       	push	r8
     e44:	9f 92       	push	r9
     e46:	af 92       	push	r10
     e48:	bf 92       	push	r11
     e4a:	cf 92       	push	r12
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	f9 01       	movw	r30, r18

    for(char j=x; *string; string++,j+=12){
     e58:	c6 2f       	mov	r28, r22
     e5a:	20 81       	ld	r18, Z
     e5c:	22 23       	and	r18, r18
     e5e:	c1 f0       	breq	.+48     	; 0xe90 <_ZN11Framebuffer10drawStringEiiPKc+0x52>
     e60:	5f 01       	movw	r10, r30
     e62:	3a 01       	movw	r6, r20
     e64:	4c 01       	movw	r8, r24
     e66:	8f ef       	ldi	r24, 0xFF	; 255
     e68:	a8 1a       	sub	r10, r24
     e6a:	b8 0a       	sbc	r11, r24
        //(x,y,char,color,bg,size)
        this->drawChar(j,y,*string,0,0,2);
     e6c:	6c 2f       	mov	r22, r28
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	68 94       	set
     e72:	cc 24       	eor	r12, r12
     e74:	c1 f8       	bld	r12, 1
     e76:	e1 2c       	mov	r14, r1
     e78:	f1 2c       	mov	r15, r1
     e7a:	00 e0       	ldi	r16, 0x00	; 0
     e7c:	10 e0       	ldi	r17, 0x00	; 0
     e7e:	a3 01       	movw	r20, r6
     e80:	c4 01       	movw	r24, r8
     e82:	49 df       	rcall	.-366    	; 0xd16 <_ZN11Framebuffer8drawCharEiihjjh>
}

// Draw a string
void Framebuffer::drawString(int16_t x, int16_t y, const char *string){

    for(char j=x; *string; string++,j+=12){
     e84:	c4 5f       	subi	r28, 0xF4	; 244
     e86:	f5 01       	movw	r30, r10
     e88:	21 91       	ld	r18, Z+
     e8a:	5f 01       	movw	r10, r30
     e8c:	21 11       	cpse	r18, r1
     e8e:	ee cf       	rjmp	.-36     	; 0xe6c <_ZN11Framebuffer10drawStringEiiPKc+0x2e>
        //(x,y,char,color,bg,size)
        this->drawChar(j,y,*string,0,0,2);
    }
    
}
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	cf 90       	pop	r12
     e9c:	bf 90       	pop	r11
     e9e:	af 90       	pop	r10
     ea0:	9f 90       	pop	r9
     ea2:	8f 90       	pop	r8
     ea4:	7f 90       	pop	r7
     ea6:	6f 90       	pop	r6
     ea8:	08 95       	ret

00000eaa <_ZN11Framebuffer10drawNumberEiii>:

void Framebuffer::drawNumber(int16_t x, int16_t y, int number){
     eaa:	8f 92       	push	r8
     eac:	9f 92       	push	r9
     eae:	af 92       	push	r10
     eb0:	bf 92       	push	r11
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	6c 01       	movw	r12, r24
     ec8:	5b 01       	movw	r10, r22
     eca:	4a 01       	movw	r8, r20
		i = 7;
	}
	char str[i];
	sprintf(str,"%i",number);
	this->drawString(x,y,str);
}
     ecc:	ed b6       	in	r14, 0x3d	; 61
     ece:	fe b6       	in	r15, 0x3e	; 62
    
}

void Framebuffer::drawNumber(int16_t x, int16_t y, int number){
	char i;
	if(number<10){
     ed0:	2a 30       	cpi	r18, 0x0A	; 10
     ed2:	31 05       	cpc	r19, r1
     ed4:	4c f0       	brlt	.+18     	; 0xee8 <_ZN11Framebuffer10drawNumberEiii+0x3e>
		i = 2;
	}
	else if(number < 100){
     ed6:	24 36       	cpi	r18, 0x64	; 100
     ed8:	31 05       	cpc	r19, r1
     eda:	44 f0       	brlt	.+16     	; 0xeec <_ZN11Framebuffer10drawNumberEiii+0x42>
		i = 3;
	}
	else if(number <1000){
     edc:	28 3e       	cpi	r18, 0xE8	; 232
     ede:	43 e0       	ldi	r20, 0x03	; 3
     ee0:	34 07       	cpc	r19, r20
     ee2:	34 f0       	brlt	.+12     	; 0xef0 <_ZN11Framebuffer10drawNumberEiii+0x46>
		i = 4;
	}
	else{
		i = 7;
     ee4:	87 e0       	ldi	r24, 0x07	; 7
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <_ZN11Framebuffer10drawNumberEiii+0x48>
}

void Framebuffer::drawNumber(int16_t x, int16_t y, int number){
	char i;
	if(number<10){
		i = 2;
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	03 c0       	rjmp	.+6      	; 0xef2 <_ZN11Framebuffer10drawNumberEiii+0x48>
	}
	else if(number < 100){
		i = 3;
     eec:	83 e0       	ldi	r24, 0x03	; 3
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <_ZN11Framebuffer10drawNumberEiii+0x48>
	}
	else if(number <1000){
		i = 4;
     ef0:	84 e0       	ldi	r24, 0x04	; 4
	}
	else{
		i = 7;
	}
	char str[i];
     ef2:	4d b7       	in	r20, 0x3d	; 61
     ef4:	5e b7       	in	r21, 0x3e	; 62
     ef6:	48 1b       	sub	r20, r24
     ef8:	51 09       	sbc	r21, r1
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	5e bf       	out	0x3e, r21	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	4d bf       	out	0x3d, r20	; 61
     f04:	0d b7       	in	r16, 0x3d	; 61
     f06:	1e b7       	in	r17, 0x3e	; 62
     f08:	0f 5f       	subi	r16, 0xFF	; 255
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
	sprintf(str,"%i",number);
     f0c:	3f 93       	push	r19
     f0e:	2f 93       	push	r18
     f10:	87 e3       	ldi	r24, 0x37	; 55
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	9f 93       	push	r25
     f16:	8f 93       	push	r24
     f18:	1f 93       	push	r17
     f1a:	0f 93       	push	r16
     f1c:	0e 94 93 10 	call	0x2126	; 0x2126 <sprintf>
	this->drawString(x,y,str);
     f20:	20 2f       	mov	r18, r16
     f22:	31 2f       	mov	r19, r17
     f24:	a4 01       	movw	r20, r8
     f26:	b5 01       	movw	r22, r10
     f28:	c6 01       	movw	r24, r12
     f2a:	89 df       	rcall	.-238    	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
}
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	fe be       	out	0x3e, r15	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	ed be       	out	0x3d, r14	; 61
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	9f 90       	pop	r9
     f58:	8f 90       	pop	r8
     f5a:	08 95       	ret

00000f5c <_ZN3I2CC1Ev>:

#include "I2C.h"

#define F_CPU 8000000

I2C::I2C() {}
     f5c:	08 95       	ret

00000f5e <_ZN3I2C4initEh>:

void I2C::init(uint8_t address) {
    this->address = address;
     f5e:	fc 01       	movw	r30, r24
     f60:	60 83       	st	Z, r22
    TWSR = 0;
     f62:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR = ((F_CPU/SCL_CLOCK)-16)/2;
     f66:	80 e2       	ldi	r24, 0x20	; 32
     f68:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     f6c:	08 95       	ret

00000f6e <_ZN3I2C5startEv>:
}

uint8_t I2C::start() {
     f6e:	dc 01       	movw	r26, r24
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     f70:	84 ea       	ldi	r24, 0xA4	; 164
     f72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while(!(TWCR & (1<<TWINT)));
     f76:	ec eb       	ldi	r30, 0xBC	; 188
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	90 81       	ld	r25, Z
     f7c:	99 23       	and	r25, r25
     f7e:	ec f7       	brge	.-6      	; 0xf7a <_ZN3I2C5startEv+0xc>

    twi_status_register = TW_STATUS & 0xF8;
     f80:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f84:	98 7f       	andi	r25, 0xF8	; 248
     f86:	11 96       	adiw	r26, 0x01	; 1
     f88:	9c 93       	st	X, r25
     f8a:	11 97       	sbiw	r26, 0x01	; 1
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
     f8c:	98 30       	cpi	r25, 0x08	; 8
     f8e:	11 f0       	breq	.+4      	; 0xf94 <_ZN3I2C5startEv+0x26>
     f90:	90 31       	cpi	r25, 0x10	; 16
     f92:	b9 f4       	brne	.+46     	; 0xfc2 <_ZN3I2C5startEv+0x54>
        return 1;
    }

    TWDR = address;
     f94:	8c 91       	ld	r24, X
     f96:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = (1<<TWINT) | (1<<TWEN);
     f9a:	84 e8       	ldi	r24, 0x84	; 132
     f9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    while(!(TWCR & (1<<TWINT)));
     fa0:	ec eb       	ldi	r30, 0xBC	; 188
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	90 81       	ld	r25, Z
     fa6:	99 23       	and	r25, r25
     fa8:	ec f7       	brge	.-6      	; 0xfa4 <_ZN3I2C5startEv+0x36>

    this->twi_status_register = TW_STATUS & 0xF8;
     faa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     fae:	98 7f       	andi	r25, 0xF8	; 248
     fb0:	11 96       	adiw	r26, 0x01	; 1
     fb2:	9c 93       	st	X, r25
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
     fb4:	98 31       	cpi	r25, 0x18	; 24
     fb6:	39 f0       	breq	.+14     	; 0xfc6 <_ZN3I2C5startEv+0x58>
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    while(!(TWCR & (1<<TWINT)));

    twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
        return 1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 34       	cpi	r25, 0x40	; 64
     fbc:	29 f4       	brne	.+10     	; 0xfc8 <_ZN3I2C5startEv+0x5a>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	08 95       	ret
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	08 95       	ret
    this->twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
        return 1;
    }

    return 0;
     fc6:	80 e0       	ldi	r24, 0x00	; 0
}
     fc8:	08 95       	ret

00000fca <_ZN3I2C5writeEh>:

uint8_t I2C::write(uint8_t data) {
     fca:	dc 01       	movw	r26, r24
    TWDR = data;
     fcc:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = (1<<TWINT) | (1<<TWEN);
     fd0:	84 e8       	ldi	r24, 0x84	; 132
     fd2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    while(!(TWCR & (1<<TWINT)));
     fd6:	ec eb       	ldi	r30, 0xBC	; 188
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	90 81       	ld	r25, Z
     fdc:	99 23       	and	r25, r25
     fde:	ec f7       	brge	.-6      	; 0xfda <_ZN3I2C5writeEh+0x10>

    this->twi_status_register = TW_STATUS & 0xF8;
     fe0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     fe4:	98 7f       	andi	r25, 0xF8	; 248
     fe6:	11 96       	adiw	r26, 0x01	; 1
     fe8:	9c 93       	st	X, r25
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	98 32       	cpi	r25, 0x28	; 40
     fee:	09 f4       	brne	.+2      	; 0xff2 <_ZN3I2C5writeEh+0x28>
     ff0:	80 e0       	ldi	r24, 0x00	; 0
    if (this->twi_status_register != TW_MT_DATA_ACK) {
        return 1;
    } else {
        return 0;
    }
}
     ff2:	08 95       	ret

00000ff4 <_ZN3I2C4stopEv>:

void I2C::stop(void) {
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     ff4:	84 e9       	ldi	r24, 0x94	; 148
     ff6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while(TWCR & (1<<TWSTO));
     ffa:	ec eb       	ldi	r30, 0xBC	; 188
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	84 fd       	sbrc	r24, 4
    1002:	fd cf       	rjmp	.-6      	; 0xffe <_ZN3I2C4stopEv+0xa>
    1004:	08 95       	ret

00001006 <main>:

int main(void){
	unsigned char menuSelector = 0;
	unsigned char rampDown = 0;
	
	cli(); //Ensure interrupts are turned off
    1006:	f8 94       	cli
	//Set system clock to 8MHz
	CLKPR = _BV(CLKPCE);
    1008:	e1 e6       	ldi	r30, 0x61	; 97
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 e8       	ldi	r24, 0x80	; 128
    100e:	80 83       	st	Z, r24
	CLKPR = 0;
    1010:	10 82       	st	Z, r1
	
	//pin 6 input for stepper calibration pin
	DDRE &= 0x0e; 
    1012:	8d b1       	in	r24, 0x0d	; 13
    1014:	8e 70       	andi	r24, 0x0E	; 14
    1016:	8d b9       	out	0x0d, r24	; 13
	//Leds output
	DDRC |= 0xff;
    1018:	87 b1       	in	r24, 0x07	; 7
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	87 b9       	out	0x07, r24	; 7
	//Joystick input w/ pullup up(pin7) left(pin6) select(pin5) 
	DDRB &= ~JS_UP_PIN & ~JS_LEFT_PIN & ~JS_SELECT_PIN; 
    101e:	84 b1       	in	r24, 0x04	; 4
    1020:	8f 71       	andi	r24, 0x1F	; 31
    1022:	84 b9       	out	0x04, r24	; 4
	PORTB |= JS_UP_PIN | JS_LEFT_PIN | JS_SELECT_PIN;
    1024:	85 b1       	in	r24, 0x05	; 5
    1026:	80 6e       	ori	r24, 0xE0	; 224
    1028:	85 b9       	out	0x05, r24	; 5
	//Joystick input w/ pullup down(pin5) right(pin4)
	DDRE &= ~JS_DOWN_PIN & ~JS_RIGHT_PIN;
    102a:	8d b1       	in	r24, 0x0d	; 13
    102c:	8f 7c       	andi	r24, 0xCF	; 207
    102e:	8d b9       	out	0x0d, r24	; 13
	PORTE |= JS_DOWN_PIN | JS_RIGHT_PIN;
    1030:	8e b1       	in	r24, 0x0e	; 14
    1032:	80 63       	ori	r24, 0x30	; 48
	
	initADC();
	initMotor();
    1034:	8e b9       	out	0x0e, r24	; 14
	initTimer();
	initExtInt();
	initMotor();
	initStepper();
    1036:	d9 da       	rcall	.-2638   	; 0x5ea <_Z7initADCv>
	
	motorBrake();
    1038:	24 d4       	rcall	.+2120   	; 0x1882 <_Z9initMotorv>
    103a:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_Z9initTimerv>
	motorSpeed(0xc2);//doesn't seem to like 0xdf
    103e:	3a dc       	rcall	.-1932   	; 0x8b4 <_Z10initExtIntv>
    1040:	20 d4       	rcall	.+2112   	; 0x1882 <_Z9initMotorv>
	homeStepper();
    1042:	f3 d4       	rcall	.+2534   	; 0x1a2a <_Z11initStepperv>
    1044:	41 d4       	rcall	.+2178   	; 0x18c8 <_Z10motorBrakev>
			menuSelector = MENU_CALIBRATION;
 		}
		//If Joystick Up -> highlight Start
		if((PINB & JS_UP_PIN) == 0){
			menu1Start();
			menuSelector = MENU_START;
    1046:	82 ec       	ldi	r24, 0xC2	; 194
			menu2Stepper();
			menuSelector = MENU_STEPPER;
		}
		else if((PINB & JS_UP_PIN) == 0 && menuSelector == MENU_STEPPER){
			menu2Home();
			menuSelector = MENU_HOME;
    1048:	35 d4       	rcall	.+2154   	; 0x18b4 <_Z10motorSpeedc>
	menu1Start();
 	while(1){
		//If Joystick down -> highlight Calibrate
 		if((PINE & JS_DOWN_PIN) == 0){
			menu1Calibration();
			menuSelector = MENU_CALIBRATION;
    104a:	7f d5       	rcall	.+2814   	; 0x1b4a <_Z11homeStepperv>
 		}
		//If Joystick Up -> highlight Start
		if((PINB & JS_UP_PIN) == 0){
			menu1Start();
			menuSelector = MENU_START;
    104c:	d0 e0       	ldi	r29, 0x00	; 0
	menu2Home();
	while(1){
		//If Joystick down -> highlight Optical S
		if((PINE & JS_DOWN_PIN) == 0 && menuSelector == MENU_STEPPER){
			menu2Refl();
			menuSelector = MENU_OPTICALS;
    104e:	02 e0       	ldi	r16, 0x02	; 2
    1050:	dd 24       	eor	r13, r13
    1052:	d3 94       	inc	r13
		else if((PINE & JS_DOWN_PIN) == 0 && menuSelector == MENU_HOME){
			mTimer(20);
			while((PINE & JS_DOWN_PIN) == 0){};
			mTimer(20);
			menu2Stepper();
			menuSelector = MENU_STEPPER;
    1054:	ed 2e       	mov	r14, r29
	
	
	////////MENU SCREEN 1
	menu:
	menuSelector = MENU_START;
	menu1Start();
    1056:	0f 2e       	mov	r0, r31
		}*/
	
	
	////////MENU SCREEN 1
	menu:
	menuSelector = MENU_START;
    1058:	f3 e0       	ldi	r31, 0x03	; 3
	menu1Start();
 	while(1){
		//If Joystick down -> highlight Calibrate
 		if((PINE & JS_DOWN_PIN) == 0){
    105a:	ff 2e       	mov	r15, r31
    105c:	f0 2d       	mov	r31, r0
			menu1Calibration();
    105e:	14 e0       	ldi	r17, 0x04	; 4
    1060:	c0 2e       	mov	r12, r16
			menuSelector = MENU_CALIBRATION;
    1062:	28 d1       	rcall	.+592    	; 0x12b4 <_Z10menu1Startv>
 		}
		//If Joystick Up -> highlight Start
		if((PINB & JS_UP_PIN) == 0){
    1064:	cd 2f       	mov	r28, r29
    1066:	65 99       	sbic	0x0c, 5	; 12
			menu1Start();
    1068:	02 c0       	rjmp	.+4      	; 0x106e <main+0x68>
    106a:	53 d1       	rcall	.+678    	; 0x1312 <_Z16menu1Calibrationv>
			menuSelector = MENU_START;
    106c:	cd 2d       	mov	r28, r13
		}
		//If Joystick select -> run currently selected option
		if((PINB & JS_SELECT_PIN) == 0){
    106e:	1f 99       	sbic	0x03, 7	; 3
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <main+0x70>
			//sei(); ***test without
			//Debounce
			mTimer(20);
    1072:	20 d1       	rcall	.+576    	; 0x12b4 <_Z10menu1Startv>
    1074:	ce 2d       	mov	r28, r14
    1076:	1d 99       	sbic	0x03, 5	; 3
    1078:	f6 cf       	rjmp	.-20     	; 0x1066 <main+0x60>
			while((PINB & JS_SELECT_PIN) == 0){};
    107a:	84 e1       	ldi	r24, 0x14	; 20
    107c:	90 e0       	ldi	r25, 0x00	; 0
			mTimer(20);
    107e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_Z6mTimeri>
    1082:	1d 9b       	sbis	0x03, 5	; 3
    1084:	fe cf       	rjmp	.-4      	; 0x1082 <main+0x7c>
			//cli(); *** test without
			if(menuSelector == MENU_CALIBRATION){
    1086:	84 e1       	ldi	r24, 0x14	; 20
    1088:	90 e0       	ldi	r25, 0x00	; 0
			}
			else if(reflQueue[frontOfQueue] == STEEL){
				stepGoalPosition = STEPPER_STEEL_POSITION;
			}
			else if(reflQueue[frontOfQueue] == ALUMINUM){
				stepGoalPosition = STEPPER_ALUMINIUM_POSITION;
    108a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_Z6mTimeri>
    108e:	c1 30       	cpi	r28, 0x01	; 1
			}
			else if(reflQueue[frontOfQueue] == WHITE){
				stepGoalPosition = STEPPER_WHITE_POSITION;
			}
			else if(reflQueue[frontOfQueue] == STEEL){
				stepGoalPosition = STEPPER_STEEL_POSITION;
    1090:	81 f0       	breq	.+32     	; 0x10b2 <main+0xac>
    1092:	cc e2       	ldi	r28, 0x2C	; 44
    1094:	d0 e0       	ldi	r29, 0x00	; 0
    1096:	5e 01       	movw	r10, r28
			
			if(reflQueue[frontOfQueue] == BLACK){
				stepGoalPosition = STEPPER_BLACK_POSITION;
			}
			else if(reflQueue[frontOfQueue] == WHITE){
				stepGoalPosition = STEPPER_WHITE_POSITION;
    1098:	0f 2e       	mov	r0, r31
    109a:	f0 e9       	ldi	r31, 0x90	; 144
    109c:	cf 2e       	mov	r12, r31
    109e:	d1 2c       	mov	r13, r1
    10a0:	f0 2d       	mov	r31, r0
				delayStepper = 0;
			}	
			
			
			if(reflQueue[frontOfQueue] == BLACK){
				stepGoalPosition = STEPPER_BLACK_POSITION;
    10a2:	0f 2e       	mov	r0, r31
    10a4:	fe e5       	ldi	r31, 0x5E	; 94
    10a6:	ef 2e       	mov	r14, r31
 	}

	//////////CALIBRATION LOOP SCREEN 2
	calibration:
	menuSelector = MENU_HOME;
	menu2Home();
    10a8:	f1 2c       	mov	r15, r1
    10aa:	f0 2d       	mov	r31, r0
		}
 	}

	//////////CALIBRATION LOOP SCREEN 2
	calibration:
	menuSelector = MENU_HOME;
    10ac:	02 ec       	ldi	r16, 0xC2	; 194
	menu2Home();
	while(1){
		//If Joystick down -> highlight Optical S
		if((PINE & JS_DOWN_PIN) == 0 && menuSelector == MENU_STEPPER){
    10ae:	10 e0       	ldi	r17, 0x00	; 0
    10b0:	60 c0       	rjmp	.+192    	; 0x1172 <main+0x16c>
    10b2:	5e d1       	rcall	.+700    	; 0x1370 <_Z9menu2Homev>
    10b4:	c0 2f       	mov	r28, r16
    10b6:	65 99       	sbic	0x0c, 5	; 12
			menu2Refl();
			menuSelector = MENU_OPTICALS;
		}
		else if((PINE & JS_DOWN_PIN) == 0 && menuSelector == MENU_HOME){
    10b8:	dc c0       	rjmp	.+440    	; 0x1272 <main+0x26c>
    10ba:	c4 30       	cpi	r28, 0x04	; 4
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <main+0xba>
    10be:	d9 c0       	rjmp	.+434    	; 0x1272 <main+0x26c>
			mTimer(20);
			while((PINE & JS_DOWN_PIN) == 0){};
    10c0:	d5 c0       	rjmp	.+426    	; 0x126c <main+0x266>
    10c2:	c2 30       	cpi	r28, 0x02	; 2
			mTimer(20);
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <main+0xc2>
    10c6:	d7 c0       	rjmp	.+430    	; 0x1276 <main+0x270>
    10c8:	d9 c0       	rjmp	.+434    	; 0x127c <main+0x276>
			menu2Stepper();
    10ca:	65 9b       	sbis	0x0c, 5	; 12
			menuSelector = MENU_STEPPER;
    10cc:	fe cf       	rjmp	.-4      	; 0x10ca <main+0xc4>
    10ce:	84 e1       	ldi	r24, 0x14	; 20
		}
		//If Joystick Up -> highlight Stepper
		else if((PINB & JS_UP_PIN) == 0 && menuSelector == MENU_OPTICALS){
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_Z6mTimeri>
    10d6:	6e d1       	rcall	.+732    	; 0x13b4 <_Z12menu2Stepperv>
			mTimer(20);
			while((PINB & JS_UP_PIN) == 0){};
    10d8:	c1 2f       	mov	r28, r17
    10da:	ed cf       	rjmp	.-38     	; 0x10b6 <main+0xb0>
			mTimer(20);
    10dc:	c3 30       	cpi	r28, 0x03	; 3
    10de:	09 f0       	breq	.+2      	; 0x10e2 <main+0xdc>
    10e0:	d1 c0       	rjmp	.+418    	; 0x1284 <main+0x27e>
			menu2Stepper();
    10e2:	d3 c0       	rjmp	.+422    	; 0x128a <main+0x284>
			menuSelector = MENU_STEPPER;
    10e4:	1f 9b       	sbis	0x03, 7	; 3
		}
		else if((PINB & JS_UP_PIN) == 0 && menuSelector == MENU_STEPPER){
    10e6:	fe cf       	rjmp	.-4      	; 0x10e4 <main+0xde>
    10e8:	84 e1       	ldi	r24, 0x14	; 20
    10ea:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if((PINB & JS_LEFT_PIN) == 0){
			goto menu;
		}
		//If Joystick select -> run currently selected option
		else if((PINB & JS_SELECT_PIN) == 0){
    10ec:	f5 d7       	rcall	.+4074   	; 0x20d8 <_Z6mTimeri>
			mTimer(20);
    10ee:	62 d1       	rcall	.+708    	; 0x13b4 <_Z12menu2Stepperv>
    10f0:	c1 2f       	mov	r28, r17
    10f2:	e1 cf       	rjmp	.-62     	; 0x10b6 <main+0xb0>
    10f4:	c4 30       	cpi	r28, 0x04	; 4
			while((PINB & JS_SELECT_PIN) == 0){};
    10f6:	09 f0       	breq	.+2      	; 0x10fa <main+0xf4>
    10f8:	cc c0       	rjmp	.+408    	; 0x1292 <main+0x28c>
			mTimer(20);
    10fa:	ce c0       	rjmp	.+412    	; 0x1298 <main+0x292>
    10fc:	1d 99       	sbic	0x03, 5	; 3
    10fe:	db cf       	rjmp	.-74     	; 0x10b6 <main+0xb0>
    1100:	84 e1       	ldi	r24, 0x14	; 20
			if(menuSelector == MENU_OPTICALS){
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	e9 d7       	rcall	.+4050   	; 0x20d8 <_Z6mTimeri>
				calibrateADC();
    1106:	1d 9b       	sbis	0x03, 5	; 3
    1108:	fe cf       	rjmp	.-4      	; 0x1106 <main+0x100>
    110a:	84 e1       	ldi	r24, 0x14	; 20
				//Reset Queue and front/back 
				for(unsigned char i = 0; i<8;i++){
					reflQueue[i] = 0;
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	e4 d7       	rcall	.+4040   	; 0x20d8 <_Z6mTimeri>
    1110:	c3 30       	cpi	r28, 0x03	; 3
    1112:	d1 f4       	brne	.+52     	; 0x1148 <main+0x142>
			while((PINB & JS_SELECT_PIN) == 0){};
			mTimer(20);
			if(menuSelector == MENU_OPTICALS){
				calibrateADC();
				//Reset Queue and front/back 
				for(unsigned char i = 0; i<8;i++){
    1114:	bd da       	rcall	.-2694   	; 0x690 <_Z12calibrateADCv>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
					reflQueue[i] = 0;
				}
				frontOfQueue = 0;
    111a:	fc 01       	movw	r30, r24
    111c:	e2 5c       	subi	r30, 0xC2	; 194
				backOfQueue = 0;
    111e:	fd 4f       	sbci	r31, 0xFD	; 253
				//Continue showing calibration results till user presses Select
				while(1){
					if((PINB & JS_SELECT_PIN) == 0){
    1120:	10 82       	st	Z, r1
						mTimer(20);
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	88 30       	cpi	r24, 0x08	; 8
    1126:	91 05       	cpc	r25, r1
						while((PINB & JS_SELECT_PIN) == 0){};
    1128:	c1 f7       	brne	.-16     	; 0x111a <main+0x114>
						mTimer(20);
    112a:	d0 93 3c 02 	sts	0x023C, r29	; 0x80023c <frontOfQueue>
    112e:	d0 93 3b 02 	sts	0x023B, r29	; 0x80023b <backOfQueue>
						goto calibration;
					}
				}
				
			}
			else if(menuSelector == MENU_HOME){
    1132:	1d 99       	sbic	0x03, 5	; 3
				homeStepper();
    1134:	fe cf       	rjmp	.-4      	; 0x1132 <main+0x12c>
				goto menu;
			}
			else if(menuSelector == MENU_STEPPER){
    1136:	84 e1       	ldi	r24, 0x14	; 20
    1138:	90 e0       	ldi	r25, 0x00	; 0
				stepperCalibration();
    113a:	ce d7       	rcall	.+3996   	; 0x20d8 <_Z6mTimeri>
				goto calibration;
    113c:	1d 9b       	sbis	0x03, 5	; 3
		}
	}
		
	//////////DISPLAY RESULTS MENU SCREEN 3
	displayResults:
	menuDebugQ();
    113e:	fe cf       	rjmp	.-4      	; 0x113c <main+0x136>
    1140:	84 e1       	ldi	r24, 0x14	; 20
	while(1){
		if((PINB & JS_LEFT_PIN) == 0){
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	c9 d7       	rcall	.+3986   	; 0x20d8 <_Z6mTimeri>
			rampDown = 0;
			goto mainLoop;
		}
		else if(JS_UP_PRESSED){
    1146:	b5 cf       	rjmp	.-150    	; 0x10b2 <main+0xac>
			menuDebugQ();
    1148:	c2 30       	cpi	r28, 0x02	; 2
		}
		else if(JS_DOWN_PRESSED){
			menuDisplayItemCount();
    114a:	11 f4       	brne	.+4      	; 0x1150 <main+0x14a>
    114c:	fe d4       	rcall	.+2556   	; 0x1b4a <_Z11homeStepperv>
    114e:	88 cf       	rjmp	.-240    	; 0x1060 <main+0x5a>
		}
	}
		
    //////////MAIN LOOP
	mainLoop:
	myDisplay.clear();
    1150:	c4 30       	cpi	r28, 0x04	; 4
    1152:	09 f0       	breq	.+2      	; 0x1156 <main+0x150>
    1154:	b0 cf       	rjmp	.-160    	; 0x10b6 <main+0xb0>
    1156:	0e d5       	rcall	.+2588   	; 0x1b74 <_Z18stepperCalibrationv>
	myDisplay.drawString(column(1),row(1),"Running...");
    1158:	ac cf       	rjmp	.-168    	; 0x10b2 <main+0xac>
    115a:	70 d1       	rcall	.+736    	; 0x143c <_Z10menuDebugQv>
    115c:	1e 9b       	sbis	0x03, 6	; 3
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <main+0x16c>
    1160:	1f 99       	sbic	0x03, 7	; 3
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <main+0x162>
    1164:	6b d1       	rcall	.+726    	; 0x143c <_Z10menuDebugQv>
    1166:	fa cf       	rjmp	.-12     	; 0x115c <main+0x156>
    1168:	88 81       	ld	r24, Y
	myDisplay.show();
    116a:	85 fd       	sbrc	r24, 5
    116c:	f7 cf       	rjmp	.-18     	; 0x115c <main+0x156>
    116e:	4e d2       	rcall	.+1180   	; 0x160c <_Z20menuDisplayItemCountv>
    1170:	f5 cf       	rjmp	.-22     	; 0x115c <main+0x156>
	motorForward(); 
    1172:	86 e4       	ldi	r24, 0x46	; 70
    1174:	92 e0       	ldi	r25, 0x02	; 2
	startStepper();
    1176:	ba dd       	rcall	.-1164   	; 0xcec <_ZN11Framebuffer5clearEv>
    1178:	2a e3       	ldi	r18, 0x3A	; 58
	sei();
    117a:	31 e0       	ldi	r19, 0x01	; 1
    117c:	40 e0       	ldi	r20, 0x00	; 0
		//Debugging routines
		//menuDebugQ();
		//menuDebugS();
		
		//while(1){};
		if(reflQueueChange){
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	86 e4       	ldi	r24, 0x46	; 70
    1186:	92 e0       	ldi	r25, 0x02	; 2
			//turn off interrupts? ***
			cli();
    1188:	5a de       	rcall	.-844    	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
			if(delayStepper){
    118a:	86 e4       	ldi	r24, 0x46	; 70
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	bf dd       	rcall	.-1154   	; 0xd0e <_ZN11Framebuffer4showEv>
    1190:	96 d3       	rcall	.+1836   	; 0x18be <_Z12motorForwardv>
// 				if(delayStepper == 2){
// 					mTimer(100);
// 				}
// 				else{
					mTimer(STEPPER_MOVE_DELAY);
    1192:	55 d4       	rcall	.+2218   	; 0x1a3e <_Z12startStepperv>
    1194:	78 94       	sei
    1196:	91 2c       	mov	r9, r1
    1198:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <reflQueueChange>
				//}
				delayStepper = 0;
    119c:	88 23       	and	r24, r24
			}	
			
			
			if(reflQueue[frontOfQueue] == BLACK){
    119e:	09 f4       	brne	.+2      	; 0x11a2 <main+0x19c>
    11a0:	40 c0       	rjmp	.+128    	; 0x1222 <main+0x21c>
    11a2:	f8 94       	cli
    11a4:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <delayStepper>
    11a8:	88 23       	and	r24, r24
    11aa:	29 f0       	breq	.+10     	; 0x11b6 <main+0x1b0>
    11ac:	88 ec       	ldi	r24, 0xC8	; 200
				stepGoalPosition = STEPPER_BLACK_POSITION;
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	93 d7       	rcall	.+3878   	; 0x20d8 <_Z6mTimeri>
    11b2:	10 92 50 06 	sts	0x0650, r1	; 0x800650 <delayStepper>
    11b6:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
			}
			else if(reflQueue[frontOfQueue] == WHITE){
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	e2 5c       	subi	r30, 0xC2	; 194
    11be:	fd 4f       	sbci	r31, 0xFD	; 253
    11c0:	80 81       	ld	r24, Z
    11c2:	81 11       	cpse	r24, r1
    11c4:	05 c0       	rjmp	.+10     	; 0x11d0 <main+0x1ca>
    11c6:	10 93 54 06 	sts	0x0654, r17	; 0x800654 <stepGoalPosition+0x1>
				stepGoalPosition = STEPPER_WHITE_POSITION;
    11ca:	00 93 53 06 	sts	0x0653, r16	; 0x800653 <stepGoalPosition>
    11ce:	26 c0       	rjmp	.+76     	; 0x121c <main+0x216>
    11d0:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
			}
			else if(reflQueue[frontOfQueue] == STEEL){
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	e2 5c       	subi	r30, 0xC2	; 194
    11d8:	fd 4f       	sbci	r31, 0xFD	; 253
    11da:	80 81       	ld	r24, Z
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	29 f4       	brne	.+10     	; 0x11ea <main+0x1e4>
				stepGoalPosition = STEPPER_STEEL_POSITION;
    11e0:	f0 92 54 06 	sts	0x0654, r15	; 0x800654 <stepGoalPosition+0x1>
    11e4:	e0 92 53 06 	sts	0x0653, r14	; 0x800653 <stepGoalPosition>
    11e8:	19 c0       	rjmp	.+50     	; 0x121c <main+0x216>
			}
			else if(reflQueue[frontOfQueue] == ALUMINUM){
    11ea:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	e2 5c       	subi	r30, 0xC2	; 194
    11f2:	fd 4f       	sbci	r31, 0xFD	; 253
    11f4:	80 81       	ld	r24, Z
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	29 f4       	brne	.+10     	; 0x1204 <main+0x1fe>
				stepGoalPosition = STEPPER_ALUMINIUM_POSITION;
    11fa:	d0 92 54 06 	sts	0x0654, r13	; 0x800654 <stepGoalPosition+0x1>
    11fe:	c0 92 53 06 	sts	0x0653, r12	; 0x800653 <stepGoalPosition>
			}

			reflQueueChange = 0;
    1202:	0c c0       	rjmp	.+24     	; 0x121c <main+0x216>
			//turn interrupts back on? ***
			sei();
    1204:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
		}
		
		//Allows user to go to results display
		if((PINE & JS_RIGHT_PIN) == 0){
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	e2 5c       	subi	r30, 0xC2	; 194
			//Brake motor
			MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_BRAKE;
    120c:	fd 4f       	sbci	r31, 0xFD	; 253
    120e:	80 81       	ld	r24, Z
    1210:	83 30       	cpi	r24, 0x03	; 3
			//Wait for motor to stop before turning off interrupts
			mTimer(MOTOR_BRAKE_TIME_MS); 
    1212:	21 f4       	brne	.+8      	; 0x121c <main+0x216>
    1214:	b0 92 54 06 	sts	0x0654, r11	; 0x800654 <stepGoalPosition+0x1>
			cli();
    1218:	a0 92 53 06 	sts	0x0653, r10	; 0x800653 <stepGoalPosition>
			goto displayResults;
		}
		else if(JS_DOWN_PRESSED){
    121c:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <reflQueueChange>
			rampDown = 1;	
		}
		
		if(rampDown){
    1220:	78 94       	sei
    1222:	88 81       	ld	r24, Y
    1224:	84 fd       	sbrc	r24, 4
			menuDisplayValue(rampDown,"RampD");
    1226:	08 c0       	rjmp	.+16     	; 0x1238 <main+0x232>
    1228:	82 b1       	in	r24, 0x02	; 2
    122a:	8f 73       	andi	r24, 0x3F	; 63
    122c:	82 b9       	out	0x02, r24	; 2
			if(rampDown < 40){
    122e:	84 e6       	ldi	r24, 0x64	; 100
    1230:	90 e0       	ldi	r25, 0x00	; 0
				rampDown++;
    1232:	52 d7       	rcall	.+3748   	; 0x20d8 <_Z6mTimeri>
    1234:	f8 94       	cli
			}
			else{
				if(!reflQueueCount){
    1236:	91 cf       	rjmp	.-222    	; 0x115a <main+0x154>
    1238:	88 81       	ld	r24, Y
    123a:	85 ff       	sbrs	r24, 5
					mTimer(500);
    123c:	30 c0       	rjmp	.+96     	; 0x129e <main+0x298>
    123e:	99 20       	and	r9, r9
    1240:	09 f4       	brne	.+2      	; 0x1244 <main+0x23e>
					MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_BRAKE;
    1242:	aa cf       	rjmp	.-172    	; 0x1198 <main+0x192>
    1244:	65 e4       	ldi	r22, 0x45	; 69
    1246:	71 e0       	ldi	r23, 0x01	; 1
					goto displayResults;
    1248:	89 2d       	mov	r24, r9
	menuSelector = MENU_HOME;
	menu2Home();
	while(1){
		//If Joystick down -> highlight Optical S
		if((PINE & JS_DOWN_PIN) == 0 && menuSelector == MENU_STEPPER){
			menu2Refl();
    124a:	69 d2       	rcall	.+1234   	; 0x171e <_Z16menuDisplayValuehPKc>
			menuSelector = MENU_OPTICALS;
    124c:	87 e2       	ldi	r24, 0x27	; 39
    124e:	89 15       	cp	r24, r9
		}
		else if((PINE & JS_DOWN_PIN) == 0 && menuSelector == MENU_HOME){
    1250:	10 f0       	brcs	.+4      	; 0x1256 <main+0x250>
    1252:	93 94       	inc	r9
			mTimer(20);
			menu2Stepper();
			menuSelector = MENU_STEPPER;
		}
		//If Joystick Up -> highlight Stepper
		else if((PINB & JS_UP_PIN) == 0 && menuSelector == MENU_OPTICALS){
    1254:	a1 cf       	rjmp	.-190    	; 0x1198 <main+0x192>
    1256:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <reflQueueCount>
		if((PINE & JS_DOWN_PIN) == 0 && menuSelector == MENU_STEPPER){
			menu2Refl();
			menuSelector = MENU_OPTICALS;
		}
		else if((PINE & JS_DOWN_PIN) == 0 && menuSelector == MENU_HOME){
			mTimer(20);
    125a:	81 11       	cpse	r24, r1
    125c:	9d cf       	rjmp	.-198    	; 0x1198 <main+0x192>
    125e:	84 ef       	ldi	r24, 0xF4	; 244
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	3a d7       	rcall	.+3700   	; 0x20d8 <_Z6mTimeri>
			while((PINB & JS_UP_PIN) == 0){};
			mTimer(20);
			menu2Stepper();
			menuSelector = MENU_STEPPER;
		}
		else if((PINB & JS_UP_PIN) == 0 && menuSelector == MENU_STEPPER){
    1264:	82 b1       	in	r24, 0x02	; 2
    1266:	8f 73       	andi	r24, 0x3F	; 63
    1268:	82 b9       	out	0x02, r24	; 2
			menu2Stepper();
			menuSelector = MENU_STEPPER;
		}
		//If Joystick Up -> highlight Stepper
		else if((PINB & JS_UP_PIN) == 0 && menuSelector == MENU_OPTICALS){
			mTimer(20);
    126a:	77 cf       	rjmp	.-274    	; 0x115a <main+0x154>
    126c:	c5 d0       	rcall	.+394    	; 0x13f8 <_Z9menu2Reflv>
    126e:	cf 2d       	mov	r28, r15
    1270:	22 cf       	rjmp	.-444    	; 0x10b6 <main+0xb0>
    1272:	65 9b       	sbis	0x0c, 5	; 12
		}
		else if((PINB & JS_UP_PIN) == 0 && menuSelector == MENU_STEPPER){
			menu2Home();
			menuSelector = MENU_HOME;
		}
		else if((PINB & JS_LEFT_PIN) == 0){
    1274:	26 cf       	rjmp	.-436    	; 0x10c2 <main+0xbc>
    1276:	1f 9b       	sbis	0x03, 7	; 3
    1278:	31 cf       	rjmp	.-414    	; 0x10dc <main+0xd6>
			mTimer(20);
			menu2Stepper();
			menuSelector = MENU_STEPPER;
		}
		else if((PINB & JS_UP_PIN) == 0 && menuSelector == MENU_STEPPER){
			menu2Home();
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <main+0x27e>
    127c:	84 e1       	ldi	r24, 0x14	; 20
			menuSelector = MENU_HOME;
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	2b d7       	rcall	.+3670   	; 0x20d8 <_Z6mTimeri>
		else if(JS_DOWN_PRESSED){
			rampDown = 1;	
		}
		
		if(rampDown){
			menuDisplayValue(rampDown,"RampD");
    1282:	23 cf       	rjmp	.-442    	; 0x10ca <main+0xc4>
    1284:	1f 9b       	sbis	0x03, 7	; 3
    1286:	36 cf       	rjmp	.-404    	; 0x10f4 <main+0xee>
    1288:	04 c0       	rjmp	.+8      	; 0x1292 <main+0x28c>
    128a:	84 e1       	ldi	r24, 0x14	; 20
			mTimer(MOTOR_BRAKE_TIME_MS); 
			cli();
			goto displayResults;
		}
		else if(JS_DOWN_PRESSED){
			rampDown = 1;	
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	24 d7       	rcall	.+3656   	; 0x20d8 <_Z6mTimeri>
    1290:	29 cf       	rjmp	.-430    	; 0x10e4 <main+0xde>
    1292:	1e 99       	sbic	0x03, 6	; 3
    1294:	33 cf       	rjmp	.-410    	; 0x10fc <main+0xf6>
    1296:	e5 ce       	rjmp	.-566    	; 0x1062 <main+0x5c>
    1298:	6b d0       	rcall	.+214    	; 0x1370 <_Z9menu2Homev>
    129a:	cc 2d       	mov	r28, r12
    129c:	0c cf       	rjmp	.-488    	; 0x10b6 <main+0xb0>
    129e:	65 e4       	ldi	r22, 0x45	; 69
    12a0:	71 e0       	ldi	r23, 0x01	; 1
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	3c d2       	rcall	.+1144   	; 0x171e <_Z16menuDisplayValuehPKc>
    12a6:	99 24       	eor	r9, r9
    12a8:	93 94       	inc	r9
    12aa:	d3 cf       	rjmp	.-90     	; 0x1252 <main+0x24c>

000012ac <_GLOBAL__sub_I_debug>:
extern volatile unsigned char delayStepper;
extern volatile unsigned char blockReady;
extern volatile unsigned char stepperReady;


Framebuffer myDisplay;
    12ac:	86 e4       	ldi	r24, 0x46	; 70
    12ae:	92 e0       	ldi	r25, 0x02	; 2
    12b0:	24 cd       	rjmp	.-1464   	; 0xcfa <_ZN11FramebufferC1Ev>
    12b2:	08 95       	ret

000012b4 <_Z10menu1Startv>:
extern volatile unsigned char aluminumCount;
extern volatile unsigned int debugCount;
extern volatile unsigned int adcAverage;
extern volatile unsigned char adcTotalCount;

void menu1Start(){
    12b4:	ef 92       	push	r14
    12b6:	0f 93       	push	r16
	myDisplay.clear();
    12b8:	86 e4       	ldi	r24, 0x46	; 70
    12ba:	92 e0       	ldi	r25, 0x02	; 2
    12bc:	17 dd       	rcall	.-1490   	; 0xcec <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0,"Item Sorter");
    12be:	2b e4       	ldi	r18, 0x4B	; 75
    12c0:	31 e0       	ldi	r19, 0x01	; 1
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	86 e4       	ldi	r24, 0x46	; 70
    12cc:	92 e0       	ldi	r25, 0x02	; 2
    12ce:	b7 dd       	rcall	.-1170   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawRectangle(0,16,127,17,1);
    12d0:	ee 24       	eor	r14, r14
    12d2:	e3 94       	inc	r14
    12d4:	01 e1       	ldi	r16, 0x11	; 17
    12d6:	2f e7       	ldi	r18, 0x7F	; 127
    12d8:	40 e1       	ldi	r20, 0x10	; 16
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	86 e4       	ldi	r24, 0x46	; 70
    12de:	92 e0       	ldi	r25, 0x02	; 2
    12e0:	c2 dc       	rcall	.-1660   	; 0xc66 <_ZN11Framebuffer13drawRectangleEhhhhh>
	myDisplay.drawString(0,20,">Start");
    12e2:	27 e5       	ldi	r18, 0x57	; 87
    12e4:	31 e0       	ldi	r19, 0x01	; 1
    12e6:	44 e1       	ldi	r20, 0x14	; 20
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	86 e4       	ldi	r24, 0x46	; 70
    12f0:	92 e0       	ldi	r25, 0x02	; 2
    12f2:	a5 dd       	rcall	.-1206   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,36," Calibrate");
    12f4:	2e e5       	ldi	r18, 0x5E	; 94
    12f6:	31 e0       	ldi	r19, 0x01	; 1
    12f8:	44 e2       	ldi	r20, 0x24	; 36
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	86 e4       	ldi	r24, 0x46	; 70
    1302:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    1304:	9c dd       	rcall	.-1224   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
    1306:	86 e4       	ldi	r24, 0x46	; 70
    1308:	92 e0       	ldi	r25, 0x02	; 2
    130a:	01 dd       	rcall	.-1534   	; 0xd0e <_ZN11Framebuffer4showEv>
}
    130c:	0f 91       	pop	r16
    130e:	ef 90       	pop	r14
    1310:	08 95       	ret

00001312 <_Z16menu1Calibrationv>:

void menu1Calibration(){
    1312:	ef 92       	push	r14
    1314:	0f 93       	push	r16
	myDisplay.clear();
    1316:	86 e4       	ldi	r24, 0x46	; 70
    1318:	92 e0       	ldi	r25, 0x02	; 2
    131a:	e8 dc       	rcall	.-1584   	; 0xcec <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0,"Item Sorter");
    131c:	2b e4       	ldi	r18, 0x4B	; 75
    131e:	31 e0       	ldi	r19, 0x01	; 1
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	86 e4       	ldi	r24, 0x46	; 70
    132a:	92 e0       	ldi	r25, 0x02	; 2
    132c:	88 dd       	rcall	.-1264   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawRectangle(0,16,127,17,1);
    132e:	ee 24       	eor	r14, r14
    1330:	e3 94       	inc	r14
    1332:	01 e1       	ldi	r16, 0x11	; 17
    1334:	2f e7       	ldi	r18, 0x7F	; 127
    1336:	40 e1       	ldi	r20, 0x10	; 16
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	86 e4       	ldi	r24, 0x46	; 70
    133c:	92 e0       	ldi	r25, 0x02	; 2
    133e:	93 dc       	rcall	.-1754   	; 0xc66 <_ZN11Framebuffer13drawRectangleEhhhhh>
	myDisplay.drawString(0,20," Start");
    1340:	29 e6       	ldi	r18, 0x69	; 105
    1342:	31 e0       	ldi	r19, 0x01	; 1
    1344:	44 e1       	ldi	r20, 0x14	; 20
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	86 e4       	ldi	r24, 0x46	; 70
    134e:	92 e0       	ldi	r25, 0x02	; 2
    1350:	76 dd       	rcall	.-1300   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,36,">Calibrate");
    1352:	20 e7       	ldi	r18, 0x70	; 112
    1354:	31 e0       	ldi	r19, 0x01	; 1
    1356:	44 e2       	ldi	r20, 0x24	; 36
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	86 e4       	ldi	r24, 0x46	; 70
    1360:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    1362:	6d dd       	rcall	.-1318   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
    1364:	86 e4       	ldi	r24, 0x46	; 70
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	d2 dc       	rcall	.-1628   	; 0xd0e <_ZN11Framebuffer4showEv>
}
    136a:	0f 91       	pop	r16
    136c:	ef 90       	pop	r14
    136e:	08 95       	ret

00001370 <_Z9menu2Homev>:
void menu2Home(){
	myDisplay.clear();
    1370:	86 e4       	ldi	r24, 0x46	; 70
    1372:	92 e0       	ldi	r25, 0x02	; 2
    1374:	bb dc       	rcall	.-1674   	; 0xcec <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0,">Home Step");
    1376:	2b e7       	ldi	r18, 0x7B	; 123
    1378:	31 e0       	ldi	r19, 0x01	; 1
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	86 e4       	ldi	r24, 0x46	; 70
    1384:	92 e0       	ldi	r25, 0x02	; 2
    1386:	5b dd       	rcall	.-1354   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,16," Stepper");
    1388:	26 e8       	ldi	r18, 0x86	; 134
    138a:	31 e0       	ldi	r19, 0x01	; 1
    138c:	40 e1       	ldi	r20, 0x10	; 16
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	86 e4       	ldi	r24, 0x46	; 70
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	52 dd       	rcall	.-1372   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,32," Optical S");
    139a:	2f e8       	ldi	r18, 0x8F	; 143
    139c:	31 e0       	ldi	r19, 0x01	; 1
    139e:	40 e2       	ldi	r20, 0x20	; 32
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	86 e4       	ldi	r24, 0x46	; 70
    13a8:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    13aa:	49 dd       	rcall	.-1390   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
    13ac:	86 e4       	ldi	r24, 0x46	; 70
    13ae:	92 e0       	ldi	r25, 0x02	; 2
    13b0:	ae cc       	rjmp	.-1700   	; 0xd0e <_ZN11Framebuffer4showEv>
    13b2:	08 95       	ret

000013b4 <_Z12menu2Stepperv>:
}
void menu2Stepper(){
	myDisplay.clear();
    13b4:	86 e4       	ldi	r24, 0x46	; 70
    13b6:	92 e0       	ldi	r25, 0x02	; 2
    13b8:	99 dc       	rcall	.-1742   	; 0xcec <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0," Home Step");
    13ba:	2a e9       	ldi	r18, 0x9A	; 154
    13bc:	31 e0       	ldi	r19, 0x01	; 1
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	86 e4       	ldi	r24, 0x46	; 70
    13c8:	92 e0       	ldi	r25, 0x02	; 2
    13ca:	39 dd       	rcall	.-1422   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,16,">Stepper");
    13cc:	25 ea       	ldi	r18, 0xA5	; 165
    13ce:	31 e0       	ldi	r19, 0x01	; 1
    13d0:	40 e1       	ldi	r20, 0x10	; 16
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	86 e4       	ldi	r24, 0x46	; 70
    13da:	92 e0       	ldi	r25, 0x02	; 2
    13dc:	30 dd       	rcall	.-1440   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,32," Optical S");
    13de:	2f e8       	ldi	r18, 0x8F	; 143
    13e0:	31 e0       	ldi	r19, 0x01	; 1
    13e2:	40 e2       	ldi	r20, 0x20	; 32
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	86 e4       	ldi	r24, 0x46	; 70
    13ec:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    13ee:	27 dd       	rcall	.-1458   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
    13f0:	86 e4       	ldi	r24, 0x46	; 70
    13f2:	92 e0       	ldi	r25, 0x02	; 2
    13f4:	8c cc       	rjmp	.-1768   	; 0xd0e <_ZN11Framebuffer4showEv>
    13f6:	08 95       	ret

000013f8 <_Z9menu2Reflv>:
}
void menu2Refl(){
	myDisplay.clear();
    13f8:	86 e4       	ldi	r24, 0x46	; 70
    13fa:	92 e0       	ldi	r25, 0x02	; 2
    13fc:	77 dc       	rcall	.-1810   	; 0xcec <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0," Home Step");
    13fe:	2a e9       	ldi	r18, 0x9A	; 154
    1400:	31 e0       	ldi	r19, 0x01	; 1
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	86 e4       	ldi	r24, 0x46	; 70
    140c:	92 e0       	ldi	r25, 0x02	; 2
    140e:	17 dd       	rcall	.-1490   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,16," Stepper");
    1410:	26 e8       	ldi	r18, 0x86	; 134
    1412:	31 e0       	ldi	r19, 0x01	; 1
    1414:	40 e1       	ldi	r20, 0x10	; 16
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	86 e4       	ldi	r24, 0x46	; 70
    141e:	92 e0       	ldi	r25, 0x02	; 2
    1420:	0e dd       	rcall	.-1508   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,32,">Optical S");
    1422:	2e ea       	ldi	r18, 0xAE	; 174
    1424:	31 e0       	ldi	r19, 0x01	; 1
    1426:	40 e2       	ldi	r20, 0x20	; 32
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	86 e4       	ldi	r24, 0x46	; 70
    1430:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    1432:	05 dd       	rcall	.-1526   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
    1434:	86 e4       	ldi	r24, 0x46	; 70
    1436:	92 e0       	ldi	r25, 0x02	; 2
    1438:	6a cc       	rjmp	.-1836   	; 0xd0e <_ZN11Framebuffer4showEv>
    143a:	08 95       	ret

0000143c <_Z10menuDebugQv>:
}

void menuDebugQ(){
    143c:	ef 92       	push	r14
    143e:	0f 93       	push	r16
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
	myDisplay.clear();
    1444:	86 e4       	ldi	r24, 0x46	; 70
    1446:	92 e0       	ldi	r25, 0x02	; 2
    1448:	51 dc       	rcall	.-1886   	; 0xcec <_ZN11Framebuffer5clearEv>
	
	#ifndef CALIBRATE_REFL
	myDisplay.drawString(0,0,"Queue");
    144a:	29 eb       	ldi	r18, 0xB9	; 185
    144c:	31 e0       	ldi	r19, 0x01	; 1
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	86 e4       	ldi	r24, 0x46	; 70
    1458:	92 e0       	ldi	r25, 0x02	; 2
    145a:	f1 dc       	rcall	.-1566   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(72,0,lowestRefl);
    145c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
    1460:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	68 e4       	ldi	r22, 0x48	; 72
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	86 e4       	ldi	r24, 0x46	; 70
    146e:	92 e0       	ldi	r25, 0x02	; 2
    1470:	1c dd       	rcall	.-1480   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
	#else //
	myDisplay.drawNumber(0,0,pLowestRefl);
	myDisplay.drawNumber(72,0,maxRefl); 
	#endif
	
	myDisplay.drawRectangle(0,16,127,17,1);
    1472:	ee 24       	eor	r14, r14
    1474:	e3 94       	inc	r14
    1476:	01 e1       	ldi	r16, 0x11	; 17
    1478:	2f e7       	ldi	r18, 0x7F	; 127
    147a:	40 e1       	ldi	r20, 0x10	; 16
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	86 e4       	ldi	r24, 0x46	; 70
    1480:	92 e0       	ldi	r25, 0x02	; 2
    1482:	f1 db       	rcall	.-2078   	; 0xc66 <_ZN11Framebuffer13drawRectangleEhhhhh>
	myDisplay.drawNumber(0,20,reflQueue[0]); 
    1484:	ce e3       	ldi	r28, 0x3E	; 62
    1486:	d2 e0       	ldi	r29, 0x02	; 2
    1488:	28 81       	ld	r18, Y
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	44 e1       	ldi	r20, 0x14	; 20
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	86 e4       	ldi	r24, 0x46	; 70
    1496:	92 e0       	ldi	r25, 0x02	; 2
    1498:	08 dd       	rcall	.-1520   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawNumber(12,20,reflQueue[1]);
    149a:	29 81       	ldd	r18, Y+1	; 0x01
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	44 e1       	ldi	r20, 0x14	; 20
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	6c e0       	ldi	r22, 0x0C	; 12
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	86 e4       	ldi	r24, 0x46	; 70
    14a8:	92 e0       	ldi	r25, 0x02	; 2
    14aa:	ff dc       	rcall	.-1538   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawNumber(24,20,reflQueue[2]);
    14ac:	2a 81       	ldd	r18, Y+2	; 0x02
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	44 e1       	ldi	r20, 0x14	; 20
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	68 e1       	ldi	r22, 0x18	; 24
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	86 e4       	ldi	r24, 0x46	; 70
    14ba:	92 e0       	ldi	r25, 0x02	; 2
    14bc:	f6 dc       	rcall	.-1556   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawNumber(36,20,reflQueue[3]);
    14be:	2b 81       	ldd	r18, Y+3	; 0x03
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	44 e1       	ldi	r20, 0x14	; 20
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	64 e2       	ldi	r22, 0x24	; 36
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	86 e4       	ldi	r24, 0x46	; 70
    14cc:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.drawNumber(48,20,reflQueue[4]);
    14ce:	ed dc       	rcall	.-1574   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
    14d0:	2c 81       	ldd	r18, Y+4	; 0x04
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	44 e1       	ldi	r20, 0x14	; 20
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	60 e3       	ldi	r22, 0x30	; 48
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.drawNumber(60,20,reflQueue[5]);
    14de:	92 e0       	ldi	r25, 0x02	; 2
    14e0:	e4 dc       	rcall	.-1592   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
    14e2:	2d 81       	ldd	r18, Y+5	; 0x05
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	44 e1       	ldi	r20, 0x14	; 20
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	6c e3       	ldi	r22, 0x3C	; 60
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.drawNumber(72,20,reflQueue[6]);
    14f0:	92 e0       	ldi	r25, 0x02	; 2
    14f2:	db dc       	rcall	.-1610   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
    14f4:	2e 81       	ldd	r18, Y+6	; 0x06
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	44 e1       	ldi	r20, 0x14	; 20
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	68 e4       	ldi	r22, 0x48	; 72
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.drawNumber(84,20,reflQueue[7]);
    1502:	92 e0       	ldi	r25, 0x02	; 2
    1504:	d2 dc       	rcall	.-1628   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
    1506:	2f 81       	ldd	r18, Y+7	; 0x07
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	44 e1       	ldi	r20, 0x14	; 20
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	64 e5       	ldi	r22, 0x54	; 84
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.drawNumber(108,20,reflQueueCount);
    1514:	92 e0       	ldi	r25, 0x02	; 2
    1516:	c9 dc       	rcall	.-1646   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
    1518:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <reflQueueCount>
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	44 e1       	ldi	r20, 0x14	; 20
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	6c e6       	ldi	r22, 0x6C	; 108
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	86 e4       	ldi	r24, 0x46	; 70
    1528:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.drawString(12*frontOfQueue,36,"f");
    152a:	bf dc       	rcall	.-1666   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
    152c:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <frontOfQueue>
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	cb 01       	movw	r24, r22
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	68 0f       	add	r22, r24
    153a:	79 1f       	adc	r23, r25
    153c:	66 0f       	add	r22, r22
    153e:	77 1f       	adc	r23, r23
    1540:	66 0f       	add	r22, r22
    1542:	77 1f       	adc	r23, r23
    1544:	2f eb       	ldi	r18, 0xBF	; 191
    1546:	31 e0       	ldi	r19, 0x01	; 1
    1548:	44 e2       	ldi	r20, 0x24	; 36
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	86 e4       	ldi	r24, 0x46	; 70
    154e:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.drawString(12*(backOfQueue),36,"b");
    1550:	76 dc       	rcall	.-1812   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
    1552:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <backOfQueue>
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	cb 01       	movw	r24, r22
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	68 0f       	add	r22, r24
    1560:	79 1f       	adc	r23, r25
    1562:	66 0f       	add	r22, r22
    1564:	77 1f       	adc	r23, r23
    1566:	66 0f       	add	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	21 ec       	ldi	r18, 0xC1	; 193
    156c:	31 e0       	ldi	r19, 0x01	; 1
    156e:	44 e2       	ldi	r20, 0x24	; 36
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.show();
    1574:	92 e0       	ldi	r25, 0x02	; 2
    1576:	63 dc       	rcall	.-1850   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
    1578:	86 e4       	ldi	r24, 0x46	; 70
    157a:	92 e0       	ldi	r25, 0x02	; 2
}
    157c:	c8 db       	rcall	.-2160   	; 0xd0e <_ZN11Framebuffer4showEv>
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	0f 91       	pop	r16
    1584:	ef 90       	pop	r14
    1586:	08 95       	ret

00001588 <_Z10menuDebugSv>:

void menuDebugS(){
	myDisplay.clear();
    1588:	86 e4       	ldi	r24, 0x46	; 70
    158a:	92 e0       	ldi	r25, 0x02	; 2
    158c:	af db       	rcall	.-2210   	; 0xcec <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0,"Goal:");
    158e:	23 ec       	ldi	r18, 0xC3	; 195
    1590:	31 e0       	ldi	r19, 0x01	; 1
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	86 e4       	ldi	r24, 0x46	; 70
    159c:	92 e0       	ldi	r25, 0x02	; 2
    159e:	4f dc       	rcall	.-1890   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(60,0,stepGoalPosition);
    15a0:	20 91 53 06 	lds	r18, 0x0653	; 0x800653 <stepGoalPosition>
    15a4:	30 91 54 06 	lds	r19, 0x0654	; 0x800654 <stepGoalPosition+0x1>
    15a8:	40 e0       	ldi	r20, 0x00	; 0
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	6c e3       	ldi	r22, 0x3C	; 60
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	86 e4       	ldi	r24, 0x46	; 70
    15b2:	92 e0       	ldi	r25, 0x02	; 2
    15b4:	7a dc       	rcall	.-1804   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(0,16,"Cur:");
    15b6:	29 ec       	ldi	r18, 0xC9	; 201
    15b8:	31 e0       	ldi	r19, 0x01	; 1
    15ba:	40 e1       	ldi	r20, 0x10	; 16
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	86 e4       	ldi	r24, 0x46	; 70
    15c4:	92 e0       	ldi	r25, 0x02	; 2
    15c6:	3b dc       	rcall	.-1930   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(60,16,stepGoalPosition);
    15c8:	20 91 53 06 	lds	r18, 0x0653	; 0x800653 <stepGoalPosition>
    15cc:	30 91 54 06 	lds	r19, 0x0654	; 0x800654 <stepGoalPosition+0x1>
    15d0:	40 e1       	ldi	r20, 0x10	; 16
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	6c e3       	ldi	r22, 0x3C	; 60
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	86 e4       	ldi	r24, 0x46	; 70
    15da:	92 e0       	ldi	r25, 0x02	; 2
    15dc:	66 dc       	rcall	.-1844   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(0,32,"Delay:");
    15de:	2e ec       	ldi	r18, 0xCE	; 206
    15e0:	31 e0       	ldi	r19, 0x01	; 1
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	86 e4       	ldi	r24, 0x46	; 70
    15ec:	92 e0       	ldi	r25, 0x02	; 2
    15ee:	27 dc       	rcall	.-1970   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(72,32,stepperDelay);
    15f0:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <stepperDelay>
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e2       	ldi	r20, 0x20	; 32
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	68 e4       	ldi	r22, 0x48	; 72
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	86 e4       	ldi	r24, 0x46	; 70
    1600:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    1602:	53 dc       	rcall	.-1882   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
    1604:	86 e4       	ldi	r24, 0x46	; 70
    1606:	92 e0       	ldi	r25, 0x02	; 2
    1608:	82 cb       	rjmp	.-2300   	; 0xd0e <_ZN11Framebuffer4showEv>
    160a:	08 95       	ret

0000160c <_Z20menuDisplayItemCountv>:
}

void menuDisplayItemCount(){
	myDisplay.clear();
    160c:	86 e4       	ldi	r24, 0x46	; 70
    160e:	92 e0       	ldi	r25, 0x02	; 2
    1610:	6d db       	rcall	.-2342   	; 0xcec <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(column(1),row(1),"On Belt:");
    1612:	25 ed       	ldi	r18, 0xD5	; 213
    1614:	31 e0       	ldi	r19, 0x01	; 1
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	86 e4       	ldi	r24, 0x46	; 70
    1620:	92 e0       	ldi	r25, 0x02	; 2
    1622:	0d dc       	rcall	.-2022   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(9),row(1),reflQueueCount);
    1624:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <reflQueueCount>
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e0       	ldi	r20, 0x00	; 0
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	60 e6       	ldi	r22, 0x60	; 96
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	86 e4       	ldi	r24, 0x46	; 70
    1634:	92 e0       	ldi	r25, 0x02	; 2
    1636:	39 dc       	rcall	.-1934   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(column(1),row(2),"TSorted:");
    1638:	2e ed       	ldi	r18, 0xDE	; 222
    163a:	31 e0       	ldi	r19, 0x01	; 1
    163c:	40 e1       	ldi	r20, 0x10	; 16
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	86 e4       	ldi	r24, 0x46	; 70
    1646:	92 e0       	ldi	r25, 0x02	; 2
    1648:	fa db       	rcall	.-2060   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(9),row(2),(reflQueueCount+blackCount+whiteCount+steelCount+aluminumCount));
    164a:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <reflQueueCount>
    164e:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <blackCount>
    1652:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <whiteCount>
    1656:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <steelCount>
    165a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <aluminumCount>
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	25 0f       	add	r18, r21
    1662:	31 1d       	adc	r19, r1
    1664:	24 0f       	add	r18, r20
    1666:	31 1d       	adc	r19, r1
    1668:	29 0f       	add	r18, r25
    166a:	31 1d       	adc	r19, r1
    166c:	28 0f       	add	r18, r24
    166e:	31 1d       	adc	r19, r1
    1670:	40 e1       	ldi	r20, 0x10	; 16
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	60 e6       	ldi	r22, 0x60	; 96
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	86 e4       	ldi	r24, 0x46	; 70
    167a:	92 e0       	ldi	r25, 0x02	; 2
    167c:	16 dc       	rcall	.-2004   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(column(1),row(3),"B=");
    167e:	27 ee       	ldi	r18, 0xE7	; 231
    1680:	31 e0       	ldi	r19, 0x01	; 1
    1682:	40 e2       	ldi	r20, 0x20	; 32
    1684:	50 e0       	ldi	r21, 0x00	; 0
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	86 e4       	ldi	r24, 0x46	; 70
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	d7 db       	rcall	.-2130   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(3),row(3),blackCount);
    1690:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <blackCount>
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e2       	ldi	r20, 0x20	; 32
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	68 e1       	ldi	r22, 0x18	; 24
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	86 e4       	ldi	r24, 0x46	; 70
    16a0:	92 e0       	ldi	r25, 0x02	; 2
    16a2:	03 dc       	rcall	.-2042   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(column(6),row(3),"W=");
    16a4:	2a ee       	ldi	r18, 0xEA	; 234
    16a6:	31 e0       	ldi	r19, 0x01	; 1
    16a8:	40 e2       	ldi	r20, 0x20	; 32
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	6c e3       	ldi	r22, 0x3C	; 60
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	86 e4       	ldi	r24, 0x46	; 70
    16b2:	92 e0       	ldi	r25, 0x02	; 2
    16b4:	c4 db       	rcall	.-2168   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(8),row(3),whiteCount);
    16b6:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <whiteCount>
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e2       	ldi	r20, 0x20	; 32
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	64 e5       	ldi	r22, 0x54	; 84
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	86 e4       	ldi	r24, 0x46	; 70
    16c6:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.drawString(column(1),row(4),"S=");
    16c8:	f0 db       	rcall	.-2080   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
    16ca:	2d ee       	ldi	r18, 0xED	; 237
    16cc:	31 e0       	ldi	r19, 0x01	; 1
    16ce:	40 e3       	ldi	r20, 0x30	; 48
    16d0:	50 e0       	ldi	r21, 0x00	; 0
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	86 e4       	ldi	r24, 0x46	; 70
    16d8:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.drawNumber(column(3),row(4),steelCount);
    16da:	b1 db       	rcall	.-2206   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
    16dc:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <steelCount>
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e3       	ldi	r20, 0x30	; 48
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	68 e1       	ldi	r22, 0x18	; 24
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	86 e4       	ldi	r24, 0x46	; 70
    16ec:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.drawString(column(6),row(4),"A=");
    16ee:	dd db       	rcall	.-2118   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
    16f0:	20 ef       	ldi	r18, 0xF0	; 240
    16f2:	31 e0       	ldi	r19, 0x01	; 1
    16f4:	40 e3       	ldi	r20, 0x30	; 48
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	6c e3       	ldi	r22, 0x3C	; 60
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.drawNumber(column(8),row(4),aluminumCount);
    16fe:	92 e0       	ldi	r25, 0x02	; 2
    1700:	9e db       	rcall	.-2244   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
    1702:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <aluminumCount>
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e3       	ldi	r20, 0x30	; 48
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	64 e5       	ldi	r22, 0x54	; 84
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	86 e4       	ldi	r24, 0x46	; 70
	myDisplay.show();
    1712:	92 e0       	ldi	r25, 0x02	; 2
    1714:	ca db       	rcall	.-2156   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
    1716:	86 e4       	ldi	r24, 0x46	; 70
    1718:	92 e0       	ldi	r25, 0x02	; 2
    171a:	f9 ca       	rjmp	.-2574   	; 0xd0e <_ZN11Framebuffer4showEv>
    171c:	08 95       	ret

0000171e <_Z16menuDisplayValuehPKc>:
}

//Used to display one value
void menuDisplayValue(unsigned char value, const char *label){
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	c8 2f       	mov	r28, r24
    1726:	8b 01       	movw	r16, r22
	myDisplay.clear();
    1728:	86 e4       	ldi	r24, 0x46	; 70
    172a:	92 e0       	ldi	r25, 0x02	; 2
    172c:	df da       	rcall	.-2626   	; 0xcec <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(column(1),row(1),label);
    172e:	98 01       	movw	r18, r16
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	86 e4       	ldi	r24, 0x46	; 70
    173a:	92 e0       	ldi	r25, 0x02	; 2
    173c:	80 db       	rcall	.-2304   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(1),row(2),value);
    173e:	2c 2f       	mov	r18, r28
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e1       	ldi	r20, 0x10	; 16
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	86 e4       	ldi	r24, 0x46	; 70
    174c:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    174e:	ad db       	rcall	.-2214   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
    1750:	86 e4       	ldi	r24, 0x46	; 70
    1752:	92 e0       	ldi	r25, 0x02	; 2
    1754:	dc da       	rcall	.-2632   	; 0xd0e <_ZN11Framebuffer4showEv>
}
    1756:	cf 91       	pop	r28
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	08 95       	ret

0000175e <_Z12menu3Displayh>:

void menu3Display(unsigned char display){
    175e:	cf 93       	push	r28
    1760:	c8 2f       	mov	r28, r24
	myDisplay.clear();
    1762:	86 e4       	ldi	r24, 0x46	; 70
    1764:	92 e0       	ldi	r25, 0x02	; 2
    1766:	c2 da       	rcall	.-2684   	; 0xcec <_ZN11Framebuffer5clearEv>
	if(display == 0){
    1768:	c1 11       	cpse	r28, r1
    176a:	1c c0       	rjmp	.+56     	; 0x17a4 <_Z12menu3Displayh+0x46>
		myDisplay.drawString(column(1),row(1),">Max");
    176c:	23 ef       	ldi	r18, 0xF3	; 243
    176e:	31 e0       	ldi	r19, 0x01	; 1
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	50 e0       	ldi	r21, 0x00	; 0
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	86 e4       	ldi	r24, 0x46	; 70
    177a:	92 e0       	ldi	r25, 0x02	; 2
    177c:	60 db       	rcall	.-2368   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
		myDisplay.drawString(column(1),row(2)," Inc");
    177e:	28 ef       	ldi	r18, 0xF8	; 248
    1780:	31 e0       	ldi	r19, 0x01	; 1
    1782:	40 e1       	ldi	r20, 0x10	; 16
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	60 e0       	ldi	r22, 0x00	; 0
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	86 e4       	ldi	r24, 0x46	; 70
    178c:	92 e0       	ldi	r25, 0x02	; 2
    178e:	57 db       	rcall	.-2386   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
		myDisplay.drawString(column(1),row(3)," Min");
    1790:	2d ef       	ldi	r18, 0xFD	; 253
    1792:	31 e0       	ldi	r19, 0x01	; 1
    1794:	40 e2       	ldi	r20, 0x20	; 32
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	86 e4       	ldi	r24, 0x46	; 70
    179e:	92 e0       	ldi	r25, 0x02	; 2
    17a0:	4e db       	rcall	.-2404   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
    17a2:	3b c0       	rjmp	.+118    	; 0x181a <_Z12menu3Displayh+0xbc>
	}
	else if(display == 1){
    17a4:	c1 30       	cpi	r28, 0x01	; 1
    17a6:	e1 f4       	brne	.+56     	; 0x17e0 <_Z12menu3Displayh+0x82>
		myDisplay.drawString(column(1),row(1)," Max");
    17a8:	22 e0       	ldi	r18, 0x02	; 2
    17aa:	32 e0       	ldi	r19, 0x02	; 2
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	86 e4       	ldi	r24, 0x46	; 70
    17b6:	92 e0       	ldi	r25, 0x02	; 2
    17b8:	42 db       	rcall	.-2428   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
		myDisplay.drawString(column(1),row(2),">Inc");
    17ba:	27 e0       	ldi	r18, 0x07	; 7
    17bc:	32 e0       	ldi	r19, 0x02	; 2
    17be:	40 e1       	ldi	r20, 0x10	; 16
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	86 e4       	ldi	r24, 0x46	; 70
    17c8:	92 e0       	ldi	r25, 0x02	; 2
    17ca:	39 db       	rcall	.-2446   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
		myDisplay.drawString(column(1),row(3)," Min");
    17cc:	2d ef       	ldi	r18, 0xFD	; 253
    17ce:	31 e0       	ldi	r19, 0x01	; 1
    17d0:	40 e2       	ldi	r20, 0x20	; 32
    17d2:	50 e0       	ldi	r21, 0x00	; 0
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	86 e4       	ldi	r24, 0x46	; 70
    17da:	92 e0       	ldi	r25, 0x02	; 2
    17dc:	30 db       	rcall	.-2464   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
    17de:	1d c0       	rjmp	.+58     	; 0x181a <_Z12menu3Displayh+0xbc>
	}
	else if(display == 2){
    17e0:	c2 30       	cpi	r28, 0x02	; 2
    17e2:	d9 f4       	brne	.+54     	; 0x181a <_Z12menu3Displayh+0xbc>
		myDisplay.drawString(column(1),row(1)," Max");
    17e4:	22 e0       	ldi	r18, 0x02	; 2
    17e6:	32 e0       	ldi	r19, 0x02	; 2
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	86 e4       	ldi	r24, 0x46	; 70
    17f2:	92 e0       	ldi	r25, 0x02	; 2
		myDisplay.drawString(column(1),row(2)," Inc");
    17f4:	24 db       	rcall	.-2488   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
    17f6:	28 ef       	ldi	r18, 0xF8	; 248
    17f8:	31 e0       	ldi	r19, 0x01	; 1
    17fa:	40 e1       	ldi	r20, 0x10	; 16
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	86 e4       	ldi	r24, 0x46	; 70
		myDisplay.drawString(column(1),row(3),">Min");
    1804:	92 e0       	ldi	r25, 0x02	; 2
    1806:	1b db       	rcall	.-2506   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
    1808:	2c e0       	ldi	r18, 0x0C	; 12
    180a:	32 e0       	ldi	r19, 0x02	; 2
    180c:	40 e2       	ldi	r20, 0x20	; 32
    180e:	50 e0       	ldi	r21, 0x00	; 0
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	86 e4       	ldi	r24, 0x46	; 70
	}
	myDisplay.show();
    1816:	92 e0       	ldi	r25, 0x02	; 2
    1818:	12 db       	rcall	.-2524   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
    181a:	86 e4       	ldi	r24, 0x46	; 70
    181c:	92 e0       	ldi	r25, 0x02	; 2
}
    181e:	77 da       	rcall	.-2834   	; 0xd0e <_ZN11Framebuffer4showEv>
    1820:	cf 91       	pop	r28
    1822:	08 95       	ret

00001824 <_Z12menu3Runningv>:
void menu3Running(){
	myDisplay.clear();
    1824:	86 e4       	ldi	r24, 0x46	; 70
    1826:	92 e0       	ldi	r25, 0x02	; 2
    1828:	61 da       	rcall	.-2878   	; 0xcec <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(column(1),row(1),"Current:");
    182a:	21 e1       	ldi	r18, 0x11	; 17
    182c:	32 e0       	ldi	r19, 0x02	; 2
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	50 e0       	ldi	r21, 0x00	; 0
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	86 e4       	ldi	r24, 0x46	; 70
    1838:	92 e0       	ldi	r25, 0x02	; 2
    183a:	01 db       	rcall	.-2558   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(1),row(2),stepCurrentPosition);
    183c:	20 91 55 06 	lds	r18, 0x0655	; 0x800655 <stepCurrentPosition>
    1840:	30 91 56 06 	lds	r19, 0x0656	; 0x800656 <stepCurrentPosition+0x1>
    1844:	40 e1       	ldi	r20, 0x10	; 16
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	86 e4       	ldi	r24, 0x46	; 70
    184e:	92 e0       	ldi	r25, 0x02	; 2
    1850:	2c db       	rcall	.-2472   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(column(1),row(3),"Goal:");
    1852:	23 ec       	ldi	r18, 0xC3	; 195
    1854:	31 e0       	ldi	r19, 0x01	; 1
    1856:	40 e2       	ldi	r20, 0x20	; 32
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	86 e4       	ldi	r24, 0x46	; 70
    1860:	92 e0       	ldi	r25, 0x02	; 2
    1862:	ed da       	rcall	.-2598   	; 0xe3e <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(1),row(4),stepGoalPosition);
    1864:	20 91 53 06 	lds	r18, 0x0653	; 0x800653 <stepGoalPosition>
    1868:	30 91 54 06 	lds	r19, 0x0654	; 0x800654 <stepGoalPosition+0x1>
    186c:	40 e3       	ldi	r20, 0x30	; 48
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	86 e4       	ldi	r24, 0x46	; 70
    1876:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    1878:	18 db       	rcall	.-2512   	; 0xeaa <_ZN11Framebuffer10drawNumberEiii>
    187a:	86 e4       	ldi	r24, 0x46	; 70
    187c:	92 e0       	ldi	r25, 0x02	; 2
    187e:	47 ca       	rjmp	.-2930   	; 0xd0e <_ZN11Framebuffer4showEv>
    1880:	08 95       	ret

00001882 <_Z9initMotorv>:
void motorForward(){
	MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_FORWARD;
}

void motorReverse(){
	MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_REVERSE;
    1882:	84 b1       	in	r24, 0x04	; 4
    1884:	81 61       	ori	r24, 0x11	; 17
    1886:	84 b9       	out	0x04, r24	; 4
    1888:	81 b1       	in	r24, 0x01	; 1
    188a:	80 6c       	ori	r24, 0xC0	; 192
    188c:	81 b9       	out	0x01, r24	; 1
    188e:	20 9a       	sbi	0x04, 0	; 4
    1890:	e0 eb       	ldi	r30, 0xB0	; 176
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	83 60       	ori	r24, 0x03	; 3
    1898:	80 83       	st	Z, r24
    189a:	80 81       	ld	r24, Z
    189c:	80 68       	ori	r24, 0x80	; 128
    189e:	80 83       	st	Z, r24
    18a0:	e1 eb       	ldi	r30, 0xB1	; 177
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	82 60       	ori	r24, 0x02	; 2
    18a8:	80 83       	st	Z, r24
    18aa:	80 e8       	ldi	r24, 0x80	; 128
    18ac:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    18b0:	28 98       	cbi	0x05, 0	; 5
    18b2:	08 95       	ret

000018b4 <_Z10motorSpeedc>:
    18b4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    18b8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    18bc:	08 95       	ret

000018be <_Z12motorForwardv>:
    18be:	82 b1       	in	r24, 0x02	; 2
    18c0:	8f 73       	andi	r24, 0x3F	; 63
    18c2:	80 64       	ori	r24, 0x40	; 64
    18c4:	82 b9       	out	0x02, r24	; 2
    18c6:	08 95       	ret

000018c8 <_Z10motorBrakev>:
}

void motorBrake(){
	MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_BRAKE;
    18c8:	82 b1       	in	r24, 0x02	; 2
    18ca:	8f 73       	andi	r24, 0x3F	; 63
    18cc:	82 b9       	out	0x02, r24	; 2
    18ce:	08 95       	ret

000018d0 <_ZN7SSD130611sendCommandEh>:

void SSD1306::invert(uint8_t inverted) {
    if (inverted) {
        sendCommand(SSD1306_INVERTDISPLAY);
    } else {
        sendCommand(SSD1306_NORMALDISPLAY);
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	ec 01       	movw	r28, r24
    18d8:	16 2f       	mov	r17, r22
    18da:	49 db       	rcall	.-2414   	; 0xf6e <_ZN3I2C5startEv>
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	ce 01       	movw	r24, r28
    18e0:	74 db       	rcall	.-2328   	; 0xfca <_ZN3I2C5writeEh>
    18e2:	61 2f       	mov	r22, r17
    18e4:	ce 01       	movw	r24, r28
    18e6:	71 db       	rcall	.-2334   	; 0xfca <_ZN3I2C5writeEh>
    18e8:	ce 01       	movw	r24, r28
    18ea:	84 db       	rcall	.-2296   	; 0xff4 <_ZN3I2C4stopEv>
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	08 95       	ret

000018f4 <_ZN7SSD1306C1Ev>:
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	ec 01       	movw	r28, r24
    18fa:	30 db       	rcall	.-2464   	; 0xf5c <_ZN3I2CC1Ev>
    18fc:	68 e7       	ldi	r22, 0x78	; 120
    18fe:	ce 01       	movw	r24, r28
    1900:	2e db       	rcall	.-2468   	; 0xf5e <_ZN3I2C4initEh>
    1902:	6e ea       	ldi	r22, 0xAE	; 174
    1904:	ce 01       	movw	r24, r28
    1906:	e4 df       	rcall	.-56     	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1908:	65 ed       	ldi	r22, 0xD5	; 213
    190a:	ce 01       	movw	r24, r28
    190c:	e1 df       	rcall	.-62     	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    190e:	60 e8       	ldi	r22, 0x80	; 128
    1910:	ce 01       	movw	r24, r28
    1912:	de df       	rcall	.-68     	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1914:	68 ea       	ldi	r22, 0xA8	; 168
    1916:	ce 01       	movw	r24, r28
    1918:	db df       	rcall	.-74     	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    191a:	6f e3       	ldi	r22, 0x3F	; 63
    191c:	ce 01       	movw	r24, r28
    191e:	d8 df       	rcall	.-80     	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1920:	63 ed       	ldi	r22, 0xD3	; 211
    1922:	ce 01       	movw	r24, r28
    1924:	d5 df       	rcall	.-86     	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	ce 01       	movw	r24, r28
    192a:	d2 df       	rcall	.-92     	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    192c:	60 e4       	ldi	r22, 0x40	; 64
    192e:	ce 01       	movw	r24, r28
    1930:	cf df       	rcall	.-98     	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1932:	6d e8       	ldi	r22, 0x8D	; 141
    1934:	ce 01       	movw	r24, r28
    1936:	cc df       	rcall	.-104    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1938:	64 e1       	ldi	r22, 0x14	; 20
    193a:	ce 01       	movw	r24, r28
    193c:	c9 df       	rcall	.-110    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    193e:	60 e2       	ldi	r22, 0x20	; 32
    1940:	ce 01       	movw	r24, r28
    1942:	c6 df       	rcall	.-116    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	ce 01       	movw	r24, r28
    1948:	c3 df       	rcall	.-122    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    194a:	61 ea       	ldi	r22, 0xA1	; 161
    194c:	ce 01       	movw	r24, r28
    194e:	c0 df       	rcall	.-128    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1950:	68 ec       	ldi	r22, 0xC8	; 200
    1952:	ce 01       	movw	r24, r28
    1954:	bd df       	rcall	.-134    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1956:	6a ed       	ldi	r22, 0xDA	; 218
    1958:	ce 01       	movw	r24, r28
    195a:	ba df       	rcall	.-140    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    195c:	62 e1       	ldi	r22, 0x12	; 18
    195e:	ce 01       	movw	r24, r28
    1960:	b7 df       	rcall	.-146    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1962:	61 e8       	ldi	r22, 0x81	; 129
    1964:	ce 01       	movw	r24, r28
    1966:	b4 df       	rcall	.-152    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1968:	6f ec       	ldi	r22, 0xCF	; 207
    196a:	ce 01       	movw	r24, r28
    196c:	b1 df       	rcall	.-158    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    196e:	69 ed       	ldi	r22, 0xD9	; 217
    1970:	ce 01       	movw	r24, r28
    1972:	ae df       	rcall	.-164    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1974:	61 ef       	ldi	r22, 0xF1	; 241
    1976:	ce 01       	movw	r24, r28
    1978:	ab df       	rcall	.-170    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    197a:	6b ed       	ldi	r22, 0xDB	; 219
    197c:	ce 01       	movw	r24, r28
    197e:	a8 df       	rcall	.-176    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1980:	60 e4       	ldi	r22, 0x40	; 64
    1982:	ce 01       	movw	r24, r28
    1984:	a5 df       	rcall	.-182    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1986:	64 ea       	ldi	r22, 0xA4	; 164
    1988:	ce 01       	movw	r24, r28
    198a:	a2 df       	rcall	.-188    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    198c:	66 ea       	ldi	r22, 0xA6	; 166
    198e:	ce 01       	movw	r24, r28
    1990:	9f df       	rcall	.-194    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1992:	6f ea       	ldi	r22, 0xAF	; 175
    1994:	ce 01       	movw	r24, r28
    1996:	9c df       	rcall	.-200    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	08 95       	ret

0000199e <_ZN7SSD130615sendFramebufferEPh>:
    }
}

void SSD1306::sendFramebuffer(uint8_t *buffer) {
    199e:	cf 92       	push	r12
    19a0:	df 92       	push	r13
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	08 2f       	mov	r16, r24
    19b0:	19 2f       	mov	r17, r25
    19b2:	7b 01       	movw	r14, r22
    sendCommand(SSD1306_COLUMNADDR);
    19b4:	61 e2       	ldi	r22, 0x21	; 33
    19b6:	8c df       	rcall	.-232    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	80 2f       	mov	r24, r16
    19bc:	91 2f       	mov	r25, r17
    19be:	88 df       	rcall	.-240    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x7F);
    19c0:	6f e7       	ldi	r22, 0x7F	; 127
    19c2:	80 2f       	mov	r24, r16
    19c4:	91 2f       	mov	r25, r17

    sendCommand(SSD1306_PAGEADDR);
    19c6:	84 df       	rcall	.-248    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    19c8:	62 e2       	ldi	r22, 0x22	; 34
    19ca:	80 2f       	mov	r24, r16
    sendCommand(0x00);
    19cc:	91 2f       	mov	r25, r17
    19ce:	80 df       	rcall	.-256    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	80 2f       	mov	r24, r16
    sendCommand(0x07);
    19d4:	91 2f       	mov	r25, r17
    19d6:	7c df       	rcall	.-264    	; 0x18d0 <_ZN7SSD130611sendCommandEh>
    19d8:	67 e0       	ldi	r22, 0x07	; 7
    19da:	80 2f       	mov	r24, r16
    19dc:	91 2f       	mov	r25, r17
    19de:	78 df       	rcall	.-272    	; 0x18d0 <_ZN7SSD130611sendCommandEh>

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) { //*** change to 32? was 64
        i2c.start();
    19e0:	e7 01       	movw	r28, r14
    19e2:	8c ef       	ldi	r24, 0xFC	; 252
    19e4:	f8 1a       	sub	r15, r24
        i2c.write(0x40);
    19e6:	80 2f       	mov	r24, r16
    19e8:	91 2f       	mov	r25, r17
    19ea:	c1 da       	rcall	.-2686   	; 0xf6e <_ZN3I2C5startEv>
    19ec:	60 e4       	ldi	r22, 0x40	; 64
    19ee:	80 2f       	mov	r24, r16
    19f0:	91 2f       	mov	r25, r17
    19f2:	eb da       	rcall	.-2602   	; 0xfca <_ZN3I2C5writeEh>
    19f4:	6e 01       	movw	r12, r28
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
    19f6:	80 e1       	ldi	r24, 0x10	; 16
    19f8:	c8 0e       	add	r12, r24
    19fa:	d1 1c       	adc	r13, r1
    19fc:	69 91       	ld	r22, Y+
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) { //*** change to 32? was 64
        i2c.start();
        i2c.write(0x40);
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
    19fe:	80 2f       	mov	r24, r16
    1a00:	91 2f       	mov	r25, r17
    1a02:	e3 da       	rcall	.-2618   	; 0xfca <_ZN3I2C5writeEh>
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    1a04:	cc 15       	cp	r28, r12
    1a06:	dd 05       	cpc	r29, r13
    1a08:	c9 f7       	brne	.-14     	; 0x19fc <_ZN7SSD130615sendFramebufferEPh+0x5e>
    1a0a:	80 2f       	mov	r24, r16
    1a0c:	91 2f       	mov	r25, r17
    sendCommand(0x07);

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) { //*** change to 32? was 64
    1a0e:	f2 da       	rcall	.-2588   	; 0xff4 <_ZN3I2C4stopEv>
    1a10:	e6 01       	movw	r28, r12
    1a12:	ec 14       	cp	r14, r12
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    }
}
    1a14:	fd 04       	cpc	r15, r13
    1a16:	39 f7       	brne	.-50     	; 0x19e6 <_ZN7SSD130615sendFramebufferEPh+0x48>
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	1f 91       	pop	r17
    1a1e:	0f 91       	pop	r16
    1a20:	ff 90       	pop	r15
    1a22:	ef 90       	pop	r14
    1a24:	df 90       	pop	r13
    1a26:	cf 90       	pop	r12
    1a28:	08 95       	ret

00001a2a <_Z11initStepperv>:
	else if(((difference < 0) && (difference >= -100))){
		//difference = ((difference >= 0) ? difference : -difference) -100;
		rotateStepper(abs(difference), 0);
	}
	else if(difference >= 100){
		rotateStepper(abs(shortPath), 0);
    1a2a:	81 b1       	in	r24, 0x01	; 1
    1a2c:	8f 63       	ori	r24, 0x3F	; 63
    1a2e:	81 b9       	out	0x01, r24	; 1
    1a30:	84 b5       	in	r24, 0x24	; 36
    1a32:	82 60       	ori	r24, 0x02	; 2
    1a34:	84 bd       	out	0x24, r24	; 36
    1a36:	8c e8       	ldi	r24, 0x8C	; 140
    1a38:	87 bd       	out	0x27, r24	; 39
    1a3a:	16 bc       	out	0x26, r1	; 38
    1a3c:	08 95       	ret

00001a3e <_Z12startStepperv>:
    1a3e:	ee e6       	ldi	r30, 0x6E	; 110
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	82 60       	ori	r24, 0x02	; 2
    1a46:	80 83       	st	Z, r24
    1a48:	a9 9a       	sbi	0x15, 1	; 21
    1a4a:	85 b5       	in	r24, 0x25	; 37
    1a4c:	85 60       	ori	r24, 0x05	; 5
    1a4e:	85 bd       	out	0x25, r24	; 37
    1a50:	08 95       	ret

00001a52 <_Z13rotateStepperii>:
    1a52:	bf 92       	push	r11
    1a54:	cf 92       	push	r12
    1a56:	df 92       	push	r13
    1a58:	ef 92       	push	r14
    1a5a:	ff 92       	push	r15
    1a5c:	0f 93       	push	r16
    1a5e:	1f 93       	push	r17
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	18 16       	cp	r1, r24
    1a66:	19 06       	cpc	r1, r25
    1a68:	0c f0       	brlt	.+2      	; 0x1a6c <_Z13rotateStepperii+0x1a>
    1a6a:	65 c0       	rjmp	.+202    	; 0x1b36 <_Z13rotateStepperii+0xe4>
    1a6c:	8b 01       	movw	r16, r22
    1a6e:	ec 01       	movw	r28, r24
    1a70:	c1 2c       	mov	r12, r1
    1a72:	d1 2c       	mov	r13, r1
    1a74:	0f 2e       	mov	r0, r31
    1a76:	f2 e1       	ldi	r31, 0x12	; 18
    1a78:	bf 2e       	mov	r11, r31
    1a7a:	f0 2d       	mov	r31, r0
    1a7c:	0f 2e       	mov	r0, r31
    1a7e:	f7 ec       	ldi	r31, 0xC7	; 199
    1a80:	ef 2e       	mov	r14, r31
    1a82:	f1 2c       	mov	r15, r1
    1a84:	f0 2d       	mov	r31, r0
    1a86:	01 15       	cp	r16, r1
    1a88:	11 05       	cpc	r17, r1
    1a8a:	d9 f0       	breq	.+54     	; 0x1ac2 <_Z13rotateStepperii+0x70>
    1a8c:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <stepCurrentPosition>
    1a90:	90 91 56 06 	lds	r25, 0x0656	; 0x800656 <stepCurrentPosition+0x1>
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	90 93 56 06 	sts	0x0656, r25	; 0x800656 <stepCurrentPosition+0x1>
    1a9a:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <stepCurrentPosition>
    1a9e:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <stepAPosition>
    1aa2:	8f 5f       	subi	r24, 0xFF	; 255
    1aa4:	83 70       	andi	r24, 0x03	; 3
    1aa6:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <stepAPosition>
    1aaa:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <stepCurrentPosition>
    1aae:	90 91 56 06 	lds	r25, 0x0656	; 0x800656 <stepCurrentPosition+0x1>
    1ab2:	88 3c       	cpi	r24, 0xC8	; 200
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	fc f0       	brlt	.+62     	; 0x1af6 <_Z13rotateStepperii+0xa4>
    1ab8:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <stepCurrentPosition+0x1>
    1abc:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <stepCurrentPosition>
    1ac0:	1a c0       	rjmp	.+52     	; 0x1af6 <_Z13rotateStepperii+0xa4>
    1ac2:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <stepCurrentPosition>
    1ac6:	90 91 56 06 	lds	r25, 0x0656	; 0x800656 <stepCurrentPosition+0x1>
    1aca:	89 2b       	or	r24, r25
    1acc:	29 f4       	brne	.+10     	; 0x1ad8 <_Z13rotateStepperii+0x86>
    1ace:	f0 92 56 06 	sts	0x0656, r15	; 0x800656 <stepCurrentPosition+0x1>
    1ad2:	e0 92 55 06 	sts	0x0655, r14	; 0x800655 <stepCurrentPosition>
    1ad6:	09 c0       	rjmp	.+18     	; 0x1aea <_Z13rotateStepperii+0x98>
    1ad8:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <stepCurrentPosition>
    1adc:	90 91 56 06 	lds	r25, 0x0656	; 0x800656 <stepCurrentPosition+0x1>
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	90 93 56 06 	sts	0x0656, r25	; 0x800656 <stepCurrentPosition+0x1>
    1ae6:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <stepCurrentPosition>
    1aea:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <stepAPosition>
    1aee:	81 50       	subi	r24, 0x01	; 1
    1af0:	83 70       	andi	r24, 0x03	; 3
    1af2:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <stepAPosition>
    1af6:	82 b1       	in	r24, 0x02	; 2
    1af8:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <stepAPosition>
    1afc:	80 7c       	andi	r24, 0xC0	; 192
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	e2 5d       	subi	r30, 0xD2	; 210
    1b02:	fd 4f       	sbci	r31, 0xFD	; 253
    1b04:	90 81       	ld	r25, Z
    1b06:	89 2b       	or	r24, r25
    1b08:	82 b9       	out	0x02, r24	; 2
    1b0a:	8a e0       	ldi	r24, 0x0A	; 10
    1b0c:	c8 16       	cp	r12, r24
    1b0e:	d1 04       	cpc	r13, r1
    1b10:	14 f4       	brge	.+4      	; 0x1b16 <_Z13rotateStepperii+0xc4>
    1b12:	ba 94       	dec	r11
    1b14:	06 c0       	rjmp	.+12     	; 0x1b22 <_Z13rotateStepperii+0xd0>
    1b16:	ce 01       	movw	r24, r28
    1b18:	8c 19       	sub	r24, r12
    1b1a:	9d 09       	sbc	r25, r13
    1b1c:	44 97       	sbiw	r24, 0x14	; 20
    1b1e:	0c f4       	brge	.+2      	; 0x1b22 <_Z13rotateStepperii+0xd0>
    1b20:	b3 94       	inc	r11
    1b22:	8b 2d       	mov	r24, r11
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	d8 d2       	rcall	.+1456   	; 0x20d8 <_Z6mTimeri>
    1b28:	8f ef       	ldi	r24, 0xFF	; 255
    1b2a:	c8 1a       	sub	r12, r24
    1b2c:	d8 0a       	sbc	r13, r24
    1b2e:	cc 15       	cp	r28, r12
    1b30:	dd 05       	cpc	r29, r13
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <_Z13rotateStepperii+0xe4>
    1b34:	a8 cf       	rjmp	.-176    	; 0x1a86 <_Z13rotateStepperii+0x34>
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	ff 90       	pop	r15
    1b40:	ef 90       	pop	r14
    1b42:	df 90       	pop	r13
    1b44:	cf 90       	pop	r12
    1b46:	bf 90       	pop	r11
    1b48:	08 95       	ret

00001b4a <_Z11homeStepperv>:
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	89 e1       	ldi	r24, 0x19	; 25
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	7f df       	rcall	.-258    	; 0x1a52 <_Z13rotateStepperii>
    1b54:	66 9b       	sbis	0x0c, 6	; 12
    1b56:	07 c0       	rjmp	.+14     	; 0x1b66 <_Z11homeStepperv+0x1c>
    1b58:	61 e0       	ldi	r22, 0x01	; 1
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	78 df       	rcall	.-272    	; 0x1a52 <_Z13rotateStepperii>
    1b62:	66 99       	sbic	0x0c, 6	; 12
    1b64:	f9 cf       	rjmp	.-14     	; 0x1b58 <_Z11homeStepperv+0xe>
    1b66:	88 ec       	ldi	r24, 0xC8	; 200
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	90 93 56 06 	sts	0x0656, r25	; 0x800656 <stepCurrentPosition+0x1>
    1b6e:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <stepCurrentPosition>
    1b72:	08 95       	ret

00001b74 <_Z18stepperCalibrationv>:
			mTimer(20);
			while((PINE & JS_DOWN_PIN) == 0){};
			mTimer(20);
			stepGoalPosition -=50;
			if(stepGoalPosition < 0){
				stepGoalPosition = 150;
    1b74:	0f 2e       	mov	r0, r31
    1b76:	f6 e9       	ldi	r31, 0x96	; 150
    1b78:	cf 2e       	mov	r12, r31
    1b7a:	d1 2c       	mov	r13, r1
    1b7c:	f0 2d       	mov	r31, r0
		}
		menu3Display(menuSelection);
	}
	valueSelection:
	//Change from ADC1 to ADC 2 *** must change back
	ADMUX = (ADMUX & ~_BV(MUX0)) | _BV(MUX1);
    1b7e:	0f 2e       	mov	r0, r31
    1b80:	fc e7       	ldi	r31, 0x7C	; 124
    1b82:	ef 2e       	mov	r14, r31
    1b84:	f1 2c       	mov	r15, r1
    1b86:	f0 2d       	mov	r31, r0
	//Left shifted
	ADMUX |= _BV(ADLAR);
	//Disable ADC interrupt
	ADCSRA &= ~_BV(ADIE);
    1b88:	ca e7       	ldi	r28, 0x7A	; 122
    1b8a:	d0 e0       	ldi	r29, 0x00	; 0
		//Start ADC conversion
		ADCSRA |= _BV(ADSC);
		while(ADCSRA & _BV(ADSC)){}; //wait for conversion to finish
		
		if(adcEightCount < 8){
			adcEightAverage = adcEightAverage + ADCH - (adcEightAverage >> 3); //MA[n]* = MA[n-1]* + x[n] - MA[n-1]*/N
    1b8c:	0f 2e       	mov	r0, r31
    1b8e:	f9 e7       	ldi	r31, 0x79	; 121
    1b90:	af 2e       	mov	r10, r31
    1b92:	b1 2c       	mov	r11, r1
    1b94:	f0 2d       	mov	r31, r0
				valueLabel = "IncrValue";
				calibSelectedValue = &stepperAccelRate;
			}
			else if(menuSelection == 2){
				valueLabel = "Min:";
				calibSelectedValue = &stepperMinDelay;
    1b96:	0f 2e       	mov	r0, r31
    1b98:	fd e0       	ldi	r31, 0x0D	; 13
    1b9a:	2f 2e       	mov	r2, r31
    1b9c:	f1 e0       	ldi	r31, 0x01	; 1
    1b9e:	3f 2e       	mov	r3, r31
    1ba0:	f0 2d       	mov	r31, r0
			if(menuSelection == 0){
				valueLabel = "Max:";
				calibSelectedValue = &stepperMaxDelay;
			}
			else if(menuSelection == 1){
				valueLabel = "IncrValue";
    1ba2:	0f 2e       	mov	r0, r31
    1ba4:	ff e1       	ldi	r31, 0x1F	; 31
    1ba6:	4f 2e       	mov	r4, r31
    1ba8:	f2 e0       	ldi	r31, 0x02	; 2
    1baa:	5f 2e       	mov	r5, r31
    1bac:	f0 2d       	mov	r31, r0
				calibSelectedValue = &stepperAccelRate;
    1bae:	0f 2e       	mov	r0, r31
    1bb0:	fc e0       	ldi	r31, 0x0C	; 12
    1bb2:	6f 2e       	mov	r6, r31
    1bb4:	f1 e0       	ldi	r31, 0x01	; 1
    1bb6:	7f 2e       	mov	r7, r31
    1bb8:	f0 2d       	mov	r31, r0
		else if(JS_SELECT_PRESSED){
			mTimer(BUTTON_DEBOUNCE_DELAY);
			while(JS_SELECT_PRESSED){};
			mTimer(BUTTON_DEBOUNCE_DELAY);
			if(menuSelection == 0){
				valueLabel = "Max:";
    1bba:	0f 2e       	mov	r0, r31
    1bbc:	fa e1       	ldi	r31, 0x1A	; 26
    1bbe:	8f 2e       	mov	r8, r31
    1bc0:	f2 e0       	ldi	r31, 0x02	; 2
    1bc2:	9f 2e       	mov	r9, r31
    1bc4:	f0 2d       	mov	r31, r0
void stepperCalibration(){
	char menuSelection;
	//Stepper test loop for delay 
	stepperSettings:
	menuSelection = 0;
	menu3Display(menuSelection);
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	ca dd       	rcall	.-1132   	; 0x175e <_Z12menu3Displayh>

void stepperCalibration(){
	char menuSelection;
	//Stepper test loop for delay 
	stepperSettings:
	menuSelection = 0;
    1bca:	10 e0       	ldi	r17, 0x00	; 0
	menu3Display(menuSelection);
	while(1){
		if(JS_UP_PRESSED){
    1bcc:	1f 99       	sbic	0x03, 7	; 3
    1bce:	0d c0       	rjmp	.+26     	; 0x1bea <_Z18stepperCalibrationv+0x76>
			mTimer(BUTTON_DEBOUNCE_DELAY);
    1bd0:	84 e1       	ldi	r24, 0x14	; 20
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	81 d2       	rcall	.+1282   	; 0x20d8 <_Z6mTimeri>
			while(JS_UP_PRESSED){};
    1bd6:	1f 9b       	sbis	0x03, 7	; 3
			mTimer(BUTTON_DEBOUNCE_DELAY);	
    1bd8:	fe cf       	rjmp	.-4      	; 0x1bd6 <_Z18stepperCalibrationv+0x62>
    1bda:	84 e1       	ldi	r24, 0x14	; 20
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
			if(menuSelection == 0){
    1bde:	7c d2       	rcall	.+1272   	; 0x20d8 <_Z6mTimeri>
    1be0:	11 23       	and	r17, r17
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <_Z18stepperCalibrationv+0x72>
				menuSelection = 0;
			}
			else{
				menuSelection--;
    1be4:	42 c0       	rjmp	.+132    	; 0x1c6a <_Z18stepperCalibrationv+0xf6>
    1be6:	11 50       	subi	r17, 0x01	; 1
			}
			
			
		}
		else if(JS_DOWN_PRESSED){
    1be8:	40 c0       	rjmp	.+128    	; 0x1c6a <_Z18stepperCalibrationv+0xf6>
			mTimer(BUTTON_DEBOUNCE_DELAY);
    1bea:	65 99       	sbic	0x0c, 5	; 12
    1bec:	0d c0       	rjmp	.+26     	; 0x1c08 <_Z18stepperCalibrationv+0x94>
    1bee:	84 e1       	ldi	r24, 0x14	; 20
			while(JS_DOWN_PRESSED){};
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
			mTimer(BUTTON_DEBOUNCE_DELAY);
    1bf2:	72 d2       	rcall	.+1252   	; 0x20d8 <_Z6mTimeri>
    1bf4:	65 9b       	sbis	0x0c, 5	; 12
    1bf6:	fe cf       	rjmp	.-4      	; 0x1bf4 <_Z18stepperCalibrationv+0x80>
    1bf8:	84 e1       	ldi	r24, 0x14	; 20
			menuSelection++;
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	6d d2       	rcall	.+1242   	; 0x20d8 <_Z6mTimeri>
    1bfe:	1f 5f       	subi	r17, 0xFF	; 255
    1c00:	13 30       	cpi	r17, 0x03	; 3
			if(menuSelection > 2){
				menuSelection = 2;
			}
		}
		else if(JS_SELECT_PRESSED){
    1c02:	98 f1       	brcs	.+102    	; 0x1c6a <_Z18stepperCalibrationv+0xf6>
    1c04:	12 e0       	ldi	r17, 0x02	; 2
			mTimer(BUTTON_DEBOUNCE_DELAY);
    1c06:	31 c0       	rjmp	.+98     	; 0x1c6a <_Z18stepperCalibrationv+0xf6>
    1c08:	1d 99       	sbic	0x03, 5	; 3
    1c0a:	2d c0       	rjmp	.+90     	; 0x1c66 <_Z18stepperCalibrationv+0xf2>
			while(JS_SELECT_PRESSED){};
    1c0c:	84 e1       	ldi	r24, 0x14	; 20
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
			mTimer(BUTTON_DEBOUNCE_DELAY);
    1c10:	63 d2       	rcall	.+1222   	; 0x20d8 <_Z6mTimeri>
    1c12:	1d 9b       	sbis	0x03, 5	; 3
    1c14:	fe cf       	rjmp	.-4      	; 0x1c12 <_Z18stepperCalibrationv+0x9e>
    1c16:	84 e1       	ldi	r24, 0x14	; 20
			if(menuSelection == 0){
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	5e d2       	rcall	.+1212   	; 0x20d8 <_Z6mTimeri>
				valueLabel = "Max:";
    1c1c:	11 11       	cpse	r17, r1
    1c1e:	0b c0       	rjmp	.+22     	; 0x1c36 <_Z18stepperCalibrationv+0xc2>
    1c20:	90 92 4a 06 	sts	0x064A, r9	; 0x80064a <valueLabel+0x1>
				calibSelectedValue = &stepperMaxDelay;
    1c24:	80 92 49 06 	sts	0x0649, r8	; 0x800649 <valueLabel>
    1c28:	8e e0       	ldi	r24, 0x0E	; 14
    1c2a:	91 e0       	ldi	r25, 0x01	; 1
    1c2c:	90 93 4f 06 	sts	0x064F, r25	; 0x80064f <calibSelectedValue+0x1>
    1c30:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <calibSelectedValue>
			}
			else if(menuSelection == 1){
    1c34:	1d c0       	rjmp	.+58     	; 0x1c70 <_Z18stepperCalibrationv+0xfc>
				valueLabel = "IncrValue";
    1c36:	11 30       	cpi	r17, 0x01	; 1
    1c38:	49 f4       	brne	.+18     	; 0x1c4c <_Z18stepperCalibrationv+0xd8>
    1c3a:	50 92 4a 06 	sts	0x064A, r5	; 0x80064a <valueLabel+0x1>
				calibSelectedValue = &stepperAccelRate;
    1c3e:	40 92 49 06 	sts	0x0649, r4	; 0x800649 <valueLabel>
    1c42:	70 92 4f 06 	sts	0x064F, r7	; 0x80064f <calibSelectedValue+0x1>
    1c46:	60 92 4e 06 	sts	0x064E, r6	; 0x80064e <calibSelectedValue>
			}
			else if(menuSelection == 2){
    1c4a:	12 c0       	rjmp	.+36     	; 0x1c70 <_Z18stepperCalibrationv+0xfc>
				valueLabel = "Min:";
    1c4c:	12 30       	cpi	r17, 0x02	; 2
    1c4e:	81 f4       	brne	.+32     	; 0x1c70 <_Z18stepperCalibrationv+0xfc>
    1c50:	69 e2       	ldi	r22, 0x29	; 41
    1c52:	72 e0       	ldi	r23, 0x02	; 2
    1c54:	70 93 4a 06 	sts	0x064A, r23	; 0x80064a <valueLabel+0x1>
				calibSelectedValue = &stepperMinDelay;
    1c58:	60 93 49 06 	sts	0x0649, r22	; 0x800649 <valueLabel>
    1c5c:	30 92 4f 06 	sts	0x064F, r3	; 0x80064f <calibSelectedValue+0x1>
			}
			goto valueSelection;
		}
		else if(JS_RIGHT_PRESSED){
    1c60:	20 92 4e 06 	sts	0x064E, r2	; 0x80064e <calibSelectedValue>
			goto startStepperTest;
		}
		menu3Display(menuSelection);
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <_Z18stepperCalibrationv+0xfc>
    1c66:	64 9b       	sbis	0x0c, 4	; 12
    1c68:	6d c0       	rjmp	.+218    	; 0x1d44 <_Z18stepperCalibrationv+0x1d0>
	char menuSelection;
	//Stepper test loop for delay 
	stepperSettings:
	menuSelection = 0;
	menu3Display(menuSelection);
	while(1){
    1c6a:	81 2f       	mov	r24, r17
		}
		menu3Display(menuSelection);
	}
	valueSelection:
	//Change from ADC1 to ADC 2 *** must change back
	ADMUX = (ADMUX & ~_BV(MUX0)) | _BV(MUX1);
    1c6c:	78 dd       	rcall	.-1296   	; 0x175e <_Z12menu3Displayh>
    1c6e:	ae cf       	rjmp	.-164    	; 0x1bcc <_Z18stepperCalibrationv+0x58>
    1c70:	f7 01       	movw	r30, r14
    1c72:	80 81       	ld	r24, Z
    1c74:	8c 7f       	andi	r24, 0xFC	; 252
	//Left shifted
	ADMUX |= _BV(ADLAR);
    1c76:	82 60       	ori	r24, 0x02	; 2
    1c78:	80 83       	st	Z, r24
    1c7a:	80 81       	ld	r24, Z
	//Disable ADC interrupt
	ADCSRA &= ~_BV(ADIE);
    1c7c:	80 62       	ori	r24, 0x20	; 32
    1c7e:	80 83       	st	Z, r24
    1c80:	88 81       	ld	r24, Y
	
	menuSelection = 0;
	menuDisplayValue(*calibSelectedValue, valueLabel);
    1c82:	87 7f       	andi	r24, 0xF7	; 247
    1c84:	88 83       	st	Y, r24
    1c86:	e0 91 4e 06 	lds	r30, 0x064E	; 0x80064e <calibSelectedValue>
    1c8a:	f0 91 4f 06 	lds	r31, 0x064F	; 0x80064f <calibSelectedValue+0x1>
    1c8e:	80 81       	ld	r24, Z
    1c90:	60 91 49 06 	lds	r22, 0x0649	; 0x800649 <valueLabel>
    1c94:	70 91 4a 06 	lds	r23, 0x064A	; 0x80064a <valueLabel+0x1>
	while(1){
		//Start ADC conversion
		ADCSRA |= _BV(ADSC);
    1c98:	42 dd       	rcall	.-1404   	; 0x171e <_Z16menuDisplayValuehPKc>
    1c9a:	88 81       	ld	r24, Y
		while(ADCSRA & _BV(ADSC)){}; //wait for conversion to finish
    1c9c:	80 64       	ori	r24, 0x40	; 64
    1c9e:	88 83       	st	Y, r24
    1ca0:	88 81       	ld	r24, Y
		
		if(adcEightCount < 8){
    1ca2:	86 fd       	sbrc	r24, 6
    1ca4:	fd cf       	rjmp	.-6      	; 0x1ca0 <_Z18stepperCalibrationv+0x12c>
    1ca6:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <adcEightCount>
			adcEightAverage = adcEightAverage + ADCH - (adcEightAverage >> 3); //MA[n]* = MA[n-1]* + x[n] - MA[n-1]*/N
    1caa:	88 30       	cpi	r24, 0x08	; 8
    1cac:	d0 f4       	brcc	.+52     	; 0x1ce2 <_Z18stepperCalibrationv+0x16e>
    1cae:	f5 01       	movw	r30, r10
    1cb0:	90 81       	ld	r25, Z
    1cb2:	20 91 4c 06 	lds	r18, 0x064C	; 0x80064c <adcEightAverage>
    1cb6:	30 91 4d 06 	lds	r19, 0x064D	; 0x80064d <adcEightAverage+0x1>
    1cba:	a9 01       	movw	r20, r18
    1cbc:	49 0f       	add	r20, r25
    1cbe:	51 1d       	adc	r21, r1
    1cc0:	36 95       	lsr	r19
    1cc2:	27 95       	ror	r18
    1cc4:	36 95       	lsr	r19
    1cc6:	27 95       	ror	r18
    1cc8:	36 95       	lsr	r19
    1cca:	27 95       	ror	r18
    1ccc:	ba 01       	movw	r22, r20
    1cce:	62 1b       	sub	r22, r18
    1cd0:	73 0b       	sbc	r23, r19
    1cd2:	70 93 4d 06 	sts	0x064D, r23	; 0x80064d <adcEightAverage+0x1>
			adcEightCount++;
    1cd6:	60 93 4c 06 	sts	0x064C, r22	; 0x80064c <adcEightAverage>
    1cda:	8f 5f       	subi	r24, 0xFF	; 255
    1cdc:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <adcEightCount>
		}
		else{
			//adcEightAverage >>= 3;	//MA*/N
			*calibSelectedValue = adcEightAverage >> 3;
    1ce0:	1b c0       	rjmp	.+54     	; 0x1d18 <_Z18stepperCalibrationv+0x1a4>
    1ce2:	e0 91 4e 06 	lds	r30, 0x064E	; 0x80064e <calibSelectedValue>
    1ce6:	f0 91 4f 06 	lds	r31, 0x064F	; 0x80064f <calibSelectedValue+0x1>
    1cea:	80 91 4c 06 	lds	r24, 0x064C	; 0x80064c <adcEightAverage>
    1cee:	90 91 4d 06 	lds	r25, 0x064D	; 0x80064d <adcEightAverage+0x1>
    1cf2:	96 95       	lsr	r25
    1cf4:	87 95       	ror	r24
    1cf6:	96 95       	lsr	r25
    1cf8:	87 95       	ror	r24
			menuDisplayValue(*calibSelectedValue, valueLabel);
    1cfa:	96 95       	lsr	r25
    1cfc:	87 95       	ror	r24
    1cfe:	80 83       	st	Z, r24
    1d00:	e0 91 4e 06 	lds	r30, 0x064E	; 0x80064e <calibSelectedValue>
    1d04:	f0 91 4f 06 	lds	r31, 0x064F	; 0x80064f <calibSelectedValue+0x1>
    1d08:	80 81       	ld	r24, Z
    1d0a:	60 91 49 06 	lds	r22, 0x0649	; 0x800649 <valueLabel>
			
			adcEightCount = 0;
		}
		if(JS_LEFT_PRESSED){
    1d0e:	70 91 4a 06 	lds	r23, 0x064A	; 0x80064a <valueLabel+0x1>
			mTimer(BUTTON_DEBOUNCE_DELAY);
    1d12:	05 dd       	rcall	.-1526   	; 0x171e <_Z16menuDisplayValuehPKc>
    1d14:	10 92 4b 06 	sts	0x064B, r1	; 0x80064b <adcEightCount>
    1d18:	1e 99       	sbic	0x03, 6	; 3
			while(JS_LEFT_PRESSED){};
    1d1a:	bf cf       	rjmp	.-130    	; 0x1c9a <_Z18stepperCalibrationv+0x126>
    1d1c:	84 e1       	ldi	r24, 0x14	; 20
			mTimer(BUTTON_DEBOUNCE_DELAY);
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	db d1       	rcall	.+950    	; 0x20d8 <_Z6mTimeri>
    1d22:	1e 9b       	sbis	0x03, 6	; 3
			//Change back from ADC 2 to 1
			ADMUX = (ADMUX & ~_BV(MUX1)) | _BV(MUX0);
    1d24:	fe cf       	rjmp	.-4      	; 0x1d22 <_Z18stepperCalibrationv+0x1ae>
    1d26:	84 e1       	ldi	r24, 0x14	; 20
			//Turn off left shifted
			ADMUX &= ~_BV(ADLAR);
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	d6 d1       	rcall	.+940    	; 0x20d8 <_Z6mTimeri>
    1d2c:	f7 01       	movw	r30, r14
			//Reenable ADC interrupt
			ADCSRA |= _BV(ADIE);
    1d2e:	80 81       	ld	r24, Z
    1d30:	8c 7f       	andi	r24, 0xFC	; 252
    1d32:	81 60       	ori	r24, 0x01	; 1
		}

	}
	
	startStepperTest:
	menu3Running();
    1d34:	80 83       	st	Z, r24
	homeStepper();
    1d36:	80 81       	ld	r24, Z
    1d38:	8f 7d       	andi	r24, 0xDF	; 223
	startStepper();
    1d3a:	80 83       	st	Z, r24
	stepGoalPosition = 0;
    1d3c:	88 81       	ld	r24, Y
    1d3e:	88 60       	ori	r24, 0x08	; 8
    1d40:	88 83       	st	Y, r24
    1d42:	41 cf       	rjmp	.-382    	; 0x1bc6 <_Z18stepperCalibrationv+0x52>
	sei();
    1d44:	6f dd       	rcall	.-1314   	; 0x1824 <_Z12menu3Runningv>
	while(1){
		//rotateStepperToGoal();
		if((PINE & JS_DOWN_PIN) == 0){
    1d46:	01 df       	rcall	.-510    	; 0x1b4a <_Z11homeStepperv>
    1d48:	7a de       	rcall	.-780    	; 0x1a3e <_Z12startStepperv>
			mTimer(20);
    1d4a:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <stepGoalPosition+0x1>
    1d4e:	10 92 53 06 	sts	0x0653, r1	; 0x800653 <stepGoalPosition>
			while((PINE & JS_DOWN_PIN) == 0){};
    1d52:	78 94       	sei
    1d54:	65 99       	sbic	0x0c, 5	; 12
			mTimer(20);
    1d56:	1b c0       	rjmp	.+54     	; 0x1d8e <_Z18stepperCalibrationv+0x21a>
    1d58:	84 e1       	ldi	r24, 0x14	; 20
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	bd d1       	rcall	.+890    	; 0x20d8 <_Z6mTimeri>
			stepGoalPosition -=50;
    1d5e:	65 9b       	sbis	0x0c, 5	; 12
    1d60:	fe cf       	rjmp	.-4      	; 0x1d5e <_Z18stepperCalibrationv+0x1ea>
    1d62:	84 e1       	ldi	r24, 0x14	; 20
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	b8 d1       	rcall	.+880    	; 0x20d8 <_Z6mTimeri>
    1d68:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <stepGoalPosition>
    1d6c:	90 91 54 06 	lds	r25, 0x0654	; 0x800654 <stepGoalPosition+0x1>
			if(stepGoalPosition < 0){
    1d70:	c2 97       	sbiw	r24, 0x32	; 50
    1d72:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <stepGoalPosition+0x1>
    1d76:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <stepGoalPosition>
				stepGoalPosition = 150;
    1d7a:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <stepGoalPosition>
    1d7e:	90 91 54 06 	lds	r25, 0x0654	; 0x800654 <stepGoalPosition+0x1>
			}
		}
		//If Joystick Up -> highlight Start
		if((PINB & JS_UP_PIN) == 0){
    1d82:	99 23       	and	r25, r25
			mTimer(20);
    1d84:	24 f4       	brge	.+8      	; 0x1d8e <_Z18stepperCalibrationv+0x21a>
    1d86:	d0 92 54 06 	sts	0x0654, r13	; 0x800654 <stepGoalPosition+0x1>
    1d8a:	c0 92 53 06 	sts	0x0653, r12	; 0x800653 <stepGoalPosition>
			while((PINB & JS_UP_PIN) == 0){};
    1d8e:	1f 99       	sbic	0x03, 7	; 3
			mTimer(20);
    1d90:	1c c0       	rjmp	.+56     	; 0x1dca <_Z18stepperCalibrationv+0x256>
    1d92:	84 e1       	ldi	r24, 0x14	; 20
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	a0 d1       	rcall	.+832    	; 0x20d8 <_Z6mTimeri>
			stepGoalPosition +=50;
    1d98:	1f 9b       	sbis	0x03, 7	; 3
    1d9a:	fe cf       	rjmp	.-4      	; 0x1d98 <_Z18stepperCalibrationv+0x224>
    1d9c:	84 e1       	ldi	r24, 0x14	; 20
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9b d1       	rcall	.+822    	; 0x20d8 <_Z6mTimeri>
    1da2:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <stepGoalPosition>
    1da6:	90 91 54 06 	lds	r25, 0x0654	; 0x800654 <stepGoalPosition+0x1>
			if(stepGoalPosition > 199){
    1daa:	c2 96       	adiw	r24, 0x32	; 50
    1dac:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <stepGoalPosition+0x1>
    1db0:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <stepGoalPosition>
    1db4:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <stepGoalPosition>
				stepGoalPosition = 0;
    1db8:	90 91 54 06 	lds	r25, 0x0654	; 0x800654 <stepGoalPosition+0x1>
    1dbc:	88 3c       	cpi	r24, 0xC8	; 200
			}
		}
		if((JS_LEFT_PORT & JS_LEFT_PIN) == 0){
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	24 f0       	brlt	.+8      	; 0x1dca <_Z18stepperCalibrationv+0x256>
			cli();
    1dc2:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <stepGoalPosition+0x1>
			goto stepperSettings;
		}
		menuDebugS();
    1dc6:	10 92 53 06 	sts	0x0653, r1	; 0x800653 <stepGoalPosition>
	menu3Running();
	homeStepper();
	startStepper();
	stepGoalPosition = 0;
	sei();
	while(1){
    1dca:	1e 99       	sbic	0x03, 6	; 3
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <_Z18stepperCalibrationv+0x25e>
    1dce:	f8 94       	cli
    1dd0:	fa ce       	rjmp	.-524    	; 0x1bc6 <_Z18stepperCalibrationv+0x52>
    1dd2:	da db       	rcall	.-2124   	; 0x1588 <_Z10menuDebugSv>
    1dd4:	bf cf       	rjmp	.-130    	; 0x1d54 <_Z18stepperCalibrationv+0x1e0>

00001dd6 <__vector_21>:
		}
		menuDebugS();
	}
}

ISR(TIMER0_COMPA_vect){
    1dd6:	1f 92       	push	r1
    1dd8:	0f 92       	push	r0
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	0f 92       	push	r0
    1dde:	11 24       	eor	r1, r1
    1de0:	0b b6       	in	r0, 0x3b	; 59
    1de2:	0f 92       	push	r0
    1de4:	1f 93       	push	r17
    1de6:	2f 93       	push	r18
    1de8:	3f 93       	push	r19
    1dea:	4f 93       	push	r20
    1dec:	5f 93       	push	r21
    1dee:	6f 93       	push	r22
    1df0:	7f 93       	push	r23
    1df2:	8f 93       	push	r24
    1df4:	9f 93       	push	r25
    1df6:	af 93       	push	r26
    1df8:	bf 93       	push	r27
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	ef 93       	push	r30
    1e00:	ff 93       	push	r31
	
	unsigned char nextItem = 0;
	int difference =  stepGoalPosition - stepCurrentPosition;
    1e02:	c0 91 53 06 	lds	r28, 0x0653	; 0x800653 <stepGoalPosition>
    1e06:	d0 91 54 06 	lds	r29, 0x0654	; 0x800654 <stepGoalPosition+0x1>
    1e0a:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <stepCurrentPosition>
    1e0e:	90 91 56 06 	lds	r25, 0x0656	; 0x800656 <stepCurrentPosition+0x1>
    1e12:	c8 1b       	sub	r28, r24
    1e14:	d9 0b       	sbc	r29, r25
	unsigned char shortAbsDifference = ((difference >= 0) ? difference : -difference);//abs(difference)
    1e16:	ce 01       	movw	r24, r28
    1e18:	22 f4       	brpl	.+8      	; 0x1e22 <__vector_21+0x4c>
    1e1a:	88 27       	eor	r24, r24
    1e1c:	99 27       	eor	r25, r25
    1e1e:	8c 1b       	sub	r24, r28
    1e20:	9d 0b       	sbc	r25, r29
    1e22:	18 2f       	mov	r17, r24
	
	//Find circular shortest distance
	if(shortAbsDifference > 100){
    1e24:	85 36       	cpi	r24, 0x65	; 101
    1e26:	10 f0       	brcs	.+4      	; 0x1e2c <__vector_21+0x56>
		shortAbsDifference = 200 - shortAbsDifference;
    1e28:	18 ec       	ldi	r17, 0xC8	; 200
    1e2a:	18 1b       	sub	r17, r24
				delay
		else
			stepper ready
*/
	//////////PLACE BLOCK INTO BIN ONCE CLOSE ENOUGH
	if(shortAbsDifference < CLOSE_ENOUGH){
    1e2c:	1f 30       	cpi	r17, 0x0F	; 15
    1e2e:	08 f0       	brcs	.+2      	; 0x1e32 <__vector_21+0x5c>
    1e30:	b6 c0       	rjmp	.+364    	; 0x1f9e <__vector_21+0x1c8>
		if(waitToReachGoal){
    1e32:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <waitToReachGoal>
    1e36:	88 23       	and	r24, r24
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <__vector_21+0x66>
    1e3a:	46 c0       	rjmp	.+140    	; 0x1ec8 <__vector_21+0xf2>
			stepperReady = 0; //*** this may not be needed?
    1e3c:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <stepperReady>
			if(shortAbsDifference == 0){ //*** needs to be tested
    1e40:	11 11       	cpse	r17, r1
    1e42:	af c0       	rjmp	.+350    	; 0x1fa2 <__vector_21+0x1cc>
				
				//delayStepper = 2;
				mTimer(20);
    1e44:	84 e1       	ldi	r24, 0x14	; 20
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	47 d1       	rcall	.+654    	; 0x20d8 <_Z6mTimeri>
				waitToReachGoal = 0;
    1e4a:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <waitToReachGoal>
				//reflQueueChange = 1;
				if(reflQueue[frontOfQueue] == BLACK){
    1e4e:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	e2 5c       	subi	r30, 0xC2	; 194
    1e56:	fd 4f       	sbci	r31, 0xFD	; 253
    1e58:	80 81       	ld	r24, Z
    1e5a:	81 11       	cpse	r24, r1
    1e5c:	07 c0       	rjmp	.+14     	; 0x1e6c <__vector_21+0x96>
					stepGoalPosition = STEPPER_BLACK_POSITION;
    1e5e:	82 ec       	ldi	r24, 0xC2	; 194
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <stepGoalPosition+0x1>
    1e66:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <stepGoalPosition>
    1e6a:	9b c0       	rjmp	.+310    	; 0x1fa2 <__vector_21+0x1cc>
				}
				else if(reflQueue[frontOfQueue] == WHITE){
    1e6c:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	e2 5c       	subi	r30, 0xC2	; 194
    1e74:	fd 4f       	sbci	r31, 0xFD	; 253
    1e76:	80 81       	ld	r24, Z
    1e78:	81 30       	cpi	r24, 0x01	; 1
    1e7a:	39 f4       	brne	.+14     	; 0x1e8a <__vector_21+0xb4>
					stepGoalPosition = STEPPER_WHITE_POSITION;
    1e7c:	8e e5       	ldi	r24, 0x5E	; 94
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <stepGoalPosition+0x1>
    1e84:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <stepGoalPosition>
    1e88:	8c c0       	rjmp	.+280    	; 0x1fa2 <__vector_21+0x1cc>
				}
				else if(reflQueue[frontOfQueue] == STEEL){
    1e8a:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	e2 5c       	subi	r30, 0xC2	; 194
    1e92:	fd 4f       	sbci	r31, 0xFD	; 253
    1e94:	80 81       	ld	r24, Z
    1e96:	82 30       	cpi	r24, 0x02	; 2
    1e98:	39 f4       	brne	.+14     	; 0x1ea8 <__vector_21+0xd2>
					stepGoalPosition = STEPPER_STEEL_POSITION;
    1e9a:	80 e9       	ldi	r24, 0x90	; 144
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <stepGoalPosition+0x1>
    1ea2:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <stepGoalPosition>
    1ea6:	7d c0       	rjmp	.+250    	; 0x1fa2 <__vector_21+0x1cc>
				}
				else if(reflQueue[frontOfQueue] == ALUMINUM){
    1ea8:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	e2 5c       	subi	r30, 0xC2	; 194
    1eb0:	fd 4f       	sbci	r31, 0xFD	; 253
    1eb2:	80 81       	ld	r24, Z
    1eb4:	83 30       	cpi	r24, 0x03	; 3
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <__vector_21+0xe4>
    1eb8:	74 c0       	rjmp	.+232    	; 0x1fa2 <__vector_21+0x1cc>
					stepGoalPosition = STEPPER_ALUMINIUM_POSITION;
    1eba:	8c e2       	ldi	r24, 0x2C	; 44
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <stepGoalPosition+0x1>
    1ec2:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <stepGoalPosition>
    1ec6:	6d c0       	rjmp	.+218    	; 0x1fa2 <__vector_21+0x1cc>
				}
			}
		}
		else if(blockReady){
    1ec8:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <blockReady>
    1ecc:	88 23       	and	r24, r24
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <__vector_21+0xfc>
    1ed0:	62 c0       	rjmp	.+196    	; 0x1f96 <__vector_21+0x1c0>
			stepperReady = 0;
    1ed2:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <stepperReady>
			//////////MOTOR ON
			MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_FORWARD;
    1ed6:	82 b1       	in	r24, 0x02	; 2
    1ed8:	8f 73       	andi	r24, 0x3F	; 63
    1eda:	80 64       	ori	r24, 0x40	; 64
    1edc:	82 b9       	out	0x02, r24	; 2
			blockReady = 0;
    1ede:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <blockReady>
			//////////COUNT NUMBER OF EACH SORTED
			if(reflQueue[frontOfQueue] == BLACK){
    1ee2:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	e2 5c       	subi	r30, 0xC2	; 194
    1eea:	fd 4f       	sbci	r31, 0xFD	; 253
    1eec:	80 81       	ld	r24, Z
    1eee:	81 11       	cpse	r24, r1
    1ef0:	06 c0       	rjmp	.+12     	; 0x1efe <__vector_21+0x128>
				blackCount++;
    1ef2:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <blackCount>
    1ef6:	8f 5f       	subi	r24, 0xFF	; 255
    1ef8:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <blackCount>
    1efc:	29 c0       	rjmp	.+82     	; 0x1f50 <__vector_21+0x17a>
			}
			else if(reflQueue[frontOfQueue] == WHITE){
    1efe:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	e2 5c       	subi	r30, 0xC2	; 194
    1f06:	fd 4f       	sbci	r31, 0xFD	; 253
    1f08:	80 81       	ld	r24, Z
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	31 f4       	brne	.+12     	; 0x1f1a <__vector_21+0x144>
				whiteCount++;
    1f0e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <whiteCount>
    1f12:	8f 5f       	subi	r24, 0xFF	; 255
    1f14:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <whiteCount>
    1f18:	1b c0       	rjmp	.+54     	; 0x1f50 <__vector_21+0x17a>
			}
			else if(reflQueue[frontOfQueue] == STEEL){
    1f1a:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	e2 5c       	subi	r30, 0xC2	; 194
    1f22:	fd 4f       	sbci	r31, 0xFD	; 253
    1f24:	80 81       	ld	r24, Z
    1f26:	82 30       	cpi	r24, 0x02	; 2
    1f28:	31 f4       	brne	.+12     	; 0x1f36 <__vector_21+0x160>
				steelCount++;
    1f2a:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <steelCount>
    1f2e:	8f 5f       	subi	r24, 0xFF	; 255
    1f30:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <steelCount>
    1f34:	0d c0       	rjmp	.+26     	; 0x1f50 <__vector_21+0x17a>
			}
			else if(reflQueue[frontOfQueue] == ALUMINUM){
    1f36:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	e2 5c       	subi	r30, 0xC2	; 194
    1f3e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f40:	80 81       	ld	r24, Z
    1f42:	83 30       	cpi	r24, 0x03	; 3
    1f44:	29 f4       	brne	.+10     	; 0x1f50 <__vector_21+0x17a>
				aluminumCount++;
    1f46:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <aluminumCount>
    1f4a:	8f 5f       	subi	r24, 0xFF	; 255
    1f4c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <aluminumCount>
			}
			//////////DEQUEUE BLOCK
			if(reflQueueCount < 2){
    1f50:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <reflQueueCount>
    1f54:	82 30       	cpi	r24, 0x02	; 2
    1f56:	18 f4       	brcc	.+6      	; 0x1f5e <__vector_21+0x188>
				reflQueueCount = 0;
    1f58:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <reflQueueCount>
    1f5c:	22 c0       	rjmp	.+68     	; 0x1fa2 <__vector_21+0x1cc>
			}
			else{
				nextItem = (frontOfQueue+1) & 7;
    1f5e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <frontOfQueue>
    1f62:	8f 5f       	subi	r24, 0xFF	; 255
    1f64:	87 70       	andi	r24, 0x07	; 7
				
				if(reflQueue[frontOfQueue] != reflQueue[nextItem]){
    1f66:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <frontOfQueue>
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	e2 5c       	subi	r30, 0xC2	; 194
    1f6e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f70:	20 81       	ld	r18, Z
    1f72:	e8 2f       	mov	r30, r24
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	e2 5c       	subi	r30, 0xC2	; 194
    1f78:	fd 4f       	sbci	r31, 0xFD	; 253
    1f7a:	90 81       	ld	r25, Z
    1f7c:	29 17       	cp	r18, r25
    1f7e:	19 f0       	breq	.+6      	; 0x1f86 <__vector_21+0x1b0>
					waitToReachGoal = 1;
    1f80:	91 e0       	ldi	r25, 0x01	; 1
    1f82:	90 93 48 06 	sts	0x0648, r25	; 0x800648 <waitToReachGoal>
				}
				frontOfQueue = nextItem; //& 7 implements a rotating array pointer
    1f86:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <frontOfQueue>
				reflQueueCount--;
    1f8a:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <reflQueueCount>
    1f8e:	81 50       	subi	r24, 0x01	; 1
    1f90:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <reflQueueCount>
    1f94:	06 c0       	rjmp	.+12     	; 0x1fa2 <__vector_21+0x1cc>
			}
		} 
		else{
			stepperReady = 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	80 93 51 06 	sts	0x0651, r24	; 0x800651 <stepperReady>
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <__vector_21+0x1cc>
		}
	}
	else{
		stepperReady = 0;
    1f9e:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <stepperReady>
	}
	//////////MOVE TOWARDS GOAL POSITION
	if(((difference > 0) && (difference < 100)) || (difference < -100)){//***change to make up for faster direction of stepper
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	83 36       	cpi	r24, 0x63	; 99
    1fa8:	91 05       	cpc	r25, r1
    1faa:	20 f0       	brcs	.+8      	; 0x1fb4 <__vector_21+0x1de>
    1fac:	cc 39       	cpi	r28, 0x9C	; 156
    1fae:	8f ef       	ldi	r24, 0xFF	; 255
    1fb0:	d8 07       	cpc	r29, r24
    1fb2:	dc f4       	brge	.+54     	; 0x1fea <__vector_21+0x214>
		stepCurrentPosition++;
    1fb4:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <stepCurrentPosition>
    1fb8:	90 91 56 06 	lds	r25, 0x0656	; 0x800656 <stepCurrentPosition+0x1>
    1fbc:	01 96       	adiw	r24, 0x01	; 1
    1fbe:	90 93 56 06 	sts	0x0656, r25	; 0x800656 <stepCurrentPosition+0x1>
    1fc2:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <stepCurrentPosition>
		if(stepCurrentPosition > 199){
    1fc6:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <stepCurrentPosition>
    1fca:	90 91 56 06 	lds	r25, 0x0656	; 0x800656 <stepCurrentPosition+0x1>
    1fce:	88 3c       	cpi	r24, 0xC8	; 200
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	24 f0       	brlt	.+8      	; 0x1fdc <__vector_21+0x206>
			stepCurrentPosition = 0;
    1fd4:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <stepCurrentPosition+0x1>
    1fd8:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <stepCurrentPosition>
		}
		stepAPosition = (stepAPosition + 1) & 3; //& 3 is a bitwise version of %4, creates a circular loop through stepArray	
    1fdc:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <stepAPosition>
    1fe0:	8f 5f       	subi	r24, 0xFF	; 255
    1fe2:	83 70       	andi	r24, 0x03	; 3
    1fe4:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <stepAPosition>
    1fe8:	24 c0       	rjmp	.+72     	; 0x2032 <__vector_21+0x25c>
	}
	else if(((difference < 0) && (difference >= -100)) || (difference >= 100)){
    1fea:	ce 01       	movw	r24, r28
    1fec:	8c 59       	subi	r24, 0x9C	; 156
    1fee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff0:	84 36       	cpi	r24, 0x64	; 100
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	18 f0       	brcs	.+6      	; 0x1ffc <__vector_21+0x226>
    1ff6:	c4 36       	cpi	r28, 0x64	; 100
    1ff8:	d1 05       	cpc	r29, r1
    1ffa:	dc f0       	brlt	.+54     	; 0x2032 <__vector_21+0x25c>
		stepCurrentPosition--;
    1ffc:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <stepCurrentPosition>
    2000:	90 91 56 06 	lds	r25, 0x0656	; 0x800656 <stepCurrentPosition+0x1>
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	90 93 56 06 	sts	0x0656, r25	; 0x800656 <stepCurrentPosition+0x1>
    200a:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <stepCurrentPosition>
		if(stepCurrentPosition < 0){
    200e:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <stepCurrentPosition>
    2012:	90 91 56 06 	lds	r25, 0x0656	; 0x800656 <stepCurrentPosition+0x1>
    2016:	99 23       	and	r25, r25
    2018:	34 f4       	brge	.+12     	; 0x2026 <__vector_21+0x250>
			stepCurrentPosition = 199;
    201a:	87 ec       	ldi	r24, 0xC7	; 199
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	90 93 56 06 	sts	0x0656, r25	; 0x800656 <stepCurrentPosition+0x1>
    2022:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <stepCurrentPosition>
		}
		//***
		stepAPosition = (stepAPosition - 1) & 3; //& 3 is a bitwise %4, creates a circular loop through stepArray
    2026:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <stepAPosition>
    202a:	81 50       	subi	r24, 0x01	; 1
    202c:	83 70       	andi	r24, 0x03	; 3
    202e:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <stepAPosition>
	}

	PORTA = (PORTA & 0b11000000) | stepArray[stepAPosition];
    2032:	82 b1       	in	r24, 0x02	; 2
    2034:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <stepAPosition>
    2038:	80 7c       	andi	r24, 0xC0	; 192
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	e2 5d       	subi	r30, 0xD2	; 210
    203e:	fd 4f       	sbci	r31, 0xFD	; 253
    2040:	90 81       	ld	r25, Z
    2042:	89 2b       	or	r24, r25
    2044:	82 b9       	out	0x02, r24	; 2

	//////////ACCELERATION/DECELERATION ***
	if(shortAbsDifference > 30 && stepperDelay > stepperMinDelay){//MIN_STEPPER_DELAY){
    2046:	1f 31       	cpi	r17, 0x1F	; 31
    2048:	d0 f0       	brcs	.+52     	; 0x207e <__vector_21+0x2a8>
    204a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <stepperDelay>
    204e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <stepperMinDelay>
    2052:	89 17       	cp	r24, r25
    2054:	60 f0       	brcs	.+24     	; 0x206e <__vector_21+0x298>
    2056:	13 c0       	rjmp	.+38     	; 0x207e <__vector_21+0x2a8>
		stepperDelay -= stepperAccelRate; // STEPPER_ACCELERATION_RATE; 
	}
	else if(shortAbsDifference < NUMBER_STEPS_DECELERATION && stepperDelay <= stepperMaxDelay){//MAX_STEPPER_DELAY){
    2058:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <stepperDelay>
    205c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <stepperMaxDelay>
    2060:	89 17       	cp	r24, r25
    2062:	80 f4       	brcc	.+32     	; 0x2084 <__vector_21+0x2ae>
		stepperDelay += stepperAccelRate; //STEPPER_ACCELERATION_RATE;
	}
	//Set the initial value of the timer counter to 0
	TCNT0 = 0x0;
    2064:	16 bc       	out	0x26, r1	; 38
	//Sets delay till next step
	OCR0A = stepperDelay;
    2066:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <stepperDelay>
    206a:	87 bd       	out	0x27, r24	; 39
    206c:	13 c0       	rjmp	.+38     	; 0x2094 <__vector_21+0x2be>

	PORTA = (PORTA & 0b11000000) | stepArray[stepAPosition];

	//////////ACCELERATION/DECELERATION ***
	if(shortAbsDifference > 30 && stepperDelay > stepperMinDelay){//MIN_STEPPER_DELAY){
		stepperDelay -= stepperAccelRate; // STEPPER_ACCELERATION_RATE; 
    206e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <stepperAccelRate>
    2072:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <stepperDelay>
    2076:	89 1b       	sub	r24, r25
    2078:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <stepperDelay>
    207c:	f3 cf       	rjmp	.-26     	; 0x2064 <__vector_21+0x28e>
	}
	else if(shortAbsDifference < NUMBER_STEPS_DECELERATION && stepperDelay <= stepperMaxDelay){//MAX_STEPPER_DELAY){
    207e:	14 31       	cpi	r17, 0x14	; 20
    2080:	58 f3       	brcs	.-42     	; 0x2058 <__vector_21+0x282>
    2082:	f0 cf       	rjmp	.-32     	; 0x2064 <__vector_21+0x28e>
		stepperDelay += stepperAccelRate; //STEPPER_ACCELERATION_RATE;
    2084:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <stepperAccelRate>
    2088:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <stepperDelay>
    208c:	89 0f       	add	r24, r25
    208e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <stepperDelay>
    2092:	e8 cf       	rjmp	.-48     	; 0x2064 <__vector_21+0x28e>
	}
	//Set the initial value of the timer counter to 0
	TCNT0 = 0x0;
	//Sets delay till next step
	OCR0A = stepperDelay;
    2094:	ff 91       	pop	r31
    2096:	ef 91       	pop	r30
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	bf 91       	pop	r27
    209e:	af 91       	pop	r26
    20a0:	9f 91       	pop	r25
    20a2:	8f 91       	pop	r24
    20a4:	7f 91       	pop	r23
    20a6:	6f 91       	pop	r22
    20a8:	5f 91       	pop	r21
    20aa:	4f 91       	pop	r20
    20ac:	3f 91       	pop	r19
    20ae:	2f 91       	pop	r18
    20b0:	1f 91       	pop	r17
    20b2:	0f 90       	pop	r0
    20b4:	0b be       	out	0x3b, r0	; 59
    20b6:	0f 90       	pop	r0
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	0f 90       	pop	r0
    20bc:	1f 90       	pop	r1
    20be:	18 95       	reti

000020c0 <_Z9initTimerv>:
#include "timer.h"

void initTimer(void){
	//Set the waveform generation mode bit to clear timer
	//on Compare Math mode (CTC) only
	TCCR1B |= _BV(WGM12);
    20c0:	e1 e8       	ldi	r30, 0x81	; 129
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	88 60       	ori	r24, 0x08	; 8
    20c8:	80 83       	st	Z, r24
	
	//Set output compare register for 1000 cycles (1 ms)
	OCR1A = 0x3e8;
    20ca:	88 ee       	ldi	r24, 0xE8	; 232
    20cc:	93 e0       	ldi	r25, 0x03	; 3
    20ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    20d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    20d6:	08 95       	ret

000020d8 <_Z6mTimeri>:
}

//Timer function
void mTimer(int count){
    20d8:	ac 01       	movw	r20, r24
	int i = 0;
	
	//Enable
	//Sets bit 0 of the Timer/Counter control register (prescaler)
	//CS = 0b010 (8 MHz Clock prescaled by 1/8)
	TCCR1B |= _BV(CS11);
    20da:	e1 e8       	ldi	r30, 0x81	; 129
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	90 81       	ld	r25, Z
    20e0:	92 60       	ori	r25, 0x02	; 2
    20e2:	90 83       	st	Z, r25
	
	//Set the initial value of the timer counter to 0
	TCNT1 = 0x0;
    20e4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    20e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	//Clear the interrupt flag and begin timer
	TIFR1 |= _BV(OCF1A);
    20ec:	b1 9a       	sbi	0x16, 1	; 22
	OCR1A = 0x3e8;
}

//Timer function
void mTimer(int count){
	int i = 0;
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
	
	//Clear the interrupt flag and begin timer
	TIFR1 |= _BV(OCF1A);
	
	//Poll the timer to determine when the timer has reached OCR1A
	while(i<count){
    20f2:	24 17       	cp	r18, r20
    20f4:	35 07       	cpc	r19, r21
    20f6:	44 f4       	brge	.+16     	; 0x2108 <__stack+0x9>

		if((TIFR1 & 0x02) == 0x02){
    20f8:	b1 99       	sbic	0x16, 1	; 22
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <__stack+0x1>
    20fc:	b1 9b       	sbis	0x16, 1	; 22
    20fe:	fe cf       	rjmp	.-4      	; 0x20fc <_Z6mTimeri+0x24>
			//Clear the interrupt flag by writing a one to the bit
			TIFR1 |= _BV(OCF1A);
    2100:	b1 9a       	sbi	0x16, 1	; 22
			
			i++; //Increment the loop counter
    2102:	2f 5f       	subi	r18, 0xFF	; 255
    2104:	3f 4f       	sbci	r19, 0xFF	; 255
    2106:	f5 cf       	rjmp	.-22     	; 0x20f2 <_Z6mTimeri+0x1a>
		}
	}
	TCCR1B &= ~DISABLE_TIMER1;
    2108:	e1 e8       	ldi	r30, 0x81	; 129
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	88 7f       	andi	r24, 0xF8	; 248
    2110:	80 83       	st	Z, r24
    2112:	08 95       	ret

00002114 <__tablejump2__>:
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	00 24       	eor	r0, r0
    211a:	00 1c       	adc	r0, r0
    211c:	0b be       	out	0x3b, r0	; 59
    211e:	07 90       	elpm	r0, Z+
    2120:	f6 91       	elpm	r31, Z
    2122:	e0 2d       	mov	r30, r0
    2124:	09 94       	ijmp

00002126 <sprintf>:
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	2e 97       	sbiw	r28, 0x0e	; 14
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	0d 89       	ldd	r16, Y+21	; 0x15
    2140:	1e 89       	ldd	r17, Y+22	; 0x16
    2142:	86 e0       	ldi	r24, 0x06	; 6
    2144:	8c 83       	std	Y+4, r24	; 0x04
    2146:	1a 83       	std	Y+2, r17	; 0x02
    2148:	09 83       	std	Y+1, r16	; 0x01
    214a:	8f ef       	ldi	r24, 0xFF	; 255
    214c:	9f e7       	ldi	r25, 0x7F	; 127
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	ae 01       	movw	r20, r28
    2154:	47 5e       	subi	r20, 0xE7	; 231
    2156:	5f 4f       	sbci	r21, 0xFF	; 255
    2158:	6f 89       	ldd	r22, Y+23	; 0x17
    215a:	78 8d       	ldd	r23, Y+24	; 0x18
    215c:	ce 01       	movw	r24, r28
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	10 d0       	rcall	.+32     	; 0x2182 <vfprintf>
    2162:	ef 81       	ldd	r30, Y+7	; 0x07
    2164:	f8 85       	ldd	r31, Y+8	; 0x08
    2166:	e0 0f       	add	r30, r16
    2168:	f1 1f       	adc	r31, r17
    216a:	10 82       	st	Z, r1
    216c:	2e 96       	adiw	r28, 0x0e	; 14
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	1f 91       	pop	r17
    217e:	0f 91       	pop	r16
    2180:	08 95       	ret

00002182 <vfprintf>:
    2182:	2f 92       	push	r2
    2184:	3f 92       	push	r3
    2186:	4f 92       	push	r4
    2188:	5f 92       	push	r5
    218a:	6f 92       	push	r6
    218c:	7f 92       	push	r7
    218e:	8f 92       	push	r8
    2190:	9f 92       	push	r9
    2192:	af 92       	push	r10
    2194:	bf 92       	push	r11
    2196:	cf 92       	push	r12
    2198:	df 92       	push	r13
    219a:	ef 92       	push	r14
    219c:	ff 92       	push	r15
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	2b 97       	sbiw	r28, 0x0b	; 11
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	6c 01       	movw	r12, r24
    21b8:	7b 01       	movw	r14, r22
    21ba:	8a 01       	movw	r16, r20
    21bc:	fc 01       	movw	r30, r24
    21be:	17 82       	std	Z+7, r1	; 0x07
    21c0:	16 82       	std	Z+6, r1	; 0x06
    21c2:	83 81       	ldd	r24, Z+3	; 0x03
    21c4:	81 ff       	sbrs	r24, 1
    21c6:	bf c1       	rjmp	.+894    	; 0x2546 <vfprintf+0x3c4>
    21c8:	ce 01       	movw	r24, r28
    21ca:	01 96       	adiw	r24, 0x01	; 1
    21cc:	3c 01       	movw	r6, r24
    21ce:	f6 01       	movw	r30, r12
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	f7 01       	movw	r30, r14
    21d4:	93 fd       	sbrc	r25, 3
    21d6:	85 91       	lpm	r24, Z+
    21d8:	93 ff       	sbrs	r25, 3
    21da:	81 91       	ld	r24, Z+
    21dc:	7f 01       	movw	r14, r30
    21de:	88 23       	and	r24, r24
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <vfprintf+0x62>
    21e2:	ad c1       	rjmp	.+858    	; 0x253e <vfprintf+0x3bc>
    21e4:	85 32       	cpi	r24, 0x25	; 37
    21e6:	39 f4       	brne	.+14     	; 0x21f6 <vfprintf+0x74>
    21e8:	93 fd       	sbrc	r25, 3
    21ea:	85 91       	lpm	r24, Z+
    21ec:	93 ff       	sbrs	r25, 3
    21ee:	81 91       	ld	r24, Z+
    21f0:	7f 01       	movw	r14, r30
    21f2:	85 32       	cpi	r24, 0x25	; 37
    21f4:	21 f4       	brne	.+8      	; 0x21fe <vfprintf+0x7c>
    21f6:	b6 01       	movw	r22, r12
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	d6 d1       	rcall	.+940    	; 0x25a8 <fputc>
    21fc:	e8 cf       	rjmp	.-48     	; 0x21ce <vfprintf+0x4c>
    21fe:	91 2c       	mov	r9, r1
    2200:	21 2c       	mov	r2, r1
    2202:	31 2c       	mov	r3, r1
    2204:	ff e1       	ldi	r31, 0x1F	; 31
    2206:	f3 15       	cp	r31, r3
    2208:	d8 f0       	brcs	.+54     	; 0x2240 <vfprintf+0xbe>
    220a:	8b 32       	cpi	r24, 0x2B	; 43
    220c:	79 f0       	breq	.+30     	; 0x222c <vfprintf+0xaa>
    220e:	38 f4       	brcc	.+14     	; 0x221e <vfprintf+0x9c>
    2210:	80 32       	cpi	r24, 0x20	; 32
    2212:	79 f0       	breq	.+30     	; 0x2232 <vfprintf+0xb0>
    2214:	83 32       	cpi	r24, 0x23	; 35
    2216:	a1 f4       	brne	.+40     	; 0x2240 <vfprintf+0xbe>
    2218:	23 2d       	mov	r18, r3
    221a:	20 61       	ori	r18, 0x10	; 16
    221c:	1d c0       	rjmp	.+58     	; 0x2258 <vfprintf+0xd6>
    221e:	8d 32       	cpi	r24, 0x2D	; 45
    2220:	61 f0       	breq	.+24     	; 0x223a <vfprintf+0xb8>
    2222:	80 33       	cpi	r24, 0x30	; 48
    2224:	69 f4       	brne	.+26     	; 0x2240 <vfprintf+0xbe>
    2226:	23 2d       	mov	r18, r3
    2228:	21 60       	ori	r18, 0x01	; 1
    222a:	16 c0       	rjmp	.+44     	; 0x2258 <vfprintf+0xd6>
    222c:	83 2d       	mov	r24, r3
    222e:	82 60       	ori	r24, 0x02	; 2
    2230:	38 2e       	mov	r3, r24
    2232:	e3 2d       	mov	r30, r3
    2234:	e4 60       	ori	r30, 0x04	; 4
    2236:	3e 2e       	mov	r3, r30
    2238:	2a c0       	rjmp	.+84     	; 0x228e <vfprintf+0x10c>
    223a:	f3 2d       	mov	r31, r3
    223c:	f8 60       	ori	r31, 0x08	; 8
    223e:	1d c0       	rjmp	.+58     	; 0x227a <vfprintf+0xf8>
    2240:	37 fc       	sbrc	r3, 7
    2242:	2d c0       	rjmp	.+90     	; 0x229e <vfprintf+0x11c>
    2244:	20 ed       	ldi	r18, 0xD0	; 208
    2246:	28 0f       	add	r18, r24
    2248:	2a 30       	cpi	r18, 0x0A	; 10
    224a:	40 f0       	brcs	.+16     	; 0x225c <vfprintf+0xda>
    224c:	8e 32       	cpi	r24, 0x2E	; 46
    224e:	b9 f4       	brne	.+46     	; 0x227e <vfprintf+0xfc>
    2250:	36 fc       	sbrc	r3, 6
    2252:	75 c1       	rjmp	.+746    	; 0x253e <vfprintf+0x3bc>
    2254:	23 2d       	mov	r18, r3
    2256:	20 64       	ori	r18, 0x40	; 64
    2258:	32 2e       	mov	r3, r18
    225a:	19 c0       	rjmp	.+50     	; 0x228e <vfprintf+0x10c>
    225c:	36 fe       	sbrs	r3, 6
    225e:	06 c0       	rjmp	.+12     	; 0x226c <vfprintf+0xea>
    2260:	8a e0       	ldi	r24, 0x0A	; 10
    2262:	98 9e       	mul	r9, r24
    2264:	20 0d       	add	r18, r0
    2266:	11 24       	eor	r1, r1
    2268:	92 2e       	mov	r9, r18
    226a:	11 c0       	rjmp	.+34     	; 0x228e <vfprintf+0x10c>
    226c:	ea e0       	ldi	r30, 0x0A	; 10
    226e:	2e 9e       	mul	r2, r30
    2270:	20 0d       	add	r18, r0
    2272:	11 24       	eor	r1, r1
    2274:	22 2e       	mov	r2, r18
    2276:	f3 2d       	mov	r31, r3
    2278:	f0 62       	ori	r31, 0x20	; 32
    227a:	3f 2e       	mov	r3, r31
    227c:	08 c0       	rjmp	.+16     	; 0x228e <vfprintf+0x10c>
    227e:	8c 36       	cpi	r24, 0x6C	; 108
    2280:	21 f4       	brne	.+8      	; 0x228a <vfprintf+0x108>
    2282:	83 2d       	mov	r24, r3
    2284:	80 68       	ori	r24, 0x80	; 128
    2286:	38 2e       	mov	r3, r24
    2288:	02 c0       	rjmp	.+4      	; 0x228e <vfprintf+0x10c>
    228a:	88 36       	cpi	r24, 0x68	; 104
    228c:	41 f4       	brne	.+16     	; 0x229e <vfprintf+0x11c>
    228e:	f7 01       	movw	r30, r14
    2290:	93 fd       	sbrc	r25, 3
    2292:	85 91       	lpm	r24, Z+
    2294:	93 ff       	sbrs	r25, 3
    2296:	81 91       	ld	r24, Z+
    2298:	7f 01       	movw	r14, r30
    229a:	81 11       	cpse	r24, r1
    229c:	b3 cf       	rjmp	.-154    	; 0x2204 <vfprintf+0x82>
    229e:	98 2f       	mov	r25, r24
    22a0:	9f 7d       	andi	r25, 0xDF	; 223
    22a2:	95 54       	subi	r25, 0x45	; 69
    22a4:	93 30       	cpi	r25, 0x03	; 3
    22a6:	28 f4       	brcc	.+10     	; 0x22b2 <vfprintf+0x130>
    22a8:	0c 5f       	subi	r16, 0xFC	; 252
    22aa:	1f 4f       	sbci	r17, 0xFF	; 255
    22ac:	9f e3       	ldi	r25, 0x3F	; 63
    22ae:	99 83       	std	Y+1, r25	; 0x01
    22b0:	0d c0       	rjmp	.+26     	; 0x22cc <vfprintf+0x14a>
    22b2:	83 36       	cpi	r24, 0x63	; 99
    22b4:	31 f0       	breq	.+12     	; 0x22c2 <vfprintf+0x140>
    22b6:	83 37       	cpi	r24, 0x73	; 115
    22b8:	71 f0       	breq	.+28     	; 0x22d6 <vfprintf+0x154>
    22ba:	83 35       	cpi	r24, 0x53	; 83
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <vfprintf+0x13e>
    22be:	55 c0       	rjmp	.+170    	; 0x236a <vfprintf+0x1e8>
    22c0:	20 c0       	rjmp	.+64     	; 0x2302 <vfprintf+0x180>
    22c2:	f8 01       	movw	r30, r16
    22c4:	80 81       	ld	r24, Z
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	0e 5f       	subi	r16, 0xFE	; 254
    22ca:	1f 4f       	sbci	r17, 0xFF	; 255
    22cc:	88 24       	eor	r8, r8
    22ce:	83 94       	inc	r8
    22d0:	91 2c       	mov	r9, r1
    22d2:	53 01       	movw	r10, r6
    22d4:	12 c0       	rjmp	.+36     	; 0x22fa <vfprintf+0x178>
    22d6:	28 01       	movw	r4, r16
    22d8:	f2 e0       	ldi	r31, 0x02	; 2
    22da:	4f 0e       	add	r4, r31
    22dc:	51 1c       	adc	r5, r1
    22de:	f8 01       	movw	r30, r16
    22e0:	a0 80       	ld	r10, Z
    22e2:	b1 80       	ldd	r11, Z+1	; 0x01
    22e4:	36 fe       	sbrs	r3, 6
    22e6:	03 c0       	rjmp	.+6      	; 0x22ee <vfprintf+0x16c>
    22e8:	69 2d       	mov	r22, r9
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <vfprintf+0x170>
    22ee:	6f ef       	ldi	r22, 0xFF	; 255
    22f0:	7f ef       	ldi	r23, 0xFF	; 255
    22f2:	c5 01       	movw	r24, r10
    22f4:	4e d1       	rcall	.+668    	; 0x2592 <strnlen>
    22f6:	4c 01       	movw	r8, r24
    22f8:	82 01       	movw	r16, r4
    22fa:	f3 2d       	mov	r31, r3
    22fc:	ff 77       	andi	r31, 0x7F	; 127
    22fe:	3f 2e       	mov	r3, r31
    2300:	15 c0       	rjmp	.+42     	; 0x232c <vfprintf+0x1aa>
    2302:	28 01       	movw	r4, r16
    2304:	22 e0       	ldi	r18, 0x02	; 2
    2306:	42 0e       	add	r4, r18
    2308:	51 1c       	adc	r5, r1
    230a:	f8 01       	movw	r30, r16
    230c:	a0 80       	ld	r10, Z
    230e:	b1 80       	ldd	r11, Z+1	; 0x01
    2310:	36 fe       	sbrs	r3, 6
    2312:	03 c0       	rjmp	.+6      	; 0x231a <vfprintf+0x198>
    2314:	69 2d       	mov	r22, r9
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	02 c0       	rjmp	.+4      	; 0x231e <vfprintf+0x19c>
    231a:	6f ef       	ldi	r22, 0xFF	; 255
    231c:	7f ef       	ldi	r23, 0xFF	; 255
    231e:	c5 01       	movw	r24, r10
    2320:	2d d1       	rcall	.+602    	; 0x257c <strnlen_P>
    2322:	4c 01       	movw	r8, r24
    2324:	f3 2d       	mov	r31, r3
    2326:	f0 68       	ori	r31, 0x80	; 128
    2328:	3f 2e       	mov	r3, r31
    232a:	82 01       	movw	r16, r4
    232c:	33 fc       	sbrc	r3, 3
    232e:	19 c0       	rjmp	.+50     	; 0x2362 <vfprintf+0x1e0>
    2330:	82 2d       	mov	r24, r2
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	88 16       	cp	r8, r24
    2336:	99 06       	cpc	r9, r25
    2338:	a0 f4       	brcc	.+40     	; 0x2362 <vfprintf+0x1e0>
    233a:	b6 01       	movw	r22, r12
    233c:	80 e2       	ldi	r24, 0x20	; 32
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	33 d1       	rcall	.+614    	; 0x25a8 <fputc>
    2342:	2a 94       	dec	r2
    2344:	f5 cf       	rjmp	.-22     	; 0x2330 <vfprintf+0x1ae>
    2346:	f5 01       	movw	r30, r10
    2348:	37 fc       	sbrc	r3, 7
    234a:	85 91       	lpm	r24, Z+
    234c:	37 fe       	sbrs	r3, 7
    234e:	81 91       	ld	r24, Z+
    2350:	5f 01       	movw	r10, r30
    2352:	b6 01       	movw	r22, r12
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	28 d1       	rcall	.+592    	; 0x25a8 <fputc>
    2358:	21 10       	cpse	r2, r1
    235a:	2a 94       	dec	r2
    235c:	21 e0       	ldi	r18, 0x01	; 1
    235e:	82 1a       	sub	r8, r18
    2360:	91 08       	sbc	r9, r1
    2362:	81 14       	cp	r8, r1
    2364:	91 04       	cpc	r9, r1
    2366:	79 f7       	brne	.-34     	; 0x2346 <vfprintf+0x1c4>
    2368:	e1 c0       	rjmp	.+450    	; 0x252c <vfprintf+0x3aa>
    236a:	84 36       	cpi	r24, 0x64	; 100
    236c:	11 f0       	breq	.+4      	; 0x2372 <vfprintf+0x1f0>
    236e:	89 36       	cpi	r24, 0x69	; 105
    2370:	39 f5       	brne	.+78     	; 0x23c0 <vfprintf+0x23e>
    2372:	f8 01       	movw	r30, r16
    2374:	37 fe       	sbrs	r3, 7
    2376:	07 c0       	rjmp	.+14     	; 0x2386 <vfprintf+0x204>
    2378:	60 81       	ld	r22, Z
    237a:	71 81       	ldd	r23, Z+1	; 0x01
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	0c 5f       	subi	r16, 0xFC	; 252
    2382:	1f 4f       	sbci	r17, 0xFF	; 255
    2384:	08 c0       	rjmp	.+16     	; 0x2396 <vfprintf+0x214>
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	07 2e       	mov	r0, r23
    238c:	00 0c       	add	r0, r0
    238e:	88 0b       	sbc	r24, r24
    2390:	99 0b       	sbc	r25, r25
    2392:	0e 5f       	subi	r16, 0xFE	; 254
    2394:	1f 4f       	sbci	r17, 0xFF	; 255
    2396:	f3 2d       	mov	r31, r3
    2398:	ff 76       	andi	r31, 0x6F	; 111
    239a:	3f 2e       	mov	r3, r31
    239c:	97 ff       	sbrs	r25, 7
    239e:	09 c0       	rjmp	.+18     	; 0x23b2 <vfprintf+0x230>
    23a0:	90 95       	com	r25
    23a2:	80 95       	com	r24
    23a4:	70 95       	com	r23
    23a6:	61 95       	neg	r22
    23a8:	7f 4f       	sbci	r23, 0xFF	; 255
    23aa:	8f 4f       	sbci	r24, 0xFF	; 255
    23ac:	9f 4f       	sbci	r25, 0xFF	; 255
    23ae:	f0 68       	ori	r31, 0x80	; 128
    23b0:	3f 2e       	mov	r3, r31
    23b2:	2a e0       	ldi	r18, 0x0A	; 10
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	a3 01       	movw	r20, r6
    23b8:	33 d1       	rcall	.+614    	; 0x2620 <__ultoa_invert>
    23ba:	88 2e       	mov	r8, r24
    23bc:	86 18       	sub	r8, r6
    23be:	44 c0       	rjmp	.+136    	; 0x2448 <vfprintf+0x2c6>
    23c0:	85 37       	cpi	r24, 0x75	; 117
    23c2:	31 f4       	brne	.+12     	; 0x23d0 <vfprintf+0x24e>
    23c4:	23 2d       	mov	r18, r3
    23c6:	2f 7e       	andi	r18, 0xEF	; 239
    23c8:	b2 2e       	mov	r11, r18
    23ca:	2a e0       	ldi	r18, 0x0A	; 10
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	25 c0       	rjmp	.+74     	; 0x241a <vfprintf+0x298>
    23d0:	93 2d       	mov	r25, r3
    23d2:	99 7f       	andi	r25, 0xF9	; 249
    23d4:	b9 2e       	mov	r11, r25
    23d6:	8f 36       	cpi	r24, 0x6F	; 111
    23d8:	c1 f0       	breq	.+48     	; 0x240a <vfprintf+0x288>
    23da:	18 f4       	brcc	.+6      	; 0x23e2 <vfprintf+0x260>
    23dc:	88 35       	cpi	r24, 0x58	; 88
    23de:	79 f0       	breq	.+30     	; 0x23fe <vfprintf+0x27c>
    23e0:	ae c0       	rjmp	.+348    	; 0x253e <vfprintf+0x3bc>
    23e2:	80 37       	cpi	r24, 0x70	; 112
    23e4:	19 f0       	breq	.+6      	; 0x23ec <vfprintf+0x26a>
    23e6:	88 37       	cpi	r24, 0x78	; 120
    23e8:	21 f0       	breq	.+8      	; 0x23f2 <vfprintf+0x270>
    23ea:	a9 c0       	rjmp	.+338    	; 0x253e <vfprintf+0x3bc>
    23ec:	e9 2f       	mov	r30, r25
    23ee:	e0 61       	ori	r30, 0x10	; 16
    23f0:	be 2e       	mov	r11, r30
    23f2:	b4 fe       	sbrs	r11, 4
    23f4:	0d c0       	rjmp	.+26     	; 0x2410 <vfprintf+0x28e>
    23f6:	fb 2d       	mov	r31, r11
    23f8:	f4 60       	ori	r31, 0x04	; 4
    23fa:	bf 2e       	mov	r11, r31
    23fc:	09 c0       	rjmp	.+18     	; 0x2410 <vfprintf+0x28e>
    23fe:	34 fe       	sbrs	r3, 4
    2400:	0a c0       	rjmp	.+20     	; 0x2416 <vfprintf+0x294>
    2402:	29 2f       	mov	r18, r25
    2404:	26 60       	ori	r18, 0x06	; 6
    2406:	b2 2e       	mov	r11, r18
    2408:	06 c0       	rjmp	.+12     	; 0x2416 <vfprintf+0x294>
    240a:	28 e0       	ldi	r18, 0x08	; 8
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	05 c0       	rjmp	.+10     	; 0x241a <vfprintf+0x298>
    2410:	20 e1       	ldi	r18, 0x10	; 16
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	02 c0       	rjmp	.+4      	; 0x241a <vfprintf+0x298>
    2416:	20 e1       	ldi	r18, 0x10	; 16
    2418:	32 e0       	ldi	r19, 0x02	; 2
    241a:	f8 01       	movw	r30, r16
    241c:	b7 fe       	sbrs	r11, 7
    241e:	07 c0       	rjmp	.+14     	; 0x242e <vfprintf+0x2ac>
    2420:	60 81       	ld	r22, Z
    2422:	71 81       	ldd	r23, Z+1	; 0x01
    2424:	82 81       	ldd	r24, Z+2	; 0x02
    2426:	93 81       	ldd	r25, Z+3	; 0x03
    2428:	0c 5f       	subi	r16, 0xFC	; 252
    242a:	1f 4f       	sbci	r17, 0xFF	; 255
    242c:	06 c0       	rjmp	.+12     	; 0x243a <vfprintf+0x2b8>
    242e:	60 81       	ld	r22, Z
    2430:	71 81       	ldd	r23, Z+1	; 0x01
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	0e 5f       	subi	r16, 0xFE	; 254
    2438:	1f 4f       	sbci	r17, 0xFF	; 255
    243a:	a3 01       	movw	r20, r6
    243c:	f1 d0       	rcall	.+482    	; 0x2620 <__ultoa_invert>
    243e:	88 2e       	mov	r8, r24
    2440:	86 18       	sub	r8, r6
    2442:	fb 2d       	mov	r31, r11
    2444:	ff 77       	andi	r31, 0x7F	; 127
    2446:	3f 2e       	mov	r3, r31
    2448:	36 fe       	sbrs	r3, 6
    244a:	0d c0       	rjmp	.+26     	; 0x2466 <vfprintf+0x2e4>
    244c:	23 2d       	mov	r18, r3
    244e:	2e 7f       	andi	r18, 0xFE	; 254
    2450:	a2 2e       	mov	r10, r18
    2452:	89 14       	cp	r8, r9
    2454:	58 f4       	brcc	.+22     	; 0x246c <vfprintf+0x2ea>
    2456:	34 fe       	sbrs	r3, 4
    2458:	0b c0       	rjmp	.+22     	; 0x2470 <vfprintf+0x2ee>
    245a:	32 fc       	sbrc	r3, 2
    245c:	09 c0       	rjmp	.+18     	; 0x2470 <vfprintf+0x2ee>
    245e:	83 2d       	mov	r24, r3
    2460:	8e 7e       	andi	r24, 0xEE	; 238
    2462:	a8 2e       	mov	r10, r24
    2464:	05 c0       	rjmp	.+10     	; 0x2470 <vfprintf+0x2ee>
    2466:	b8 2c       	mov	r11, r8
    2468:	a3 2c       	mov	r10, r3
    246a:	03 c0       	rjmp	.+6      	; 0x2472 <vfprintf+0x2f0>
    246c:	b8 2c       	mov	r11, r8
    246e:	01 c0       	rjmp	.+2      	; 0x2472 <vfprintf+0x2f0>
    2470:	b9 2c       	mov	r11, r9
    2472:	a4 fe       	sbrs	r10, 4
    2474:	0f c0       	rjmp	.+30     	; 0x2494 <vfprintf+0x312>
    2476:	fe 01       	movw	r30, r28
    2478:	e8 0d       	add	r30, r8
    247a:	f1 1d       	adc	r31, r1
    247c:	80 81       	ld	r24, Z
    247e:	80 33       	cpi	r24, 0x30	; 48
    2480:	21 f4       	brne	.+8      	; 0x248a <vfprintf+0x308>
    2482:	9a 2d       	mov	r25, r10
    2484:	99 7e       	andi	r25, 0xE9	; 233
    2486:	a9 2e       	mov	r10, r25
    2488:	09 c0       	rjmp	.+18     	; 0x249c <vfprintf+0x31a>
    248a:	a2 fe       	sbrs	r10, 2
    248c:	06 c0       	rjmp	.+12     	; 0x249a <vfprintf+0x318>
    248e:	b3 94       	inc	r11
    2490:	b3 94       	inc	r11
    2492:	04 c0       	rjmp	.+8      	; 0x249c <vfprintf+0x31a>
    2494:	8a 2d       	mov	r24, r10
    2496:	86 78       	andi	r24, 0x86	; 134
    2498:	09 f0       	breq	.+2      	; 0x249c <vfprintf+0x31a>
    249a:	b3 94       	inc	r11
    249c:	a3 fc       	sbrc	r10, 3
    249e:	10 c0       	rjmp	.+32     	; 0x24c0 <vfprintf+0x33e>
    24a0:	a0 fe       	sbrs	r10, 0
    24a2:	06 c0       	rjmp	.+12     	; 0x24b0 <vfprintf+0x32e>
    24a4:	b2 14       	cp	r11, r2
    24a6:	80 f4       	brcc	.+32     	; 0x24c8 <vfprintf+0x346>
    24a8:	28 0c       	add	r2, r8
    24aa:	92 2c       	mov	r9, r2
    24ac:	9b 18       	sub	r9, r11
    24ae:	0d c0       	rjmp	.+26     	; 0x24ca <vfprintf+0x348>
    24b0:	b2 14       	cp	r11, r2
    24b2:	58 f4       	brcc	.+22     	; 0x24ca <vfprintf+0x348>
    24b4:	b6 01       	movw	r22, r12
    24b6:	80 e2       	ldi	r24, 0x20	; 32
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	76 d0       	rcall	.+236    	; 0x25a8 <fputc>
    24bc:	b3 94       	inc	r11
    24be:	f8 cf       	rjmp	.-16     	; 0x24b0 <vfprintf+0x32e>
    24c0:	b2 14       	cp	r11, r2
    24c2:	18 f4       	brcc	.+6      	; 0x24ca <vfprintf+0x348>
    24c4:	2b 18       	sub	r2, r11
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <vfprintf+0x34a>
    24c8:	98 2c       	mov	r9, r8
    24ca:	21 2c       	mov	r2, r1
    24cc:	a4 fe       	sbrs	r10, 4
    24ce:	0f c0       	rjmp	.+30     	; 0x24ee <vfprintf+0x36c>
    24d0:	b6 01       	movw	r22, r12
    24d2:	80 e3       	ldi	r24, 0x30	; 48
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	68 d0       	rcall	.+208    	; 0x25a8 <fputc>
    24d8:	a2 fe       	sbrs	r10, 2
    24da:	16 c0       	rjmp	.+44     	; 0x2508 <vfprintf+0x386>
    24dc:	a1 fc       	sbrc	r10, 1
    24de:	03 c0       	rjmp	.+6      	; 0x24e6 <vfprintf+0x364>
    24e0:	88 e7       	ldi	r24, 0x78	; 120
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <vfprintf+0x368>
    24e6:	88 e5       	ldi	r24, 0x58	; 88
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	b6 01       	movw	r22, r12
    24ec:	0c c0       	rjmp	.+24     	; 0x2506 <vfprintf+0x384>
    24ee:	8a 2d       	mov	r24, r10
    24f0:	86 78       	andi	r24, 0x86	; 134
    24f2:	51 f0       	breq	.+20     	; 0x2508 <vfprintf+0x386>
    24f4:	a1 fe       	sbrs	r10, 1
    24f6:	02 c0       	rjmp	.+4      	; 0x24fc <vfprintf+0x37a>
    24f8:	8b e2       	ldi	r24, 0x2B	; 43
    24fa:	01 c0       	rjmp	.+2      	; 0x24fe <vfprintf+0x37c>
    24fc:	80 e2       	ldi	r24, 0x20	; 32
    24fe:	a7 fc       	sbrc	r10, 7
    2500:	8d e2       	ldi	r24, 0x2D	; 45
    2502:	b6 01       	movw	r22, r12
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	50 d0       	rcall	.+160    	; 0x25a8 <fputc>
    2508:	89 14       	cp	r8, r9
    250a:	30 f4       	brcc	.+12     	; 0x2518 <vfprintf+0x396>
    250c:	b6 01       	movw	r22, r12
    250e:	80 e3       	ldi	r24, 0x30	; 48
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	4a d0       	rcall	.+148    	; 0x25a8 <fputc>
    2514:	9a 94       	dec	r9
    2516:	f8 cf       	rjmp	.-16     	; 0x2508 <vfprintf+0x386>
    2518:	8a 94       	dec	r8
    251a:	f3 01       	movw	r30, r6
    251c:	e8 0d       	add	r30, r8
    251e:	f1 1d       	adc	r31, r1
    2520:	80 81       	ld	r24, Z
    2522:	b6 01       	movw	r22, r12
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	40 d0       	rcall	.+128    	; 0x25a8 <fputc>
    2528:	81 10       	cpse	r8, r1
    252a:	f6 cf       	rjmp	.-20     	; 0x2518 <vfprintf+0x396>
    252c:	22 20       	and	r2, r2
    252e:	09 f4       	brne	.+2      	; 0x2532 <vfprintf+0x3b0>
    2530:	4e ce       	rjmp	.-868    	; 0x21ce <vfprintf+0x4c>
    2532:	b6 01       	movw	r22, r12
    2534:	80 e2       	ldi	r24, 0x20	; 32
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	37 d0       	rcall	.+110    	; 0x25a8 <fputc>
    253a:	2a 94       	dec	r2
    253c:	f7 cf       	rjmp	.-18     	; 0x252c <vfprintf+0x3aa>
    253e:	f6 01       	movw	r30, r12
    2540:	86 81       	ldd	r24, Z+6	; 0x06
    2542:	97 81       	ldd	r25, Z+7	; 0x07
    2544:	02 c0       	rjmp	.+4      	; 0x254a <vfprintf+0x3c8>
    2546:	8f ef       	ldi	r24, 0xFF	; 255
    2548:	9f ef       	ldi	r25, 0xFF	; 255
    254a:	2b 96       	adiw	r28, 0x0b	; 11
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	1f 91       	pop	r17
    255c:	0f 91       	pop	r16
    255e:	ff 90       	pop	r15
    2560:	ef 90       	pop	r14
    2562:	df 90       	pop	r13
    2564:	cf 90       	pop	r12
    2566:	bf 90       	pop	r11
    2568:	af 90       	pop	r10
    256a:	9f 90       	pop	r9
    256c:	8f 90       	pop	r8
    256e:	7f 90       	pop	r7
    2570:	6f 90       	pop	r6
    2572:	5f 90       	pop	r5
    2574:	4f 90       	pop	r4
    2576:	3f 90       	pop	r3
    2578:	2f 90       	pop	r2
    257a:	08 95       	ret

0000257c <strnlen_P>:
    257c:	fc 01       	movw	r30, r24
    257e:	05 90       	lpm	r0, Z+
    2580:	61 50       	subi	r22, 0x01	; 1
    2582:	70 40       	sbci	r23, 0x00	; 0
    2584:	01 10       	cpse	r0, r1
    2586:	d8 f7       	brcc	.-10     	; 0x257e <strnlen_P+0x2>
    2588:	80 95       	com	r24
    258a:	90 95       	com	r25
    258c:	8e 0f       	add	r24, r30
    258e:	9f 1f       	adc	r25, r31
    2590:	08 95       	ret

00002592 <strnlen>:
    2592:	fc 01       	movw	r30, r24
    2594:	61 50       	subi	r22, 0x01	; 1
    2596:	70 40       	sbci	r23, 0x00	; 0
    2598:	01 90       	ld	r0, Z+
    259a:	01 10       	cpse	r0, r1
    259c:	d8 f7       	brcc	.-10     	; 0x2594 <strnlen+0x2>
    259e:	80 95       	com	r24
    25a0:	90 95       	com	r25
    25a2:	8e 0f       	add	r24, r30
    25a4:	9f 1f       	adc	r25, r31
    25a6:	08 95       	ret

000025a8 <fputc>:
    25a8:	0f 93       	push	r16
    25aa:	1f 93       	push	r17
    25ac:	cf 93       	push	r28
    25ae:	df 93       	push	r29
    25b0:	fb 01       	movw	r30, r22
    25b2:	23 81       	ldd	r18, Z+3	; 0x03
    25b4:	21 fd       	sbrc	r18, 1
    25b6:	03 c0       	rjmp	.+6      	; 0x25be <fputc+0x16>
    25b8:	8f ef       	ldi	r24, 0xFF	; 255
    25ba:	9f ef       	ldi	r25, 0xFF	; 255
    25bc:	2c c0       	rjmp	.+88     	; 0x2616 <fputc+0x6e>
    25be:	22 ff       	sbrs	r18, 2
    25c0:	16 c0       	rjmp	.+44     	; 0x25ee <fputc+0x46>
    25c2:	46 81       	ldd	r20, Z+6	; 0x06
    25c4:	57 81       	ldd	r21, Z+7	; 0x07
    25c6:	24 81       	ldd	r18, Z+4	; 0x04
    25c8:	35 81       	ldd	r19, Z+5	; 0x05
    25ca:	42 17       	cp	r20, r18
    25cc:	53 07       	cpc	r21, r19
    25ce:	44 f4       	brge	.+16     	; 0x25e0 <fputc+0x38>
    25d0:	a0 81       	ld	r26, Z
    25d2:	b1 81       	ldd	r27, Z+1	; 0x01
    25d4:	9d 01       	movw	r18, r26
    25d6:	2f 5f       	subi	r18, 0xFF	; 255
    25d8:	3f 4f       	sbci	r19, 0xFF	; 255
    25da:	31 83       	std	Z+1, r19	; 0x01
    25dc:	20 83       	st	Z, r18
    25de:	8c 93       	st	X, r24
    25e0:	26 81       	ldd	r18, Z+6	; 0x06
    25e2:	37 81       	ldd	r19, Z+7	; 0x07
    25e4:	2f 5f       	subi	r18, 0xFF	; 255
    25e6:	3f 4f       	sbci	r19, 0xFF	; 255
    25e8:	37 83       	std	Z+7, r19	; 0x07
    25ea:	26 83       	std	Z+6, r18	; 0x06
    25ec:	14 c0       	rjmp	.+40     	; 0x2616 <fputc+0x6e>
    25ee:	8b 01       	movw	r16, r22
    25f0:	ec 01       	movw	r28, r24
    25f2:	fb 01       	movw	r30, r22
    25f4:	00 84       	ldd	r0, Z+8	; 0x08
    25f6:	f1 85       	ldd	r31, Z+9	; 0x09
    25f8:	e0 2d       	mov	r30, r0
    25fa:	09 95       	icall
    25fc:	89 2b       	or	r24, r25
    25fe:	e1 f6       	brne	.-72     	; 0x25b8 <fputc+0x10>
    2600:	d8 01       	movw	r26, r16
    2602:	16 96       	adiw	r26, 0x06	; 6
    2604:	8d 91       	ld	r24, X+
    2606:	9c 91       	ld	r25, X
    2608:	17 97       	sbiw	r26, 0x07	; 7
    260a:	01 96       	adiw	r24, 0x01	; 1
    260c:	17 96       	adiw	r26, 0x07	; 7
    260e:	9c 93       	st	X, r25
    2610:	8e 93       	st	-X, r24
    2612:	16 97       	sbiw	r26, 0x06	; 6
    2614:	ce 01       	movw	r24, r28
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	1f 91       	pop	r17
    261c:	0f 91       	pop	r16
    261e:	08 95       	ret

00002620 <__ultoa_invert>:
    2620:	fa 01       	movw	r30, r20
    2622:	aa 27       	eor	r26, r26
    2624:	28 30       	cpi	r18, 0x08	; 8
    2626:	51 f1       	breq	.+84     	; 0x267c <__ultoa_invert+0x5c>
    2628:	20 31       	cpi	r18, 0x10	; 16
    262a:	81 f1       	breq	.+96     	; 0x268c <__ultoa_invert+0x6c>
    262c:	e8 94       	clt
    262e:	6f 93       	push	r22
    2630:	6e 7f       	andi	r22, 0xFE	; 254
    2632:	6e 5f       	subi	r22, 0xFE	; 254
    2634:	7f 4f       	sbci	r23, 0xFF	; 255
    2636:	8f 4f       	sbci	r24, 0xFF	; 255
    2638:	9f 4f       	sbci	r25, 0xFF	; 255
    263a:	af 4f       	sbci	r26, 0xFF	; 255
    263c:	b1 e0       	ldi	r27, 0x01	; 1
    263e:	3e d0       	rcall	.+124    	; 0x26bc <__ultoa_invert+0x9c>
    2640:	b4 e0       	ldi	r27, 0x04	; 4
    2642:	3c d0       	rcall	.+120    	; 0x26bc <__ultoa_invert+0x9c>
    2644:	67 0f       	add	r22, r23
    2646:	78 1f       	adc	r23, r24
    2648:	89 1f       	adc	r24, r25
    264a:	9a 1f       	adc	r25, r26
    264c:	a1 1d       	adc	r26, r1
    264e:	68 0f       	add	r22, r24
    2650:	79 1f       	adc	r23, r25
    2652:	8a 1f       	adc	r24, r26
    2654:	91 1d       	adc	r25, r1
    2656:	a1 1d       	adc	r26, r1
    2658:	6a 0f       	add	r22, r26
    265a:	71 1d       	adc	r23, r1
    265c:	81 1d       	adc	r24, r1
    265e:	91 1d       	adc	r25, r1
    2660:	a1 1d       	adc	r26, r1
    2662:	20 d0       	rcall	.+64     	; 0x26a4 <__ultoa_invert+0x84>
    2664:	09 f4       	brne	.+2      	; 0x2668 <__ultoa_invert+0x48>
    2666:	68 94       	set
    2668:	3f 91       	pop	r19
    266a:	2a e0       	ldi	r18, 0x0A	; 10
    266c:	26 9f       	mul	r18, r22
    266e:	11 24       	eor	r1, r1
    2670:	30 19       	sub	r19, r0
    2672:	30 5d       	subi	r19, 0xD0	; 208
    2674:	31 93       	st	Z+, r19
    2676:	de f6       	brtc	.-74     	; 0x262e <__ultoa_invert+0xe>
    2678:	cf 01       	movw	r24, r30
    267a:	08 95       	ret
    267c:	46 2f       	mov	r20, r22
    267e:	47 70       	andi	r20, 0x07	; 7
    2680:	40 5d       	subi	r20, 0xD0	; 208
    2682:	41 93       	st	Z+, r20
    2684:	b3 e0       	ldi	r27, 0x03	; 3
    2686:	0f d0       	rcall	.+30     	; 0x26a6 <__ultoa_invert+0x86>
    2688:	c9 f7       	brne	.-14     	; 0x267c <__ultoa_invert+0x5c>
    268a:	f6 cf       	rjmp	.-20     	; 0x2678 <__ultoa_invert+0x58>
    268c:	46 2f       	mov	r20, r22
    268e:	4f 70       	andi	r20, 0x0F	; 15
    2690:	40 5d       	subi	r20, 0xD0	; 208
    2692:	4a 33       	cpi	r20, 0x3A	; 58
    2694:	18 f0       	brcs	.+6      	; 0x269c <__ultoa_invert+0x7c>
    2696:	49 5d       	subi	r20, 0xD9	; 217
    2698:	31 fd       	sbrc	r19, 1
    269a:	40 52       	subi	r20, 0x20	; 32
    269c:	41 93       	st	Z+, r20
    269e:	02 d0       	rcall	.+4      	; 0x26a4 <__ultoa_invert+0x84>
    26a0:	a9 f7       	brne	.-22     	; 0x268c <__ultoa_invert+0x6c>
    26a2:	ea cf       	rjmp	.-44     	; 0x2678 <__ultoa_invert+0x58>
    26a4:	b4 e0       	ldi	r27, 0x04	; 4
    26a6:	a6 95       	lsr	r26
    26a8:	97 95       	ror	r25
    26aa:	87 95       	ror	r24
    26ac:	77 95       	ror	r23
    26ae:	67 95       	ror	r22
    26b0:	ba 95       	dec	r27
    26b2:	c9 f7       	brne	.-14     	; 0x26a6 <__ultoa_invert+0x86>
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	61 05       	cpc	r22, r1
    26b8:	71 05       	cpc	r23, r1
    26ba:	08 95       	ret
    26bc:	9b 01       	movw	r18, r22
    26be:	ac 01       	movw	r20, r24
    26c0:	0a 2e       	mov	r0, r26
    26c2:	06 94       	lsr	r0
    26c4:	57 95       	ror	r21
    26c6:	47 95       	ror	r20
    26c8:	37 95       	ror	r19
    26ca:	27 95       	ror	r18
    26cc:	ba 95       	dec	r27
    26ce:	c9 f7       	brne	.-14     	; 0x26c2 <__ultoa_invert+0xa2>
    26d0:	62 0f       	add	r22, r18
    26d2:	73 1f       	adc	r23, r19
    26d4:	84 1f       	adc	r24, r20
    26d6:	95 1f       	adc	r25, r21
    26d8:	a0 1d       	adc	r26, r0
    26da:	08 95       	ret

000026dc <_exit>:
    26dc:	f8 94       	cli

000026de <__stop_program>:
    26de:	ff cf       	rjmp	.-2      	; 0x26de <__stop_program>
