
sortingProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800100  00002566  000025fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002566  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000421  00800222  00800222  0000271c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  000027b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000568b  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ad1  00000000  00000000  00008123  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c08  00000000  00000000  00009bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a4  00000000  00000000  0000b7fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011e5  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000247e  00000000  00000000  0000d285  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000f703  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ca c2       	rjmp	.+1428   	; 0x596 <__ctors_end>
       2:	00 00       	nop
       4:	f1 c2       	rjmp	.+1506   	; 0x5e8 <__bad_interrupt>
       6:	00 00       	nop
       8:	ef c2       	rjmp	.+1502   	; 0x5e8 <__bad_interrupt>
       a:	00 00       	nop
       c:	2d c4       	rjmp	.+2138   	; 0x868 <__vector_3>
       e:	00 00       	nop
      10:	d2 c4       	rjmp	.+2468   	; 0x9b6 <__vector_4>
      12:	00 00       	nop
      14:	e9 c2       	rjmp	.+1490   	; 0x5e8 <__bad_interrupt>
      16:	00 00       	nop
      18:	e7 c2       	rjmp	.+1486   	; 0x5e8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e5 c2       	rjmp	.+1482   	; 0x5e8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e3 c2       	rjmp	.+1478   	; 0x5e8 <__bad_interrupt>
      22:	00 00       	nop
      24:	e1 c2       	rjmp	.+1474   	; 0x5e8 <__bad_interrupt>
      26:	00 00       	nop
      28:	df c2       	rjmp	.+1470   	; 0x5e8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	dd c2       	rjmp	.+1466   	; 0x5e8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	db c2       	rjmp	.+1462   	; 0x5e8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d9 c2       	rjmp	.+1458   	; 0x5e8 <__bad_interrupt>
      36:	00 00       	nop
      38:	d7 c2       	rjmp	.+1454   	; 0x5e8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d5 c2       	rjmp	.+1450   	; 0x5e8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d3 c2       	rjmp	.+1446   	; 0x5e8 <__bad_interrupt>
      42:	00 00       	nop
      44:	d1 c2       	rjmp	.+1442   	; 0x5e8 <__bad_interrupt>
      46:	00 00       	nop
      48:	cf c2       	rjmp	.+1438   	; 0x5e8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	cd c2       	rjmp	.+1434   	; 0x5e8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	cb c2       	rjmp	.+1430   	; 0x5e8 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__vector_21>
      58:	c7 c2       	rjmp	.+1422   	; 0x5e8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c5 c2       	rjmp	.+1418   	; 0x5e8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c3 c2       	rjmp	.+1414   	; 0x5e8 <__bad_interrupt>
      62:	00 00       	nop
      64:	c1 c2       	rjmp	.+1410   	; 0x5e8 <__bad_interrupt>
      66:	00 00       	nop
      68:	bf c2       	rjmp	.+1406   	; 0x5e8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	bd c2       	rjmp	.+1402   	; 0x5e8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	bb c2       	rjmp	.+1398   	; 0x5e8 <__bad_interrupt>
      72:	00 00       	nop
      74:	bb c3       	rjmp	.+1910   	; 0x7ec <__vector_29>
      76:	00 00       	nop
      78:	b7 c2       	rjmp	.+1390   	; 0x5e8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b5 c2       	rjmp	.+1386   	; 0x5e8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b3 c2       	rjmp	.+1382   	; 0x5e8 <__bad_interrupt>
      82:	00 00       	nop
      84:	b1 c2       	rjmp	.+1378   	; 0x5e8 <__bad_interrupt>
      86:	00 00       	nop
      88:	af c2       	rjmp	.+1374   	; 0x5e8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ad c2       	rjmp	.+1370   	; 0x5e8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ab c2       	rjmp	.+1366   	; 0x5e8 <__bad_interrupt>
      92:	00 00       	nop
      94:	a9 c2       	rjmp	.+1362   	; 0x5e8 <__bad_interrupt>
	...

00000098 <__trampolines_end>:
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	00 3e       	cpi	r16, 0xE0	; 224
      9e:	5b 4f       	sbci	r21, 0xFB	; 251
      a0:	5b 3e       	cpi	r21, 0xEB	; 235
      a2:	3e 6b       	ori	r19, 0xBE	; 190
      a4:	4f 6b       	ori	r20, 0xBF	; 191
      a6:	3e 1c       	adc	r3, r14
      a8:	3e 7c       	andi	r19, 0xCE	; 206
      aa:	3e 1c       	adc	r3, r14
      ac:	18 3c       	cpi	r17, 0xC8	; 200
      ae:	7e 3c       	cpi	r23, 0xCE	; 206
      b0:	18 1c       	adc	r1, r8
      b2:	57 7d       	andi	r21, 0xD7	; 215
      b4:	57 1c       	adc	r5, r7
      b6:	1c 5e       	subi	r17, 0xEC	; 236
      b8:	7f 5e       	subi	r23, 0xEF	; 239
      ba:	1c 00       	.word	0x001c	; ????
      bc:	18 3c       	cpi	r17, 0xC8	; 200
      be:	18 00       	.word	0x0018	; ????
      c0:	ff e7       	ldi	r31, 0x7F	; 127
      c2:	c3 e7       	ldi	r28, 0x73	; 115
      c4:	ff 00       	.word	0x00ff	; ????
      c6:	18 24       	eor	r1, r8
      c8:	18 00       	.word	0x0018	; ????
      ca:	ff e7       	ldi	r31, 0x7F	; 127
      cc:	db e7       	ldi	r29, 0x7B	; 123
      ce:	ff 30       	cpi	r31, 0x0F	; 15
      d0:	48 3a       	cpi	r20, 0xA8	; 168
      d2:	06 0e       	add	r0, r22
      d4:	26 29       	or	r18, r6
      d6:	79 29       	or	r23, r9
      d8:	26 40       	sbci	r18, 0x06	; 6
      da:	7f 05       	cpc	r23, r15
      dc:	05 07       	cpc	r16, r21
      de:	40 7f       	andi	r20, 0xF0	; 240
      e0:	05 25       	eor	r16, r5
      e2:	3f 5a       	subi	r19, 0xAF	; 175
      e4:	3c e7       	ldi	r19, 0x7C	; 124
      e6:	3c 5a       	subi	r19, 0xAC	; 172
      e8:	7f 3e       	cpi	r23, 0xEF	; 239
      ea:	1c 1c       	adc	r1, r12
      ec:	08 08       	sbc	r0, r8
      ee:	1c 1c       	adc	r1, r12
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	14 22       	and	r1, r20
      f4:	7f 22       	and	r7, r31
      f6:	14 5f       	subi	r17, 0xF4	; 244
      f8:	5f 00       	.word	0x005f	; ????
      fa:	5f 5f       	subi	r21, 0xFF	; 255
      fc:	06 09       	sbc	r16, r6
      fe:	7f 01       	movw	r14, r30
     100:	7f 00       	.word	0x007f	; ????
     102:	66 89       	ldd	r22, Z+22	; 0x16
     104:	95 6a       	ori	r25, 0xA5	; 165
     106:	60 60       	ori	r22, 0x00	; 0
     108:	60 60       	ori	r22, 0x00	; 0
     10a:	60 94       	com	r6
     10c:	a2 ff       	sbrs	r26, 2
     10e:	a2 94       	swap	r10
     110:	08 04       	cpc	r0, r8
     112:	7e 04       	cpc	r7, r14
     114:	08 10       	cpse	r0, r8
     116:	20 7e       	andi	r18, 0xE0	; 224
     118:	20 10       	cpse	r2, r0
     11a:	08 08       	sbc	r0, r8
     11c:	2a 1c       	adc	r2, r10
     11e:	08 08       	sbc	r0, r8
     120:	1c 2a       	or	r1, r28
     122:	08 08       	sbc	r0, r8
     124:	1e 10       	cpse	r1, r14
     126:	10 10       	cpse	r1, r0
     128:	10 0c       	add	r1, r0
     12a:	1e 0c       	add	r1, r14
     12c:	1e 0c       	add	r1, r14
     12e:	30 38       	cpi	r19, 0x80	; 128
     130:	3e 38       	cpi	r19, 0x8E	; 142
     132:	30 06       	cpc	r3, r16
     134:	0e 3e       	cpi	r16, 0xEE	; 238
     136:	0e 06       	cpc	r0, r30
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 5f       	subi	r16, 0xF0	; 240
     140:	00 00       	nop
     142:	00 07       	cpc	r16, r16
     144:	00 07       	cpc	r16, r16
     146:	00 14       	cp	r0, r0
     148:	7f 14       	cp	r7, r15
     14a:	7f 14       	cp	r7, r15
     14c:	24 2a       	or	r2, r20
     14e:	7f 2a       	or	r7, r31
     150:	12 23       	and	r17, r18
     152:	13 08       	sbc	r1, r3
     154:	64 62       	ori	r22, 0x24	; 36
     156:	36 49       	sbci	r19, 0x96	; 150
     158:	56 20       	and	r5, r6
     15a:	50 00       	.word	0x0050	; ????
     15c:	08 07       	cpc	r16, r24
     15e:	03 00       	.word	0x0003	; ????
     160:	00 1c       	adc	r0, r0
     162:	22 41       	sbci	r18, 0x12	; 18
     164:	00 00       	nop
     166:	41 22       	and	r4, r17
     168:	1c 00       	.word	0x001c	; ????
     16a:	2a 1c       	adc	r2, r10
     16c:	7f 1c       	adc	r7, r15
     16e:	2a 08       	sbc	r2, r10
     170:	08 3e       	cpi	r16, 0xE8	; 232
     172:	08 08       	sbc	r0, r8
     174:	00 80       	ld	r0, Z
     176:	70 30       	cpi	r23, 0x00	; 0
     178:	00 08       	sbc	r0, r0
     17a:	08 08       	sbc	r0, r8
     17c:	08 08       	sbc	r0, r8
     17e:	00 00       	nop
     180:	60 60       	ori	r22, 0x00	; 0
     182:	00 20       	and	r0, r0
     184:	10 08       	sbc	r1, r0
     186:	04 02       	muls	r16, r20
     188:	3e 51       	subi	r19, 0x1E	; 30
     18a:	49 45       	sbci	r20, 0x59	; 89
     18c:	3e 00       	.word	0x003e	; ????
     18e:	42 7f       	andi	r20, 0xF2	; 242
     190:	40 00       	.word	0x0040	; ????
     192:	72 49       	sbci	r23, 0x92	; 146
     194:	49 49       	sbci	r20, 0x99	; 153
     196:	46 21       	and	r20, r6
     198:	41 49       	sbci	r20, 0x91	; 145
     19a:	4d 33       	cpi	r20, 0x3D	; 61
     19c:	18 14       	cp	r1, r8
     19e:	12 7f       	andi	r17, 0xF2	; 242
     1a0:	10 27       	eor	r17, r16
     1a2:	45 45       	sbci	r20, 0x55	; 85
     1a4:	45 39       	cpi	r20, 0x95	; 149
     1a6:	3c 4a       	sbci	r19, 0xAC	; 172
     1a8:	49 49       	sbci	r20, 0x99	; 153
     1aa:	31 41       	sbci	r19, 0x11	; 17
     1ac:	21 11       	cpse	r18, r1
     1ae:	09 07       	cpc	r16, r25
     1b0:	36 49       	sbci	r19, 0x96	; 150
     1b2:	49 49       	sbci	r20, 0x99	; 153
     1b4:	36 46       	sbci	r19, 0x66	; 102
     1b6:	49 49       	sbci	r20, 0x99	; 153
     1b8:	29 1e       	adc	r2, r25
     1ba:	00 00       	nop
     1bc:	14 00       	.word	0x0014	; ????
     1be:	00 00       	nop
     1c0:	40 34       	cpi	r20, 0x40	; 64
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	14 22       	and	r1, r20
     1c8:	41 14       	cp	r4, r1
     1ca:	14 14       	cp	r1, r4
     1cc:	14 14       	cp	r1, r4
     1ce:	00 41       	sbci	r16, 0x10	; 16
     1d0:	22 14       	cp	r2, r2
     1d2:	08 02       	muls	r16, r24
     1d4:	01 59       	subi	r16, 0x91	; 145
     1d6:	09 06       	cpc	r0, r25
     1d8:	3e 41       	sbci	r19, 0x1E	; 30
     1da:	5d 59       	subi	r21, 0x9D	; 157
     1dc:	4e 7c       	andi	r20, 0xCE	; 206
     1de:	12 11       	cpse	r17, r2
     1e0:	12 7c       	andi	r17, 0xC2	; 194
     1e2:	7f 49       	sbci	r23, 0x9F	; 159
     1e4:	49 49       	sbci	r20, 0x99	; 153
     1e6:	36 3e       	cpi	r19, 0xE6	; 230
     1e8:	41 41       	sbci	r20, 0x11	; 17
     1ea:	41 22       	and	r4, r17
     1ec:	7f 41       	sbci	r23, 0x1F	; 31
     1ee:	41 41       	sbci	r20, 0x11	; 17
     1f0:	3e 7f       	andi	r19, 0xFE	; 254
     1f2:	49 49       	sbci	r20, 0x99	; 153
     1f4:	49 41       	sbci	r20, 0x19	; 25
     1f6:	7f 09       	sbc	r23, r15
     1f8:	09 09       	sbc	r16, r9
     1fa:	01 3e       	cpi	r16, 0xE1	; 225
     1fc:	41 41       	sbci	r20, 0x11	; 17
     1fe:	51 73       	andi	r21, 0x31	; 49
     200:	7f 08       	sbc	r7, r15
     202:	08 08       	sbc	r0, r8
     204:	7f 00       	.word	0x007f	; ????
     206:	41 7f       	andi	r20, 0xF1	; 241
     208:	41 00       	.word	0x0041	; ????
     20a:	20 40       	sbci	r18, 0x00	; 0
     20c:	41 3f       	cpi	r20, 0xF1	; 241
     20e:	01 7f       	andi	r16, 0xF1	; 241
     210:	08 14       	cp	r0, r8
     212:	22 41       	sbci	r18, 0x12	; 18
     214:	7f 40       	sbci	r23, 0x0F	; 15
     216:	40 40       	sbci	r20, 0x00	; 0
     218:	40 7f       	andi	r20, 0xF0	; 240
     21a:	02 1c       	adc	r0, r2
     21c:	02 7f       	andi	r16, 0xF2	; 242
     21e:	7f 04       	cpc	r7, r15
     220:	08 10       	cpse	r0, r8
     222:	7f 3e       	cpi	r23, 0xEF	; 239
     224:	41 41       	sbci	r20, 0x11	; 17
     226:	41 3e       	cpi	r20, 0xE1	; 225
     228:	7f 09       	sbc	r23, r15
     22a:	09 09       	sbc	r16, r9
     22c:	06 3e       	cpi	r16, 0xE6	; 230
     22e:	41 51       	subi	r20, 0x11	; 17
     230:	21 5e       	subi	r18, 0xE1	; 225
     232:	7f 09       	sbc	r23, r15
     234:	19 29       	or	r17, r9
     236:	46 26       	eor	r4, r22
     238:	49 49       	sbci	r20, 0x99	; 153
     23a:	49 32       	cpi	r20, 0x29	; 41
     23c:	03 01       	movw	r0, r6
     23e:	7f 01       	movw	r14, r30
     240:	03 3f       	cpi	r16, 0xF3	; 243
     242:	40 40       	sbci	r20, 0x00	; 0
     244:	40 3f       	cpi	r20, 0xF0	; 240
     246:	1f 20       	and	r1, r15
     248:	40 20       	and	r4, r0
     24a:	1f 3f       	cpi	r17, 0xFF	; 255
     24c:	40 38       	cpi	r20, 0x80	; 128
     24e:	40 3f       	cpi	r20, 0xF0	; 240
     250:	63 14       	cp	r6, r3
     252:	08 14       	cp	r0, r8
     254:	63 03       	mulsu	r22, r19
     256:	04 78       	andi	r16, 0x84	; 132
     258:	04 03       	mulsu	r16, r20
     25a:	61 59       	subi	r22, 0x91	; 145
     25c:	49 4d       	sbci	r20, 0xD9	; 217
     25e:	43 00       	.word	0x0043	; ????
     260:	7f 41       	sbci	r23, 0x1F	; 31
     262:	41 41       	sbci	r20, 0x11	; 17
     264:	02 04       	cpc	r0, r2
     266:	08 10       	cpse	r0, r8
     268:	20 00       	.word	0x0020	; ????
     26a:	41 41       	sbci	r20, 0x11	; 17
     26c:	41 7f       	andi	r20, 0xF1	; 241
     26e:	04 02       	muls	r16, r20
     270:	01 02       	muls	r16, r17
     272:	04 40       	sbci	r16, 0x04	; 4
     274:	40 40       	sbci	r20, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	00 03       	mulsu	r16, r16
     27a:	07 08       	sbc	r0, r7
     27c:	00 20       	and	r0, r0
     27e:	54 54       	subi	r21, 0x44	; 68
     280:	78 40       	sbci	r23, 0x08	; 8
     282:	7f 28       	or	r7, r15
     284:	44 44       	sbci	r20, 0x44	; 68
     286:	38 38       	cpi	r19, 0x88	; 136
     288:	44 44       	sbci	r20, 0x44	; 68
     28a:	44 28       	or	r4, r4
     28c:	38 44       	sbci	r19, 0x48	; 72
     28e:	44 28       	or	r4, r4
     290:	7f 38       	cpi	r23, 0x8F	; 143
     292:	54 54       	subi	r21, 0x44	; 68
     294:	54 18       	sub	r5, r4
     296:	00 08       	sbc	r0, r0
     298:	7e 09       	sbc	r23, r14
     29a:	02 18       	sub	r0, r2
     29c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     29e:	9c 78       	andi	r25, 0x8C	; 140
     2a0:	7f 08       	sbc	r7, r15
     2a2:	04 04       	cpc	r0, r4
     2a4:	78 00       	.word	0x0078	; ????
     2a6:	44 7d       	andi	r20, 0xD4	; 212
     2a8:	40 00       	.word	0x0040	; ????
     2aa:	20 40       	sbci	r18, 0x00	; 0
     2ac:	40 3d       	cpi	r20, 0xD0	; 208
     2ae:	00 7f       	andi	r16, 0xF0	; 240
     2b0:	10 28       	or	r1, r0
     2b2:	44 00       	.word	0x0044	; ????
     2b4:	00 41       	sbci	r16, 0x10	; 16
     2b6:	7f 40       	sbci	r23, 0x0F	; 15
     2b8:	00 7c       	andi	r16, 0xC0	; 192
     2ba:	04 78       	andi	r16, 0x84	; 132
     2bc:	04 78       	andi	r16, 0x84	; 132
     2be:	7c 08       	sbc	r7, r12
     2c0:	04 04       	cpc	r0, r4
     2c2:	78 38       	cpi	r23, 0x88	; 136
     2c4:	44 44       	sbci	r20, 0x44	; 68
     2c6:	44 38       	cpi	r20, 0x84	; 132
     2c8:	fc 18       	sub	r15, r12
     2ca:	24 24       	eor	r2, r4
     2cc:	18 18       	sub	r1, r8
     2ce:	24 24       	eor	r2, r4
     2d0:	18 fc       	.word	0xfc18	; ????
     2d2:	7c 08       	sbc	r7, r12
     2d4:	04 04       	cpc	r0, r4
     2d6:	08 48       	sbci	r16, 0x88	; 136
     2d8:	54 54       	subi	r21, 0x44	; 68
     2da:	54 24       	eor	r5, r4
     2dc:	04 04       	cpc	r0, r4
     2de:	3f 44       	sbci	r19, 0x4F	; 79
     2e0:	24 3c       	cpi	r18, 0xC4	; 196
     2e2:	40 40       	sbci	r20, 0x00	; 0
     2e4:	20 7c       	andi	r18, 0xC0	; 192
     2e6:	1c 20       	and	r1, r12
     2e8:	40 20       	and	r4, r0
     2ea:	1c 3c       	cpi	r17, 0xCC	; 204
     2ec:	40 30       	cpi	r20, 0x00	; 0
     2ee:	40 3c       	cpi	r20, 0xC0	; 192
     2f0:	44 28       	or	r4, r4
     2f2:	10 28       	or	r1, r0
     2f4:	44 4c       	sbci	r20, 0xC4	; 196
     2f6:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x764d>
     2fa:	44 64       	ori	r20, 0x44	; 68
     2fc:	54 4c       	sbci	r21, 0xC4	; 196
     2fe:	44 00       	.word	0x0044	; ????
     300:	08 36       	cpi	r16, 0x68	; 104
     302:	41 00       	.word	0x0041	; ????
     304:	00 00       	nop
     306:	77 00       	.word	0x0077	; ????
     308:	00 00       	nop
     30a:	41 36       	cpi	r20, 0x61	; 97
     30c:	08 00       	.word	0x0008	; ????
     30e:	02 01       	movw	r0, r4
     310:	02 04       	cpc	r0, r2
     312:	02 3c       	cpi	r16, 0xC2	; 194
     314:	26 23       	and	r18, r22
     316:	26 3c       	cpi	r18, 0xC6	; 198
     318:	1e a1       	ldd	r17, Y+38	; 0x26
     31a:	a1 61       	ori	r26, 0x11	; 17
     31c:	12 3a       	cpi	r17, 0xA2	; 162
     31e:	40 40       	sbci	r20, 0x00	; 0
     320:	20 7a       	andi	r18, 0xA0	; 160
     322:	38 54       	subi	r19, 0x48	; 72
     324:	54 55       	subi	r21, 0x54	; 84
     326:	59 21       	and	r21, r9
     328:	55 55       	subi	r21, 0x55	; 85
     32a:	79 41       	sbci	r23, 0x19	; 25
     32c:	22 54       	subi	r18, 0x42	; 66
     32e:	54 78       	andi	r21, 0x84	; 132
     330:	42 21       	and	r20, r2
     332:	55 54       	subi	r21, 0x45	; 69
     334:	78 40       	sbci	r23, 0x08	; 8
     336:	20 54       	subi	r18, 0x40	; 64
     338:	55 79       	andi	r21, 0x95	; 149
     33a:	40 0c       	add	r4, r0
     33c:	1e 52       	subi	r17, 0x2E	; 46
     33e:	72 12       	cpse	r7, r18
     340:	39 55       	subi	r19, 0x59	; 89
     342:	55 55       	subi	r21, 0x55	; 85
     344:	59 39       	cpi	r21, 0x99	; 153
     346:	54 54       	subi	r21, 0x44	; 68
     348:	54 59       	subi	r21, 0x94	; 148
     34a:	39 55       	subi	r19, 0x59	; 89
     34c:	54 54       	subi	r21, 0x44	; 68
     34e:	58 00       	.word	0x0058	; ????
     350:	00 45       	sbci	r16, 0x50	; 80
     352:	7c 41       	sbci	r23, 0x1C	; 28
     354:	00 02       	muls	r16, r16
     356:	45 7d       	andi	r20, 0xD5	; 213
     358:	42 00       	.word	0x0042	; ????
     35a:	01 45       	sbci	r16, 0x51	; 81
     35c:	7c 40       	sbci	r23, 0x0C	; 12
     35e:	7d 12       	cpse	r7, r29
     360:	11 12       	cpse	r1, r17
     362:	7d f0       	brhs	.+30     	; 0x382 <__trampolines_end+0x2ea>
     364:	28 25       	eor	r18, r8
     366:	28 f0       	brcs	.+10     	; 0x372 <__trampolines_end+0x2da>
     368:	7c 54       	subi	r23, 0x4C	; 76
     36a:	55 45       	sbci	r21, 0x55	; 85
     36c:	00 20       	and	r0, r0
     36e:	54 54       	subi	r21, 0x44	; 68
     370:	7c 54       	subi	r23, 0x4C	; 76
     372:	7c 0a       	sbc	r7, r28
     374:	09 7f       	andi	r16, 0xF9	; 249
     376:	49 32       	cpi	r20, 0x29	; 41
     378:	49 49       	sbci	r20, 0x99	; 153
     37a:	49 32       	cpi	r20, 0x29	; 41
     37c:	3a 44       	sbci	r19, 0x4A	; 74
     37e:	44 44       	sbci	r20, 0x44	; 68
     380:	3a 32       	cpi	r19, 0x2A	; 42
     382:	4a 48       	sbci	r20, 0x8A	; 138
     384:	48 30       	cpi	r20, 0x08	; 8
     386:	3a 41       	sbci	r19, 0x1A	; 26
     388:	41 21       	and	r20, r1
     38a:	7a 3a       	cpi	r23, 0xAA	; 170
     38c:	42 40       	sbci	r20, 0x02	; 2
     38e:	20 78       	andi	r18, 0x80	; 128
     390:	00 9d       	mul	r16, r0
     392:	a0 a0       	ldd	r10, Z+32	; 0x20
     394:	7d 3d       	cpi	r23, 0xDD	; 221
     396:	42 42       	sbci	r20, 0x22	; 34
     398:	42 3d       	cpi	r20, 0xD2	; 210
     39a:	3d 40       	sbci	r19, 0x0D	; 13
     39c:	40 40       	sbci	r20, 0x00	; 0
     39e:	3d 3c       	cpi	r19, 0xCD	; 205
     3a0:	24 ff       	sbrs	r18, 4
     3a2:	24 24       	eor	r2, r4
     3a4:	48 7e       	andi	r20, 0xE8	; 232
     3a6:	49 43       	sbci	r20, 0x39	; 57
     3a8:	66 2b       	or	r22, r22
     3aa:	2f fc       	.word	0xfc2f	; ????
     3ac:	2f 2b       	or	r18, r31
     3ae:	ff 09       	sbc	r31, r15
     3b0:	29 f6       	brne	.-118    	; 0x33c <__trampolines_end+0x2a4>
     3b2:	20 c0       	rjmp	.+64     	; 0x3f4 <__trampolines_end+0x35c>
     3b4:	88 7e       	andi	r24, 0xE8	; 232
     3b6:	09 03       	fmul	r16, r17
     3b8:	20 54       	subi	r18, 0x40	; 64
     3ba:	54 79       	andi	r21, 0x94	; 148
     3bc:	41 00       	.word	0x0041	; ????
     3be:	00 44       	sbci	r16, 0x40	; 64
     3c0:	7d 41       	sbci	r23, 0x1D	; 29
     3c2:	30 48       	sbci	r19, 0x80	; 128
     3c4:	48 4a       	sbci	r20, 0xA8	; 168
     3c6:	32 38       	cpi	r19, 0x82	; 130
     3c8:	40 40       	sbci	r20, 0x00	; 0
     3ca:	22 7a       	andi	r18, 0xA2	; 162
     3cc:	00 7a       	andi	r16, 0xA0	; 160
     3ce:	0a 0a       	sbc	r0, r26
     3d0:	72 7d       	andi	r23, 0xD2	; 210
     3d2:	0d 19       	sub	r16, r13
     3d4:	31 7d       	andi	r19, 0xD1	; 209
     3d6:	26 29       	or	r18, r6
     3d8:	29 2f       	mov	r18, r25
     3da:	28 26       	eor	r2, r24
     3dc:	29 29       	or	r18, r9
     3de:	29 26       	eor	r2, r25
     3e0:	30 48       	sbci	r19, 0x80	; 128
     3e2:	4d 40       	sbci	r20, 0x0D	; 13
     3e4:	20 38       	cpi	r18, 0x80	; 128
     3e6:	08 08       	sbc	r0, r8
     3e8:	08 08       	sbc	r0, r8
     3ea:	08 08       	sbc	r0, r8
     3ec:	08 08       	sbc	r0, r8
     3ee:	38 2f       	mov	r19, r24
     3f0:	10 c8       	rjmp	.-4064   	; 0xfffff412 <__eeprom_end+0xff7ef412>
     3f2:	ac ba       	out	0x1c, r10	; 28
     3f4:	2f 10       	cpse	r2, r15
     3f6:	28 34       	cpi	r18, 0x48	; 72
     3f8:	fa 00       	.word	0x00fa	; ????
     3fa:	00 7b       	andi	r16, 0xB0	; 176
     3fc:	00 00       	nop
     3fe:	08 14       	cp	r0, r8
     400:	2a 14       	cp	r2, r10
     402:	22 22       	and	r2, r18
     404:	14 2a       	or	r1, r20
     406:	14 08       	sbc	r1, r4
     408:	aa 00       	.word	0x00aa	; ????
     40a:	55 00       	.word	0x0055	; ????
     40c:	aa aa       	std	Y+50, r10	; 0x32
     40e:	55 aa       	std	Z+53, r5	; 0x35
     410:	55 aa       	std	Z+53, r5	; 0x35
     412:	00 00       	nop
     414:	00 ff       	sbrs	r16, 0
     416:	00 10       	cpse	r0, r0
     418:	10 10       	cpse	r1, r0
     41a:	ff 00       	.word	0x00ff	; ????
     41c:	14 14       	cp	r1, r4
     41e:	14 ff       	sbrs	r17, 4
     420:	00 10       	cpse	r0, r0
     422:	10 ff       	sbrs	r17, 0
     424:	00 ff       	sbrs	r16, 0
     426:	10 10       	cpse	r1, r0
     428:	f0 10       	cpse	r15, r0
     42a:	f0 14       	cp	r15, r0
     42c:	14 14       	cp	r1, r4
     42e:	fc 00       	.word	0x00fc	; ????
     430:	14 14       	cp	r1, r4
     432:	f7 00       	.word	0x00f7	; ????
     434:	ff 00       	.word	0x00ff	; ????
     436:	00 ff       	sbrs	r16, 0
     438:	00 ff       	sbrs	r16, 0
     43a:	14 14       	cp	r1, r4
     43c:	f4 04       	cpc	r15, r4
     43e:	fc 14       	cp	r15, r12
     440:	14 17       	cp	r17, r20
     442:	10 1f       	adc	r17, r16
     444:	10 10       	cpse	r1, r0
     446:	1f 10       	cpse	r1, r15
     448:	1f 14       	cp	r1, r15
     44a:	14 14       	cp	r1, r4
     44c:	1f 00       	.word	0x001f	; ????
     44e:	10 10       	cpse	r1, r0
     450:	10 f0       	brcs	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     452:	00 00       	nop
     454:	00 00       	nop
     456:	1f 10       	cpse	r1, r15
     458:	10 10       	cpse	r1, r0
     45a:	10 1f       	adc	r17, r16
     45c:	10 10       	cpse	r1, r0
     45e:	10 10       	cpse	r1, r0
     460:	f0 10       	cpse	r15, r0
     462:	00 00       	nop
     464:	00 ff       	sbrs	r16, 0
     466:	10 10       	cpse	r1, r0
     468:	10 10       	cpse	r1, r0
     46a:	10 10       	cpse	r1, r0
     46c:	10 10       	cpse	r1, r0
     46e:	10 ff       	sbrs	r17, 0
     470:	10 00       	.word	0x0010	; ????
     472:	00 00       	nop
     474:	ff 14       	cp	r15, r15
     476:	00 00       	nop
     478:	ff 00       	.word	0x00ff	; ????
     47a:	ff 00       	.word	0x00ff	; ????
     47c:	00 1f       	adc	r16, r16
     47e:	10 17       	cp	r17, r16
     480:	00 00       	nop
     482:	fc 04       	cpc	r15, r12
     484:	f4 14       	cp	r15, r4
     486:	14 17       	cp	r17, r20
     488:	10 17       	cp	r17, r16
     48a:	14 14       	cp	r1, r4
     48c:	f4 04       	cpc	r15, r4
     48e:	f4 00       	.word	0x00f4	; ????
     490:	00 ff       	sbrs	r16, 0
     492:	00 f7       	brcc	.-64     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     494:	14 14       	cp	r1, r4
     496:	14 14       	cp	r1, r4
     498:	14 14       	cp	r1, r4
     49a:	14 f7       	brge	.-60     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     49c:	00 f7       	brcc	.-64     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     49e:	14 14       	cp	r1, r4
     4a0:	14 17       	cp	r17, r20
     4a2:	14 10       	cpse	r1, r4
     4a4:	10 1f       	adc	r17, r16
     4a6:	10 1f       	adc	r17, r16
     4a8:	14 14       	cp	r1, r4
     4aa:	14 f4       	brge	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4ac:	14 10       	cpse	r1, r4
     4ae:	10 f0       	brcs	.+4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b0:	10 f0       	brcs	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b2:	00 00       	nop
     4b4:	1f 10       	cpse	r1, r15
     4b6:	1f 00       	.word	0x001f	; ????
     4b8:	00 00       	nop
     4ba:	1f 14       	cp	r1, r15
     4bc:	00 00       	nop
     4be:	00 fc       	sbrc	r0, 0
     4c0:	14 00       	.word	0x0014	; ????
     4c2:	00 f0       	brcs	.+0      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4c4:	10 f0       	brcs	.+4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4c6:	10 10       	cpse	r1, r0
     4c8:	ff 10       	cpse	r15, r15
     4ca:	ff 14       	cp	r15, r15
     4cc:	14 14       	cp	r1, r4
     4ce:	ff 14       	cp	r15, r15
     4d0:	10 10       	cpse	r1, r0
     4d2:	10 1f       	adc	r17, r16
     4d4:	00 00       	nop
     4d6:	00 00       	nop
     4d8:	f0 10       	cpse	r15, r0
     4da:	ff ff       	.word	0xffff	; ????
     4dc:	ff ff       	.word	0xffff	; ????
     4de:	ff f0       	brie	.+62     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     4e0:	f0 f0       	brcs	.+60     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     4e2:	f0 f0       	brcs	.+60     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     4e4:	ff ff       	.word	0xffff	; ????
     4e6:	ff 00       	.word	0x00ff	; ????
     4e8:	00 00       	nop
     4ea:	00 00       	nop
     4ec:	ff ff       	.word	0xffff	; ????
     4ee:	0f 0f       	add	r16, r31
     4f0:	0f 0f       	add	r16, r31
     4f2:	0f 38       	cpi	r16, 0x8F	; 143
     4f4:	44 44       	sbci	r20, 0x44	; 68
     4f6:	38 44       	sbci	r19, 0x48	; 72
     4f8:	fc 4a       	sbci	r31, 0xAC	; 172
     4fa:	4a 4a       	sbci	r20, 0xAA	; 170
     4fc:	34 7e       	andi	r19, 0xE4	; 228
     4fe:	02 02       	muls	r16, r18
     500:	06 06       	cpc	r0, r22
     502:	02 7e       	andi	r16, 0xE2	; 226
     504:	02 7e       	andi	r16, 0xE2	; 226
     506:	02 63       	ori	r16, 0x32	; 50
     508:	55 49       	sbci	r21, 0x95	; 149
     50a:	41 63       	ori	r20, 0x31	; 49
     50c:	38 44       	sbci	r19, 0x48	; 72
     50e:	44 3c       	cpi	r20, 0xC4	; 196
     510:	04 40       	sbci	r16, 0x04	; 4
     512:	7e 20       	and	r7, r14
     514:	1e 20       	and	r1, r14
     516:	06 02       	muls	r16, r22
     518:	7e 02       	muls	r23, r30
     51a:	02 99       	sbic	0x00, 2	; 0
     51c:	a5 e7       	ldi	r26, 0x75	; 117
     51e:	a5 99       	sbic	0x14, 5	; 20
     520:	1c 2a       	or	r1, r28
     522:	49 2a       	or	r4, r25
     524:	1c 4c       	sbci	r17, 0xCC	; 204
     526:	72 01       	movw	r14, r4
     528:	72 4c       	sbci	r23, 0xC2	; 194
     52a:	30 4a       	sbci	r19, 0xA0	; 160
     52c:	4d 4d       	sbci	r20, 0xDD	; 221
     52e:	30 30       	cpi	r19, 0x00	; 0
     530:	48 78       	andi	r20, 0x88	; 136
     532:	48 30       	cpi	r20, 0x08	; 8
     534:	bc 62       	ori	r27, 0x2C	; 44
     536:	5a 46       	sbci	r21, 0x6A	; 106
     538:	3d 3e       	cpi	r19, 0xED	; 237
     53a:	49 49       	sbci	r20, 0x99	; 153
     53c:	49 00       	.word	0x0049	; ????
     53e:	7e 01       	movw	r14, r28
     540:	01 01       	movw	r0, r2
     542:	7e 2a       	or	r7, r30
     544:	2a 2a       	or	r2, r26
     546:	2a 2a       	or	r2, r26
     548:	44 44       	sbci	r20, 0x44	; 68
     54a:	5f 44       	sbci	r21, 0x4F	; 79
     54c:	44 40       	sbci	r20, 0x04	; 4
     54e:	51 4a       	sbci	r21, 0xA1	; 161
     550:	44 40       	sbci	r20, 0x04	; 4
     552:	40 44       	sbci	r20, 0x40	; 64
     554:	4a 51       	subi	r20, 0x1A	; 26
     556:	40 00       	.word	0x0040	; ????
     558:	00 ff       	sbrs	r16, 0
     55a:	01 03       	mulsu	r16, r17
     55c:	e0 80       	ld	r14, Z
     55e:	ff 00       	.word	0x00ff	; ????
     560:	00 08       	sbc	r0, r0
     562:	08 6b       	ori	r16, 0xB8	; 184
     564:	6b 08       	sbc	r6, r11
     566:	36 12       	cpse	r3, r22
     568:	36 24       	eor	r3, r6
     56a:	36 06       	cpc	r3, r22
     56c:	0f 09       	sbc	r16, r15
     56e:	0f 06       	cpc	r0, r31
     570:	00 00       	nop
     572:	18 18       	sub	r1, r8
     574:	00 00       	nop
     576:	00 10       	cpse	r0, r0
     578:	10 00       	.word	0x0010	; ????
     57a:	30 40       	sbci	r19, 0x00	; 0
     57c:	ff 01       	movw	r30, r30
     57e:	01 00       	.word	0x0001	; ????
     580:	1f 01       	movw	r2, r30
     582:	01 1e       	adc	r0, r17
     584:	00 19       	sub	r16, r0
     586:	1d 17       	cp	r17, r29
     588:	12 00       	.word	0x0012	; ????
     58a:	3c 3c       	cpi	r19, 0xCC	; 204
     58c:	3c 3c       	cpi	r19, 0xCC	; 204
     58e:	00 00       	nop
     590:	00 00       	nop
	...

00000594 <__ctors_start>:
     594:	f2 08       	sbc	r15, r2

00000596 <__ctors_end>:
     596:	11 24       	eor	r1, r1
     598:	1f be       	out	0x3f, r1	; 63
     59a:	cf ef       	ldi	r28, 0xFF	; 255
     59c:	d0 e2       	ldi	r29, 0x20	; 32
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	cd bf       	out	0x3d, r28	; 61

000005a2 <__do_copy_data>:
     5a2:	12 e0       	ldi	r17, 0x02	; 2
     5a4:	a0 e0       	ldi	r26, 0x00	; 0
     5a6:	b1 e0       	ldi	r27, 0x01	; 1
     5a8:	e6 e6       	ldi	r30, 0x66	; 102
     5aa:	f5 e2       	ldi	r31, 0x25	; 37
     5ac:	00 e0       	ldi	r16, 0x00	; 0
     5ae:	0b bf       	out	0x3b, r16	; 59
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__do_copy_data+0x14>
     5b2:	07 90       	elpm	r0, Z+
     5b4:	0d 92       	st	X+, r0
     5b6:	a2 32       	cpi	r26, 0x22	; 34
     5b8:	b1 07       	cpc	r27, r17
     5ba:	d9 f7       	brne	.-10     	; 0x5b2 <__do_copy_data+0x10>

000005bc <__do_clear_bss>:
     5bc:	26 e0       	ldi	r18, 0x06	; 6
     5be:	a2 e2       	ldi	r26, 0x22	; 34
     5c0:	b2 e0       	ldi	r27, 0x02	; 2
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <.do_clear_bss_start>

000005c4 <.do_clear_bss_loop>:
     5c4:	1d 92       	st	X+, r1

000005c6 <.do_clear_bss_start>:
     5c6:	a3 34       	cpi	r26, 0x43	; 67
     5c8:	b2 07       	cpc	r27, r18
     5ca:	e1 f7       	brne	.-8      	; 0x5c4 <.do_clear_bss_loop>

000005cc <__do_global_ctors>:
     5cc:	12 e0       	ldi	r17, 0x02	; 2
     5ce:	cb ec       	ldi	r28, 0xCB	; 203
     5d0:	d2 e0       	ldi	r29, 0x02	; 2
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <__do_global_ctors+0x10>
     5d4:	21 97       	sbiw	r28, 0x01	; 1
     5d6:	fe 01       	movw	r30, r28
     5d8:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__tablejump2__>
     5dc:	ca 3c       	cpi	r28, 0xCA	; 202
     5de:	d1 07       	cpc	r29, r17
     5e0:	c9 f7       	brne	.-14     	; 0x5d4 <__do_global_ctors+0x8>
     5e2:	d9 d4       	rcall	.+2482   	; 0xf96 <main>
     5e4:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <_exit>

000005e8 <__bad_interrupt>:
     5e8:	7e c2       	rjmp	.+1276   	; 0xae6 <__vector_default>

000005ea <_Z7initADCv>:
		myDisplay.drawString(0,0,"Calibrate");
		myDisplay.drawString(0,16,objectType);
		myDisplay.drawNumber(0,32,calibCount);
		myDisplay.show();
	}
}
     5ea:	10 ba       	out	0x10, r1	; 16
     5ec:	ea e7       	ldi	r30, 0x7A	; 122
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	80 68       	ori	r24, 0x80	; 128
     5f4:	80 83       	st	Z, r24
     5f6:	80 81       	ld	r24, Z
     5f8:	87 60       	ori	r24, 0x07	; 7
     5fa:	80 83       	st	Z, r24
     5fc:	ec e7       	ldi	r30, 0x7C	; 124
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	81 64       	ori	r24, 0x41	; 65
     604:	80 83       	st	Z, r24
     606:	08 95       	ret

00000608 <_Z17findLowestReadingPKc>:
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	ec 01       	movw	r28, r24
     60e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <reflQueueCount>
     612:	88 30       	cpi	r24, 0x08	; 8
     614:	c0 f5       	brcc	.+112    	; 0x686 <_Z17findLowestReadingPKc+0x7e>
     616:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     61a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     61e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     622:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     626:	28 17       	cp	r18, r24
     628:	39 07       	cpc	r19, r25
     62a:	40 f4       	brcc	.+16     	; 0x63c <_Z17findLowestReadingPKc+0x34>
     62c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lowestRefl>
     630:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lowestRefl+0x1>
     634:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     638:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     63c:	83 e3       	ldi	r24, 0x33	; 51
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	1d d3       	rcall	.+1594   	; 0xc7c <_ZN11Framebuffer5clearEv>
     642:	2e e4       	ldi	r18, 0x4E	; 78
     644:	31 e0       	ldi	r19, 0x01	; 1
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	83 e3       	ldi	r24, 0x33	; 51
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	bd d3       	rcall	.+1914   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
     654:	9e 01       	movw	r18, r28
     656:	40 e1       	ldi	r20, 0x10	; 16
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	83 e3       	ldi	r24, 0x33	; 51
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	b5 d3       	rcall	.+1898   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
     664:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <reflQueueCount>
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	40 e2       	ldi	r20, 0x20	; 32
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	83 e3       	ldi	r24, 0x33	; 51
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	e1 d3       	rcall	.+1986   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
     678:	83 e3       	ldi	r24, 0x33	; 51
     67a:	92 e0       	ldi	r25, 0x02	; 2
     67c:	10 d3       	rcall	.+1568   	; 0xc9e <_ZN11Framebuffer4showEv>
     67e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <reflQueueCount>
     682:	88 30       	cpi	r24, 0x08	; 8
     684:	40 f2       	brcs	.-112    	; 0x616 <_Z17findLowestReadingPKc+0xe>
     686:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <reflQueueCount>
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <_Z12calibrateADCv>:


void calibrateADC(){
	
	myDisplay.clear();
     690:	83 e3       	ldi	r24, 0x33	; 51
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	f3 d2       	rcall	.+1510   	; 0xc7c <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0,"Calibrate");
     696:	2e e4       	ldi	r18, 0x4E	; 78
     698:	31 e0       	ldi	r19, 0x01	; 1
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	83 e3       	ldi	r24, 0x33	; 51
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	93 d3       	rcall	.+1830   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,16,"Black");
     6a8:	20 e1       	ldi	r18, 0x10	; 16
     6aa:	31 e0       	ldi	r19, 0x01	; 1
     6ac:	40 e1       	ldi	r20, 0x10	; 16
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	83 e3       	ldi	r24, 0x33	; 51
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	8a d3       	rcall	.+1812   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(0,32,0);
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e2       	ldi	r20, 0x20	; 32
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	83 e3       	ldi	r24, 0x33	; 51
     6c8:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
     6ca:	b7 d3       	rcall	.+1902   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
     6cc:	83 e3       	ldi	r24, 0x33	; 51
     6ce:	92 e0       	ldi	r25, 0x02	; 2
	
	sei();
	motorForward();
     6d0:	e6 d2       	rcall	.+1484   	; 0xc9e <_ZN11Framebuffer4showEv>
     6d2:	78 94       	sei
	//Black -> White -> Steel -> Aluminum
	findLowestReading("Black");
     6d4:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_Z12motorForwardv>
     6d8:	80 e1       	ldi	r24, 0x10	; 16
     6da:	91 e0       	ldi	r25, 0x01	; 1
	blackMinRef = calibReading - REFL_VALUE_BUFFER;
     6dc:	95 df       	rcall	.-214    	; 0x608 <_Z17findLowestReadingPKc>
     6de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6e6:	05 97       	sbiw	r24, 0x05	; 5
     6e8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <blackMinRef+0x1>
	findLowestReading("White");
     6ec:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <blackMinRef>
     6f0:	86 e1       	ldi	r24, 0x16	; 22
     6f2:	91 e0       	ldi	r25, 0x01	; 1
	whiteMinRef = calibReading - REFL_VALUE_BUFFER;
     6f4:	89 df       	rcall	.-238    	; 0x608 <_Z17findLowestReadingPKc>
     6f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6fe:	05 97       	sbiw	r24, 0x05	; 5
     700:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <whiteMinRef+0x1>
	findLowestReading("Steel");
     704:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <whiteMinRef>
     708:	8c e1       	ldi	r24, 0x1C	; 28
     70a:	91 e0       	ldi	r25, 0x01	; 1
	steelMinRef = calibReading - REFL_VALUE_BUFFER;
     70c:	7d df       	rcall	.-262    	; 0x608 <_Z17findLowestReadingPKc>
     70e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     712:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     716:	05 97       	sbiw	r24, 0x05	; 5
     718:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <steelMinRef+0x1>
	findLowestReading("Aluminum");
     71c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <steelMinRef>
     720:	82 e2       	ldi	r24, 0x22	; 34
     722:	91 e0       	ldi	r25, 0x01	; 1
	aluminumMinRef = calibReading - REFL_VALUE_BUFFER;
     724:	71 df       	rcall	.-286    	; 0x608 <_Z17findLowestReadingPKc>
     726:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     72a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     72e:	05 97       	sbiw	r24, 0x05	; 5
     730:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <aluminumMinRef+0x1>
		
	motorBrake();
     734:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <aluminumMinRef>
	myDisplay.clear();
     738:	0e 94 00 0c 	call	0x1800	; 0x1800 <_Z10motorBrakev>
     73c:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.drawString(0,0,"B:");
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	9d d2       	rcall	.+1338   	; 0xc7c <_ZN11Framebuffer5clearEv>
     742:	2b e2       	ldi	r18, 0x2B	; 43
     744:	31 e0       	ldi	r19, 0x01	; 1
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.drawNumber(24,0,blackMinRef);
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	3d d3       	rcall	.+1658   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
     754:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <blackMinRef>
     758:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <blackMinRef+0x1>
     75c:	40 e0       	ldi	r20, 0x00	; 0
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	68 e1       	ldi	r22, 0x18	; 24
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.drawString(0,16,"W:");
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	68 d3       	rcall	.+1744   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
     76a:	2e e2       	ldi	r18, 0x2E	; 46
     76c:	31 e0       	ldi	r19, 0x01	; 1
     76e:	40 e1       	ldi	r20, 0x10	; 16
     770:	50 e0       	ldi	r21, 0x00	; 0
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.drawNumber(24,16,whiteMinRef);
     778:	92 e0       	ldi	r25, 0x02	; 2
     77a:	29 d3       	rcall	.+1618   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
     77c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <whiteMinRef>
     780:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <whiteMinRef+0x1>
     784:	40 e1       	ldi	r20, 0x10	; 16
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	68 e1       	ldi	r22, 0x18	; 24
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.drawString(0,32,"S:");
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	54 d3       	rcall	.+1704   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
     792:	21 e3       	ldi	r18, 0x31	; 49
     794:	31 e0       	ldi	r19, 0x01	; 1
     796:	40 e2       	ldi	r20, 0x20	; 32
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.drawNumber(24,32,steelMinRef);
     7a0:	92 e0       	ldi	r25, 0x02	; 2
     7a2:	15 d3       	rcall	.+1578   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
     7a4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <steelMinRef>
     7a8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <steelMinRef+0x1>
     7ac:	40 e2       	ldi	r20, 0x20	; 32
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	68 e1       	ldi	r22, 0x18	; 24
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.drawString(0,48,"A:");
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	40 d3       	rcall	.+1664   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
     7ba:	24 e3       	ldi	r18, 0x34	; 52
     7bc:	31 e0       	ldi	r19, 0x01	; 1
     7be:	40 e3       	ldi	r20, 0x30	; 48
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	70 e0       	ldi	r23, 0x00	; 0
	myDisplay.drawNumber(24,48,aluminumMinRef);
     7c6:	83 e3       	ldi	r24, 0x33	; 51
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	01 d3       	rcall	.+1538   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
     7cc:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <aluminumMinRef>
     7d0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <aluminumMinRef+0x1>
     7d4:	40 e3       	ldi	r20, 0x30	; 48
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	68 e1       	ldi	r22, 0x18	; 24
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.show();
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	2c d3       	rcall	.+1624   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
     7e2:	83 e3       	ldi	r24, 0x33	; 51
     7e4:	92 e0       	ldi	r25, 0x02	; 2
	
	cli();
     7e6:	5b d2       	rcall	.+1206   	; 0xc9e <_ZN11Framebuffer4showEv>
     7e8:	f8 94       	cli
     7ea:	08 95       	ret

000007ec <__vector_29>:
	the lowest reflection reading is and save it in
	lowestRefl. Then it will start another ADC reading.
	Speed = ~0xa -> 309 readings per block.
	Speed = 0xff -> ~195 readings per block
*/
ISR(ADC_vect) {
     7ec:	1f 92       	push	r1
     7ee:	0f 92       	push	r0
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	0f 92       	push	r0
     7f4:	11 24       	eor	r1, r1
     7f6:	0b b6       	in	r0, 0x3b	; 59
     7f8:	0f 92       	push	r0
     7fa:	2f 93       	push	r18
     7fc:	3f 93       	push	r19
     7fe:	8f 93       	push	r24
     800:	9f 93       	push	r25
     802:	ef 93       	push	r30
     804:	ff 93       	push	r31
// 	}
	
	//Simples method that will work great for sorting (as long as it is calibrated well)
	//Downside is that objects that have a reflectivity between the different kind of blocks 
	//won't be able to be detected.
	if(ADC < lowestRefl){
     806:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     80a:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     80e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lowestRefl>
     812:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lowestRefl+0x1>
     816:	28 17       	cp	r18, r24
     818:	39 07       	cpc	r19, r25
     81a:	40 f4       	brcc	.+16     	; 0x82c <__vector_29+0x40>
		lowestRefl = ADC;
     81c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     820:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     824:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <lowestRefl+0x1>
     828:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lowestRefl>
	//so if it stops with the sensor near the edge of the blok the reading will be
	//pulled higher than the actual value.
	//adcAverage = adcAverage + (ADC - adcAverage)/adcTotalCount;
			
	//Start another ADC conversion
	ADCSRA |= _BV(ADSC);
     82c:	ea e7       	ldi	r30, 0x7A	; 122
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	80 64       	ori	r24, 0x40	; 64
     834:	80 83       	st	Z, r24
     836:	ff 91       	pop	r31
     838:	ef 91       	pop	r30
     83a:	9f 91       	pop	r25
     83c:	8f 91       	pop	r24
     83e:	3f 91       	pop	r19
     840:	2f 91       	pop	r18
     842:	0f 90       	pop	r0
     844:	0b be       	out	0x3b, r0	; 59
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	0f 90       	pop	r0
     84c:	1f 90       	pop	r1
     84e:	18 95       	reti

00000850 <_Z10initExtIntv>:
volatile char blockReady = 0;
volatile char stepperRdy = 1; //*** turn this into extern when adding stepper

void initExtInt(void){
	//External interrupts on pin 2,3
	DDRD &= 0b11110011; 
     850:	8a b1       	in	r24, 0x0a	; 10
     852:	83 7f       	andi	r24, 0xF3	; 243
     854:	8a b9       	out	0x0a, r24	; 10
	
	//Turn off interrupt while configuring
	EIMSK = 0;
     856:	1d ba       	out	0x1d, r1	; 29
	
	//Any edge interrupt on PD2 (EXT INT2)
	//Falling edge interrupt on PD3 (EXT INT3)
	EICRA |= 0b10010000;
     858:	e9 e6       	ldi	r30, 0x69	; 105
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	80 81       	ld	r24, Z
     85e:	80 69       	ori	r24, 0x90	; 144
     860:	80 83       	st	Z, r24
	
	//Turn on External Interrupt 2 and 3
	EIMSK = 0b1100;
     862:	8c e0       	ldi	r24, 0x0C	; 12
     864:	8d bb       	out	0x1d, r24	; 29
     866:	08 95       	ret

00000868 <__vector_3>:
	reading was. Add item to front of FIFO queue.
	
	TODO: Add a low range for each classification to make it
	more rubust.
*/
ISR(INT2_vect){
     868:	1f 92       	push	r1
     86a:	0f 92       	push	r0
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	0f 92       	push	r0
     870:	11 24       	eor	r1, r1
     872:	0b b6       	in	r0, 0x3b	; 59
     874:	0f 92       	push	r0
     876:	2f 93       	push	r18
     878:	3f 93       	push	r19
     87a:	4f 93       	push	r20
     87c:	5f 93       	push	r21
     87e:	6f 93       	push	r22
     880:	7f 93       	push	r23
     882:	8f 93       	push	r24
     884:	9f 93       	push	r25
     886:	af 93       	push	r26
     888:	bf 93       	push	r27
     88a:	ef 93       	push	r30
     88c:	ff 93       	push	r31
	//////////"Debounce" *** seems to work fine with 1 ms delay
	mTimer(5);
     88e:	85 e0       	ldi	r24, 0x05	; 5
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <_Z6mTimeri>
	//////////
	
	//if(REF_SENSOR_PORT & REF_SENSOR_PIN){
	if(PIND & 0x4){
     896:	4a 9b       	sbis	0x09, 2	; 9
     898:	0f c0       	rjmp	.+30     	; 0x8b8 <__vector_3+0x50>
		//////////START ADC
		lowestRefl = 1023;
     89a:	8f ef       	ldi	r24, 0xFF	; 255
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <lowestRefl+0x1>
     8a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lowestRefl>
		//adcTotalCount = 0;
		//adcAverage = 0;
		//runningSum
		//Enable ADC interrupt
		ADCSRA |= _BV(ADIE);
     8a6:	ea e7       	ldi	r30, 0x7A	; 122
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	88 60       	ori	r24, 0x08	; 8
     8ae:	80 83       	st	Z, r24
		//Start ADC conversion
		ADCSRA |= _BV(ADSC);
     8b0:	80 81       	ld	r24, Z
     8b2:	80 64       	ori	r24, 0x40	; 64
     8b4:	80 83       	st	Z, r24
     8b6:	6a c0       	rjmp	.+212    	; 0x98c <__vector_3+0x124>
		
	}
	else if((PIND & 0x4) == 0){
     8b8:	4a 99       	sbic	0x09, 2	; 9
     8ba:	68 c0       	rjmp	.+208    	; 0x98c <__vector_3+0x124>
		char unsigned itemValue = 0;
		//////////STOP ADC
		//Disable ADC interrupt
		ADCSRA &= ~_BV(ADIE);
     8bc:	ea e7       	ldi	r30, 0x7A	; 122
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	80 81       	ld	r24, Z
     8c2:	87 7f       	andi	r24, 0xF7	; 247
     8c4:	80 83       	st	Z, r24
		//Cancel any pending ADC conversions
		ADCSRA &= ~_BV(ADSC);
     8c6:	80 81       	ld	r24, Z
     8c8:	8f 7b       	andi	r24, 0xBF	; 191
     8ca:	80 83       	st	Z, r24

		//////////CLASSIFY BLOCK
		if(lowestRefl > blackMinRef){
     8cc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     8d0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     8d4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <blackMinRef>
     8d8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <blackMinRef+0x1>
     8dc:	82 17       	cp	r24, r18
     8de:	93 07       	cpc	r25, r19
     8e0:	18 f1       	brcs	.+70     	; 0x928 <__vector_3+0xc0>
			itemValue = BLACK;
		}
		else if(lowestRefl > whiteMinRef){
     8e2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     8e6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     8ea:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <whiteMinRef>
     8ee:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <whiteMinRef+0x1>
     8f2:	82 17       	cp	r24, r18
     8f4:	93 07       	cpc	r25, r19
     8f6:	d0 f0       	brcs	.+52     	; 0x92c <__vector_3+0xc4>
			itemValue = WHITE;
		}
		else if (lowestRefl > steelMinRef){
     8f8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     8fc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     900:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <steelMinRef>
     904:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <steelMinRef+0x1>
     908:	82 17       	cp	r24, r18
     90a:	93 07       	cpc	r25, r19
     90c:	88 f0       	brcs	.+34     	; 0x930 <__vector_3+0xc8>
			itemValue = STEEL;
		}
		else if(lowestRefl > aluminumMinRef){
     90e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
     912:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
     916:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <aluminumMinRef>
     91a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <aluminumMinRef+0x1>
     91e:	82 17       	cp	r24, r18
     920:	93 07       	cpc	r25, r19
     922:	40 f0       	brcs	.+16     	; 0x934 <__vector_3+0xcc>
			itemValue = ALUMINUM;
		}
		else{
			itemValue = UNKNOWN;
     924:	94 e0       	ldi	r25, 0x04	; 4
     926:	07 c0       	rjmp	.+14     	; 0x936 <__vector_3+0xce>
		//Cancel any pending ADC conversions
		ADCSRA &= ~_BV(ADSC);

		//////////CLASSIFY BLOCK
		if(lowestRefl > blackMinRef){
			itemValue = BLACK;
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	05 c0       	rjmp	.+10     	; 0x936 <__vector_3+0xce>
		}
		else if(lowestRefl > whiteMinRef){
			itemValue = WHITE;
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	03 c0       	rjmp	.+6      	; 0x936 <__vector_3+0xce>
		}
		else if (lowestRefl > steelMinRef){
			itemValue = STEEL;
     930:	92 e0       	ldi	r25, 0x02	; 2
     932:	01 c0       	rjmp	.+2      	; 0x936 <__vector_3+0xce>
		}
		else if(lowestRefl > aluminumMinRef){
			itemValue = ALUMINUM;
     934:	93 e0       	ldi	r25, 0x03	; 3
			itemValue = UNKNOWN;
		}

		//////////ADD BLOCK TO QUEUE
		//Check to make sure we aren't passed max
		if(reflQueueCount > 7){ 
     936:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <reflQueueCount>
     93a:	88 30       	cpi	r24, 0x08	; 8
     93c:	18 f0       	brcs	.+6      	; 0x944 <__vector_3+0xdc>
			PORTC = 0xff;
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	88 b9       	out	0x08, r24	; 8
     942:	24 c0       	rjmp	.+72     	; 0x98c <__vector_3+0x124>
		}
		else if(reflQueueCount == 0){
     944:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <reflQueueCount>
     948:	81 11       	cpse	r24, r1
     94a:	0f c0       	rjmp	.+30     	; 0x96a <__vector_3+0x102>
			reflQueueCount++;
     94c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <reflQueueCount>
     950:	8f 5f       	subi	r24, 0xFF	; 255
     952:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <reflQueueCount>
			reflQueue[backOfQueue] = itemValue;
     956:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <backOfQueue>
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	e5 5d       	subi	r30, 0xD5	; 213
     95e:	fd 4f       	sbci	r31, 0xFD	; 253
     960:	90 83       	st	Z, r25
			reflQueueChange = 1;
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <reflQueueChange>
     968:	11 c0       	rjmp	.+34     	; 0x98c <__vector_3+0x124>
		}
		else{
			reflQueueCount++;
     96a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <reflQueueCount>
     96e:	8f 5f       	subi	r24, 0xFF	; 255
     970:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <reflQueueCount>
			backOfQueue = (backOfQueue + 1) & 7;
     974:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <backOfQueue>
     978:	8f 5f       	subi	r24, 0xFF	; 255
     97a:	87 70       	andi	r24, 0x07	; 7
     97c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <backOfQueue>
			reflQueue[backOfQueue] = itemValue;
     980:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <backOfQueue>
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	e5 5d       	subi	r30, 0xD5	; 213
     988:	fd 4f       	sbci	r31, 0xFD	; 253
     98a:	90 83       	st	Z, r25
 		}	
		//Error checking for < 0? ***
		
	}
	//Clear interrupt flag
	EIFR = 0x4; 
     98c:	84 e0       	ldi	r24, 0x04	; 4
     98e:	8c bb       	out	0x1c, r24	; 28
	
}
     990:	ff 91       	pop	r31
     992:	ef 91       	pop	r30
     994:	bf 91       	pop	r27
     996:	af 91       	pop	r26
     998:	9f 91       	pop	r25
     99a:	8f 91       	pop	r24
     99c:	7f 91       	pop	r23
     99e:	6f 91       	pop	r22
     9a0:	5f 91       	pop	r21
     9a2:	4f 91       	pop	r20
     9a4:	3f 91       	pop	r19
     9a6:	2f 91       	pop	r18
     9a8:	0f 90       	pop	r0
     9aa:	0b be       	out	0x3b, r0	; 59
     9ac:	0f 90       	pop	r0
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	0f 90       	pop	r0
     9b2:	1f 90       	pop	r1
     9b4:	18 95       	reti

000009b6 <__vector_4>:


ISR(INT3_vect){
     9b6:	1f 92       	push	r1
     9b8:	0f 92       	push	r0
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	0f 92       	push	r0
     9be:	11 24       	eor	r1, r1
     9c0:	0b b6       	in	r0, 0x3b	; 59
     9c2:	0f 92       	push	r0
     9c4:	2f 93       	push	r18
     9c6:	3f 93       	push	r19
     9c8:	4f 93       	push	r20
     9ca:	5f 93       	push	r21
     9cc:	6f 93       	push	r22
     9ce:	7f 93       	push	r23
     9d0:	8f 93       	push	r24
     9d2:	9f 93       	push	r25
     9d4:	af 93       	push	r26
     9d6:	bf 93       	push	r27
     9d8:	ef 93       	push	r30
     9da:	ff 93       	push	r31
	char nextItem = 0;
	//////////"Debounce" *** seems to work fine with 1 ms delay
	mTimer(5);
     9dc:	85 e0       	ldi	r24, 0x05	; 5
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <_Z6mTimeri>

	if((PIND & 0x8) == 0){
     9e4:	4b 99       	sbic	0x09, 3	; 9
     9e6:	6a c0       	rjmp	.+212    	; 0xabc <__vector_4+0x106>
		if(stepperReady){
     9e8:	80 91 3d 06 	lds	r24, 0x063D	; 0x80063d <stepperReady>
     9ec:	88 23       	and	r24, r24
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <__vector_4+0x3c>
     9f0:	5f c0       	rjmp	.+190    	; 0xab0 <__vector_4+0xfa>
			//////////PUT BLOCK IN BIN (leave motor on) 
			
			//////////COUNT NUMBER OF EACH SORTED
			if(reflQueue[frontOfQueue] == BLACK){
     9f2:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <frontOfQueue>
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	e5 5d       	subi	r30, 0xD5	; 213
     9fa:	fd 4f       	sbci	r31, 0xFD	; 253
     9fc:	80 81       	ld	r24, Z
     9fe:	81 11       	cpse	r24, r1
     a00:	06 c0       	rjmp	.+12     	; 0xa0e <__vector_4+0x58>
				blackCount++;
     a02:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <blackCount>
     a06:	8f 5f       	subi	r24, 0xFF	; 255
     a08:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <blackCount>
     a0c:	29 c0       	rjmp	.+82     	; 0xa60 <__vector_4+0xaa>
			}
			else if(reflQueue[frontOfQueue] == WHITE){
     a0e:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <frontOfQueue>
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	e5 5d       	subi	r30, 0xD5	; 213
     a16:	fd 4f       	sbci	r31, 0xFD	; 253
     a18:	80 81       	ld	r24, Z
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	31 f4       	brne	.+12     	; 0xa2a <__vector_4+0x74>
				whiteCount++;
     a1e:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <whiteCount>
     a22:	8f 5f       	subi	r24, 0xFF	; 255
     a24:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <whiteCount>
     a28:	1b c0       	rjmp	.+54     	; 0xa60 <__vector_4+0xaa>
			}
			else if(reflQueue[frontOfQueue] == STEEL){
     a2a:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <frontOfQueue>
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	e5 5d       	subi	r30, 0xD5	; 213
     a32:	fd 4f       	sbci	r31, 0xFD	; 253
     a34:	80 81       	ld	r24, Z
     a36:	82 30       	cpi	r24, 0x02	; 2
     a38:	31 f4       	brne	.+12     	; 0xa46 <__vector_4+0x90>
				steelCount++;
     a3a:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <steelCount>
     a3e:	8f 5f       	subi	r24, 0xFF	; 255
     a40:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <steelCount>
     a44:	0d c0       	rjmp	.+26     	; 0xa60 <__vector_4+0xaa>
			}
			else if(reflQueue[frontOfQueue] == ALUMINUM){
     a46:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <frontOfQueue>
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	e5 5d       	subi	r30, 0xD5	; 213
     a4e:	fd 4f       	sbci	r31, 0xFD	; 253
     a50:	80 81       	ld	r24, Z
     a52:	83 30       	cpi	r24, 0x03	; 3
     a54:	29 f4       	brne	.+10     	; 0xa60 <__vector_4+0xaa>
				aluminumCount++;
     a56:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <aluminumCount>
     a5a:	8f 5f       	subi	r24, 0xFF	; 255
     a5c:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <aluminumCount>
			}

			//////////DEQUEUE BLOCK
			if(reflQueueCount < 2){
     a60:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <reflQueueCount>
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	18 f4       	brcc	.+6      	; 0xa6e <__vector_4+0xb8>
				reflQueueCount = 0;
     a68:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <reflQueueCount>
     a6c:	27 c0       	rjmp	.+78     	; 0xabc <__vector_4+0x106>
			}
			else{
				nextItem = (frontOfQueue+1) & 7; //& 7 implements a rotating array position
     a6e:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <frontOfQueue>
     a72:	8f 5f       	subi	r24, 0xFF	; 255
     a74:	87 70       	andi	r24, 0x07	; 7
				if(reflQueue[frontOfQueue] != reflQueue[nextItem]){
     a76:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <frontOfQueue>
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	e5 5d       	subi	r30, 0xD5	; 213
     a7e:	fd 4f       	sbci	r31, 0xFD	; 253
     a80:	20 81       	ld	r18, Z
     a82:	e8 2f       	mov	r30, r24
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	e5 5d       	subi	r30, 0xD5	; 213
     a88:	fd 4f       	sbci	r31, 0xFD	; 253
     a8a:	90 81       	ld	r25, Z
     a8c:	29 17       	cp	r18, r25
     a8e:	29 f0       	breq	.+10     	; 0xa9a <__vector_4+0xe4>
					delayStepper = 1;
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	90 93 3c 06 	sts	0x063C, r25	; 0x80063c <delayStepper>
					stepperReady = 0;
     a96:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <stepperReady>
				}
				frontOfQueue = nextItem; 
     a9a:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <frontOfQueue>
				reflQueueCount--;
     a9e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <reflQueueCount>
     aa2:	81 50       	subi	r24, 0x01	; 1
     aa4:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <reflQueueCount>
				reflQueueChange = 1;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <reflQueueChange>
     aae:	06 c0       	rjmp	.+12     	; 0xabc <__vector_4+0x106>
			}
		}
		else{
			//Motor brake
			MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_BRAKE;
     ab0:	82 b1       	in	r24, 0x02	; 2
     ab2:	8f 73       	andi	r24, 0x3F	; 63
     ab4:	82 b9       	out	0x02, r24	; 2
			blockReady = 1;
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
		}
	}
	//Clear interrupt flag (else ISR runs twice)
	EIFR = 0x8; 
     abc:	88 e0       	ldi	r24, 0x08	; 8
     abe:	8c bb       	out	0x1c, r24	; 28
}
     ac0:	ff 91       	pop	r31
     ac2:	ef 91       	pop	r30
     ac4:	bf 91       	pop	r27
     ac6:	af 91       	pop	r26
     ac8:	9f 91       	pop	r25
     aca:	8f 91       	pop	r24
     acc:	7f 91       	pop	r23
     ace:	6f 91       	pop	r22
     ad0:	5f 91       	pop	r21
     ad2:	4f 91       	pop	r20
     ad4:	3f 91       	pop	r19
     ad6:	2f 91       	pop	r18
     ad8:	0f 90       	pop	r0
     ada:	0b be       	out	0x3b, r0	; 59
     adc:	0f 90       	pop	r0
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	0f 90       	pop	r0
     ae2:	1f 90       	pop	r1
     ae4:	18 95       	reti

00000ae6 <__vector_default>:

ISR(BADISR_vect){
     ae6:	1f 92       	push	r1
     ae8:	0f 92       	push	r0
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	0f 92       	push	r0
     aee:	11 24       	eor	r1, r1
     af0:	8f 93       	push	r24
	PORTC = 0xaa;
     af2:	8a ea       	ldi	r24, 0xAA	; 170
     af4:	88 b9       	out	0x08, r24	; 8
     af6:	8f 91       	pop	r24
     af8:	0f 90       	pop	r0
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	0f 90       	pop	r0
     afe:	1f 90       	pop	r1
     b00:	18 95       	reti

00000b02 <_ZN11Framebuffer9drawPixelEhh>:
        this->buffer[buffer_location] = 0x00;
    }
}

void Framebuffer::invert(uint8_t status) {
    this->oled.invert(status);
     b02:	66 23       	and	r22, r22
     b04:	d4 f0       	brlt	.+52     	; 0xb3a <_ZN11Framebuffer9drawPixelEhh+0x38>
     b06:	40 34       	cpi	r20, 0x40	; 64
     b08:	c0 f4       	brcc	.+48     	; 0xb3a <_ZN11Framebuffer9drawPixelEhh+0x38>
     b0a:	24 2f       	mov	r18, r20
     b0c:	26 95       	lsr	r18
     b0e:	26 95       	lsr	r18
     b10:	26 95       	lsr	r18
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	30 e8       	ldi	r19, 0x80	; 128
     b16:	23 9f       	mul	r18, r19
     b18:	60 0d       	add	r22, r0
     b1a:	71 1d       	adc	r23, r1
     b1c:	11 24       	eor	r1, r1
     b1e:	fc 01       	movw	r30, r24
     b20:	e6 0f       	add	r30, r22
     b22:	f7 1f       	adc	r31, r23
     b24:	47 70       	andi	r20, 0x07	; 7
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <_ZN11Framebuffer9drawPixelEhh+0x2e>
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	4a 95       	dec	r20
     b32:	e2 f7       	brpl	.-8      	; 0xb2c <_ZN11Framebuffer9drawPixelEhh+0x2a>
     b34:	90 81       	ld	r25, Z
     b36:	89 2b       	or	r24, r25
     b38:	80 83       	st	Z, r24
     b3a:	08 95       	ret

00000b3c <_ZN11Framebuffer9drawVLineEhhh>:
     b3c:	ff 92       	push	r15
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	22 23       	and	r18, r18
     b48:	61 f0       	breq	.+24     	; 0xb62 <_ZN11Framebuffer9drawVLineEhhh+0x26>
     b4a:	c4 2f       	mov	r28, r20
     b4c:	f6 2e       	mov	r15, r22
     b4e:	8c 01       	movw	r16, r24
     b50:	d2 2f       	mov	r29, r18
     b52:	d4 0f       	add	r29, r20
     b54:	4c 2f       	mov	r20, r28
     b56:	6f 2d       	mov	r22, r15
     b58:	c8 01       	movw	r24, r16
     b5a:	d3 df       	rcall	.-90     	; 0xb02 <_ZN11Framebuffer9drawPixelEhh>
     b5c:	cf 5f       	subi	r28, 0xFF	; 255
     b5e:	cd 13       	cpse	r28, r29
     b60:	f9 cf       	rjmp	.-14     	; 0xb54 <_ZN11Framebuffer9drawVLineEhhh+0x18>
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	08 95       	ret

00000b6e <_ZN11Framebuffer9drawHLineEhhh>:
     b6e:	ff 92       	push	r15
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	22 23       	and	r18, r18
     b7a:	61 f0       	breq	.+24     	; 0xb94 <_ZN11Framebuffer9drawHLineEhhh+0x26>
     b7c:	f4 2e       	mov	r15, r20
     b7e:	c6 2f       	mov	r28, r22
     b80:	8c 01       	movw	r16, r24
     b82:	d2 2f       	mov	r29, r18
     b84:	d6 0f       	add	r29, r22
     b86:	4f 2d       	mov	r20, r15
     b88:	6c 2f       	mov	r22, r28
     b8a:	c8 01       	movw	r24, r16
     b8c:	ba df       	rcall	.-140    	; 0xb02 <_ZN11Framebuffer9drawPixelEhh>
     b8e:	cf 5f       	subi	r28, 0xFF	; 255
     b90:	cd 13       	cpse	r28, r29
     b92:	f9 cf       	rjmp	.-14     	; 0xb86 <_ZN11Framebuffer9drawHLineEhhh+0x18>
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	08 95       	ret

00000ba0 <_ZN11Framebuffer13drawRectangleEhhhh>:
     ba0:	cf 92       	push	r12
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	ec 01       	movw	r28, r24
     bb2:	f6 2e       	mov	r15, r22
     bb4:	14 2f       	mov	r17, r20
     bb6:	d2 2e       	mov	r13, r18
     bb8:	e2 2e       	mov	r14, r18
     bba:	e6 1a       	sub	r14, r22
     bbc:	e3 94       	inc	r14
     bbe:	c0 2e       	mov	r12, r16
     bc0:	c4 1a       	sub	r12, r20
     bc2:	2e 2d       	mov	r18, r14
     bc4:	d4 df       	rcall	.-88     	; 0xb6e <_ZN11Framebuffer9drawHLineEhhh>
     bc6:	2e 2d       	mov	r18, r14
     bc8:	40 2f       	mov	r20, r16
     bca:	6f 2d       	mov	r22, r15
     bcc:	ce 01       	movw	r24, r28
     bce:	cf df       	rcall	.-98     	; 0xb6e <_ZN11Framebuffer9drawHLineEhhh>
     bd0:	2c 2d       	mov	r18, r12
     bd2:	41 2f       	mov	r20, r17
     bd4:	6f 2d       	mov	r22, r15
     bd6:	ce 01       	movw	r24, r28
     bd8:	b1 df       	rcall	.-158    	; 0xb3c <_ZN11Framebuffer9drawVLineEhhh>
     bda:	2c 2d       	mov	r18, r12
     bdc:	41 2f       	mov	r20, r17
     bde:	6d 2d       	mov	r22, r13
     be0:	ce 01       	movw	r24, r28
     be2:	ac df       	rcall	.-168    	; 0xb3c <_ZN11Framebuffer9drawVLineEhhh>
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	08 95       	ret

00000bf6 <_ZN11Framebuffer13drawRectangleEhhhhh>:
     bf6:	6f 92       	push	r6
     bf8:	7f 92       	push	r7
     bfa:	8f 92       	push	r8
     bfc:	9f 92       	push	r9
     bfe:	af 92       	push	r10
     c00:	bf 92       	push	r11
     c02:	cf 92       	push	r12
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	6c 01       	movw	r12, r24
     c14:	64 2e       	mov	r6, r20
     c16:	e1 10       	cpse	r14, r1
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <_ZN11Framebuffer13drawRectangleEhhhhh+0x28>
     c1a:	c2 df       	rcall	.-124    	; 0xba0 <_ZN11Framebuffer13drawRectangleEhhhh>
     c1c:	20 c0       	rjmp	.+64     	; 0xc5e <_ZN11Framebuffer13drawRectangleEhhhhh+0x68>
     c1e:	04 1b       	sub	r16, r20
     c20:	2f 5f       	subi	r18, 0xFF	; 255
     c22:	26 1b       	sub	r18, r22
     c24:	82 2e       	mov	r8, r18
     c26:	91 2c       	mov	r9, r1
     c28:	18 14       	cp	r1, r8
     c2a:	19 04       	cpc	r1, r9
     c2c:	c4 f4       	brge	.+48     	; 0xc5e <_ZN11Framebuffer13drawRectangleEhhhhh+0x68>
     c2e:	76 2e       	mov	r7, r22
     c30:	a1 2c       	mov	r10, r1
     c32:	b1 2c       	mov	r11, r1
     c34:	e0 2e       	mov	r14, r16
     c36:	f1 2c       	mov	r15, r1
     c38:	16 2d       	mov	r17, r6
     c3a:	c0 e0       	ldi	r28, 0x00	; 0
     c3c:	d0 e0       	ldi	r29, 0x00	; 0
     c3e:	41 2f       	mov	r20, r17
     c40:	67 2d       	mov	r22, r7
     c42:	c6 01       	movw	r24, r12
     c44:	5e df       	rcall	.-324    	; 0xb02 <_ZN11Framebuffer9drawPixelEhh>
     c46:	21 96       	adiw	r28, 0x01	; 1
     c48:	1f 5f       	subi	r17, 0xFF	; 255
     c4a:	ec 16       	cp	r14, r28
     c4c:	fd 06       	cpc	r15, r29
     c4e:	bc f7       	brge	.-18     	; 0xc3e <_ZN11Framebuffer13drawRectangleEhhhhh+0x48>
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	a8 1a       	sub	r10, r24
     c54:	b8 0a       	sbc	r11, r24
     c56:	73 94       	inc	r7
     c58:	a8 14       	cp	r10, r8
     c5a:	b9 04       	cpc	r11, r9
     c5c:	69 f7       	brne	.-38     	; 0xc38 <_ZN11Framebuffer13drawRectangleEhhhhh+0x42>
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	bf 90       	pop	r11
     c70:	af 90       	pop	r10
     c72:	9f 90       	pop	r9
     c74:	8f 90       	pop	r8
     c76:	7f 90       	pop	r7
     c78:	6f 90       	pop	r6
     c7a:	08 95       	ret

00000c7c <_ZN11Framebuffer5clearEv>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	9c 5f       	subi	r25, 0xFC	; 252
     c80:	11 92       	st	Z+, r1
     c82:	e8 17       	cp	r30, r24
     c84:	f9 07       	cpc	r31, r25
     c86:	e1 f7       	brne	.-8      	; 0xc80 <_ZN11Framebuffer5clearEv+0x4>
     c88:	08 95       	ret

00000c8a <_ZN11FramebufferC1Ev>:
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	ec 01       	movw	r28, r24
     c90:	9c 5f       	subi	r25, 0xFC	; 252
     c92:	cc d5       	rcall	.+2968   	; 0x182c <_ZN7SSD1306C1Ev>
     c94:	ce 01       	movw	r24, r28
     c96:	f2 df       	rcall	.-28     	; 0xc7c <_ZN11Framebuffer5clearEv>
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	08 95       	ret

00000c9e <_ZN11Framebuffer4showEv>:
}

void Framebuffer::show() {
    this->oled.sendFramebuffer(this->buffer);
     c9e:	bc 01       	movw	r22, r24
     ca0:	9c 5f       	subi	r25, 0xFC	; 252
     ca2:	19 c6       	rjmp	.+3122   	; 0x18d6 <_ZN7SSD130615sendFramebufferEPh>
     ca4:	08 95       	ret

00000ca6 <_ZN11Framebuffer8drawCharEiihjjh>:

// Draw a character ***turn to uint8_t ?
//For size 2 the bottom right max is 117,50
//Size 2 fits 4 lines, at y= 0, 16, 32, 48
//fits 10 characters per line at multiples of 12
void Framebuffer::drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size) {
     ca6:	2f 92       	push	r2
     ca8:	3f 92       	push	r3
     caa:	4f 92       	push	r4
     cac:	5f 92       	push	r5
     cae:	6f 92       	push	r6
     cb0:	7f 92       	push	r7
     cb2:	8f 92       	push	r8
     cb4:	9f 92       	push	r9
     cb6:	af 92       	push	r10
     cb8:	bf 92       	push	r11
     cba:	cf 92       	push	r12
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	00 d0       	rcall	.+0      	; 0xccc <_ZN11Framebuffer8drawCharEiihjjh+0x26>
     ccc:	00 d0       	rcall	.+0      	; 0xcce <_ZN11Framebuffer8drawCharEiihjjh+0x28>
     cce:	1f 92       	push	r1
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	5c 01       	movw	r10, r24
     cd6:	4b 83       	std	Y+3, r20	; 0x03
     cd8:	48 01       	movw	r8, r16
     cda:	37 01       	movw	r6, r14
     cdc:	cd 82       	std	Y+5, r12	; 0x05
     cde:	6a 83       	std	Y+2, r22	; 0x02
     ce0:	2c 2c       	mov	r2, r12
     ce2:	26 0e       	add	r2, r22
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	69 01       	movw	r12, r18
     ce8:	cc 0c       	add	r12, r12
     cea:	dd 1c       	adc	r13, r13
     cec:	cc 0c       	add	r12, r12
     cee:	dd 1c       	adc	r13, r13
     cf0:	2c 0d       	add	r18, r12
     cf2:	3d 1d       	adc	r19, r13
     cf4:	c9 01       	movw	r24, r18
     cf6:	88 56       	subi	r24, 0x68	; 104
     cf8:	9f 4f       	sbci	r25, 0xFF	; 255
     cfa:	6c 01       	movw	r12, r24
    for (int8_t i=0; i<6; i++ ) {
        uint8_t line;
        if (i == 5)
        line = 0x0;
        else
        line = pgm_read_byte(font+(c*5)+i);
     cfc:	36 2e       	mov	r3, r22
//  (y >= _height)           || // Clip bottom
//  ((x + 6 * size - 1) < 0) || // Clip left
//  ((y + 8 * size - 1) < 0))   // Clip top
//  return;

    for (int8_t i=0; i<6; i++ ) {
     cfe:	19 82       	std	Y+1, r1	; 0x01
     d00:	44 2e       	mov	r4, r20
     d02:	98 e0       	ldi	r25, 0x08	; 8
     d04:	49 0e       	add	r4, r25
        uint8_t line;
        if (i == 5)
     d06:	e9 81       	ldd	r30, Y+1	; 0x01
     d08:	e5 30       	cpi	r30, 0x05	; 5
     d0a:	09 f4       	brne	.+2      	; 0xd0e <_ZN11Framebuffer8drawCharEiihjjh+0x68>
     d0c:	41 c0       	rjmp	.+130    	; 0xd90 <_ZN11Framebuffer8drawCharEiihjjh+0xea>
        line = 0x0;
        else
        line = pgm_read_byte(font+(c*5)+i);
     d0e:	f6 01       	movw	r30, r12
     d10:	14 91       	lpm	r17, Z
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <_ZN11Framebuffer8drawCharEiihjjh+0xec>
        for (int8_t j = 0; j<8; j++) {
            if (line & 0x1) {
     d14:	10 ff       	sbrs	r17, 0
     d16:	11 c0       	rjmp	.+34     	; 0xd3a <_ZN11Framebuffer8drawCharEiihjjh+0x94>
                if (size == 1) // default size
     d18:	fd 81       	ldd	r31, Y+5	; 0x05
     d1a:	f1 30       	cpi	r31, 0x01	; 1
     d1c:	29 f4       	brne	.+10     	; 0xd28 <_ZN11Framebuffer8drawCharEiihjjh+0x82>
                drawPixel(x+i, y+j); //removed color***
     d1e:	4c 81       	ldd	r20, Y+4	; 0x04
     d20:	6a 81       	ldd	r22, Y+2	; 0x02
     d22:	c5 01       	movw	r24, r10
     d24:	ee de       	rcall	.-548    	; 0xb02 <_ZN11Framebuffer9drawPixelEhh>
     d26:	1c c0       	rjmp	.+56     	; 0xd60 <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                else {  // big size
                    drawRectangle(x+(i*size), y+(j*size), size+x+(i*size), size+y+(j*size), 1);
     d28:	ee 24       	eor	r14, r14
     d2a:	e3 94       	inc	r14
     d2c:	0f 2d       	mov	r16, r15
     d2e:	22 2d       	mov	r18, r2
     d30:	45 2d       	mov	r20, r5
     d32:	63 2d       	mov	r22, r3
     d34:	c5 01       	movw	r24, r10
     d36:	5f df       	rcall	.-322    	; 0xbf6 <_ZN11Framebuffer13drawRectangleEhhhhh>
     d38:	13 c0       	rjmp	.+38     	; 0xd60 <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                }
                } else if (bg != color) { //*** remove?
     d3a:	68 14       	cp	r6, r8
     d3c:	79 04       	cpc	r7, r9
     d3e:	81 f0       	breq	.+32     	; 0xd60 <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                if (size == 1) // default size
     d40:	8d 81       	ldd	r24, Y+5	; 0x05
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	29 f4       	brne	.+10     	; 0xd50 <_ZN11Framebuffer8drawCharEiihjjh+0xaa>
                drawPixel(x+i, y+j); //removed color
     d46:	4c 81       	ldd	r20, Y+4	; 0x04
     d48:	6a 81       	ldd	r22, Y+2	; 0x02
     d4a:	c5 01       	movw	r24, r10
     d4c:	da de       	rcall	.-588    	; 0xb02 <_ZN11Framebuffer9drawPixelEhh>
     d4e:	08 c0       	rjmp	.+16     	; 0xd60 <_ZN11Framebuffer8drawCharEiihjjh+0xba>
                else {  // big size
                    drawRectangle(x+i*size, y+j*size, size+x+(i*size), size+y+(j*size), 1);
     d50:	ee 24       	eor	r14, r14
     d52:	e3 94       	inc	r14
     d54:	0f 2d       	mov	r16, r15
     d56:	22 2d       	mov	r18, r2
     d58:	45 2d       	mov	r20, r5
     d5a:	63 2d       	mov	r22, r3
     d5c:	c5 01       	movw	r24, r10
     d5e:	4b df       	rcall	.-362    	; 0xbf6 <_ZN11Framebuffer13drawRectangleEhhhhh>
                }
            }
            line >>= 1;
     d60:	16 95       	lsr	r17
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	59 0e       	add	r5, r25
     d66:	f9 0e       	add	r15, r25
     d68:	ec 81       	ldd	r30, Y+4	; 0x04
     d6a:	ef 5f       	subi	r30, 0xFF	; 255
     d6c:	ec 83       	std	Y+4, r30	; 0x04
        uint8_t line;
        if (i == 5)
        line = 0x0;
        else
        line = pgm_read_byte(font+(c*5)+i);
        for (int8_t j = 0; j<8; j++) {
     d6e:	e4 11       	cpse	r30, r4
     d70:	d1 cf       	rjmp	.-94     	; 0xd14 <_ZN11Framebuffer8drawCharEiihjjh+0x6e>
     d72:	f9 81       	ldd	r31, Y+1	; 0x01
     d74:	ff 5f       	subi	r31, 0xFF	; 255
     d76:	f9 83       	std	Y+1, r31	; 0x01
     d78:	39 0e       	add	r3, r25
     d7a:	29 0e       	add	r2, r25
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	8f 5f       	subi	r24, 0xFF	; 255
     d80:	8a 83       	std	Y+2, r24	; 0x02
     d82:	9f ef       	ldi	r25, 0xFF	; 255
     d84:	c9 1a       	sub	r12, r25
     d86:	d9 0a       	sbc	r13, r25
//  (y >= _height)           || // Clip bottom
//  ((x + 6 * size - 1) < 0) || // Clip left
//  ((y + 8 * size - 1) < 0))   // Clip top
//  return;

    for (int8_t i=0; i<6; i++ ) {
     d88:	f6 30       	cpi	r31, 0x06	; 6
     d8a:	09 f0       	breq	.+2      	; 0xd8e <_ZN11Framebuffer8drawCharEiihjjh+0xe8>
     d8c:	bc cf       	rjmp	.-136    	; 0xd06 <_ZN11Framebuffer8drawCharEiihjjh+0x60>
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <_ZN11Framebuffer8drawCharEiihjjh+0xf8>
        uint8_t line;
        if (i == 5)
        line = 0x0;
     d90:	10 e0       	ldi	r17, 0x00	; 0
     d92:	5b 80       	ldd	r5, Y+3	; 0x03
     d94:	f5 2c       	mov	r15, r5
     d96:	ed 81       	ldd	r30, Y+5	; 0x05
     d98:	fe 0e       	add	r15, r30
//  (y >= _height)           || // Clip bottom
//  ((x + 6 * size - 1) < 0) || // Clip left
//  ((y + 8 * size - 1) < 0))   // Clip top
//  return;

    for (int8_t i=0; i<6; i++ ) {
     d9a:	5c 82       	std	Y+4, r5	; 0x04
     d9c:	bb cf       	rjmp	.-138    	; 0xd14 <_ZN11Framebuffer8drawCharEiihjjh+0x6e>
                }
            }
            line >>= 1;
        }
    }
}
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	df 90       	pop	r13
     db6:	cf 90       	pop	r12
     db8:	bf 90       	pop	r11
     dba:	af 90       	pop	r10
     dbc:	9f 90       	pop	r9
     dbe:	8f 90       	pop	r8
     dc0:	7f 90       	pop	r7
     dc2:	6f 90       	pop	r6
     dc4:	5f 90       	pop	r5
     dc6:	4f 90       	pop	r4
     dc8:	3f 90       	pop	r3
     dca:	2f 90       	pop	r2
     dcc:	08 95       	ret

00000dce <_ZN11Framebuffer10drawStringEiiPKc>:

// Draw a string
void Framebuffer::drawString(int16_t x, int16_t y, const char *string){
     dce:	6f 92       	push	r6
     dd0:	7f 92       	push	r7
     dd2:	8f 92       	push	r8
     dd4:	9f 92       	push	r9
     dd6:	af 92       	push	r10
     dd8:	bf 92       	push	r11
     dda:	cf 92       	push	r12
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	f9 01       	movw	r30, r18

    for(char j=x; *string; string++,j+=12){
     de8:	c6 2f       	mov	r28, r22
     dea:	20 81       	ld	r18, Z
     dec:	22 23       	and	r18, r18
     dee:	c1 f0       	breq	.+48     	; 0xe20 <_ZN11Framebuffer10drawStringEiiPKc+0x52>
     df0:	5f 01       	movw	r10, r30
     df2:	3a 01       	movw	r6, r20
     df4:	4c 01       	movw	r8, r24
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	a8 1a       	sub	r10, r24
     dfa:	b8 0a       	sbc	r11, r24
        //(x,y,char,color,bg,size)
        this->drawChar(j,y,*string,0,0,2);
     dfc:	6c 2f       	mov	r22, r28
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	68 94       	set
     e02:	cc 24       	eor	r12, r12
     e04:	c1 f8       	bld	r12, 1
     e06:	e1 2c       	mov	r14, r1
     e08:	f1 2c       	mov	r15, r1
     e0a:	00 e0       	ldi	r16, 0x00	; 0
     e0c:	10 e0       	ldi	r17, 0x00	; 0
     e0e:	a3 01       	movw	r20, r6
     e10:	c4 01       	movw	r24, r8
     e12:	49 df       	rcall	.-366    	; 0xca6 <_ZN11Framebuffer8drawCharEiihjjh>
}

// Draw a string
void Framebuffer::drawString(int16_t x, int16_t y, const char *string){

    for(char j=x; *string; string++,j+=12){
     e14:	c4 5f       	subi	r28, 0xF4	; 244
     e16:	f5 01       	movw	r30, r10
     e18:	21 91       	ld	r18, Z+
     e1a:	5f 01       	movw	r10, r30
     e1c:	21 11       	cpse	r18, r1
     e1e:	ee cf       	rjmp	.-36     	; 0xdfc <_ZN11Framebuffer10drawStringEiiPKc+0x2e>
        //(x,y,char,color,bg,size)
        this->drawChar(j,y,*string,0,0,2);
    }
    
}
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	cf 90       	pop	r12
     e2c:	bf 90       	pop	r11
     e2e:	af 90       	pop	r10
     e30:	9f 90       	pop	r9
     e32:	8f 90       	pop	r8
     e34:	7f 90       	pop	r7
     e36:	6f 90       	pop	r6
     e38:	08 95       	ret

00000e3a <_ZN11Framebuffer10drawNumberEiii>:

void Framebuffer::drawNumber(int16_t x, int16_t y, int number){
     e3a:	8f 92       	push	r8
     e3c:	9f 92       	push	r9
     e3e:	af 92       	push	r10
     e40:	bf 92       	push	r11
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	6c 01       	movw	r12, r24
     e58:	5b 01       	movw	r10, r22
     e5a:	4a 01       	movw	r8, r20
		i = 7;
	}
	char str[i];
	sprintf(str,"%i",number);
	this->drawString(x,y,str);
}
     e5c:	ed b6       	in	r14, 0x3d	; 61
     e5e:	fe b6       	in	r15, 0x3e	; 62
    
}

void Framebuffer::drawNumber(int16_t x, int16_t y, int number){
	char i;
	if(number<10){
     e60:	2a 30       	cpi	r18, 0x0A	; 10
     e62:	31 05       	cpc	r19, r1
     e64:	4c f0       	brlt	.+18     	; 0xe78 <_ZN11Framebuffer10drawNumberEiii+0x3e>
		i = 2;
	}
	else if(number < 100){
     e66:	24 36       	cpi	r18, 0x64	; 100
     e68:	31 05       	cpc	r19, r1
     e6a:	44 f0       	brlt	.+16     	; 0xe7c <_ZN11Framebuffer10drawNumberEiii+0x42>
		i = 3;
	}
	else if(number <1000){
     e6c:	28 3e       	cpi	r18, 0xE8	; 232
     e6e:	43 e0       	ldi	r20, 0x03	; 3
     e70:	34 07       	cpc	r19, r20
     e72:	34 f0       	brlt	.+12     	; 0xe80 <_ZN11Framebuffer10drawNumberEiii+0x46>
		i = 4;
	}
	else{
		i = 7;
     e74:	87 e0       	ldi	r24, 0x07	; 7
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <_ZN11Framebuffer10drawNumberEiii+0x48>
}

void Framebuffer::drawNumber(int16_t x, int16_t y, int number){
	char i;
	if(number<10){
		i = 2;
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	03 c0       	rjmp	.+6      	; 0xe82 <_ZN11Framebuffer10drawNumberEiii+0x48>
	}
	else if(number < 100){
		i = 3;
     e7c:	83 e0       	ldi	r24, 0x03	; 3
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <_ZN11Framebuffer10drawNumberEiii+0x48>
	}
	else if(number <1000){
		i = 4;
     e80:	84 e0       	ldi	r24, 0x04	; 4
	}
	else{
		i = 7;
	}
	char str[i];
     e82:	4d b7       	in	r20, 0x3d	; 61
     e84:	5e b7       	in	r21, 0x3e	; 62
     e86:	48 1b       	sub	r20, r24
     e88:	51 09       	sbc	r21, r1
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	5e bf       	out	0x3e, r21	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	4d bf       	out	0x3d, r20	; 61
     e94:	0d b7       	in	r16, 0x3d	; 61
     e96:	1e b7       	in	r17, 0x3e	; 62
     e98:	0f 5f       	subi	r16, 0xFF	; 255
     e9a:	1f 4f       	sbci	r17, 0xFF	; 255
	sprintf(str,"%i",number);
     e9c:	3f 93       	push	r19
     e9e:	2f 93       	push	r18
     ea0:	87 e3       	ldi	r24, 0x37	; 55
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	9f 93       	push	r25
     ea6:	8f 93       	push	r24
     ea8:	1f 93       	push	r17
     eaa:	0f 93       	push	r16
     eac:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <sprintf>
	this->drawString(x,y,str);
     eb0:	20 2f       	mov	r18, r16
     eb2:	31 2f       	mov	r19, r17
     eb4:	a4 01       	movw	r20, r8
     eb6:	b5 01       	movw	r22, r10
     eb8:	c6 01       	movw	r24, r12
     eba:	89 df       	rcall	.-238    	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	fe be       	out	0x3e, r15	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	ed be       	out	0x3d, r14	; 61
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	ff 90       	pop	r15
     edc:	ef 90       	pop	r14
     ede:	df 90       	pop	r13
     ee0:	cf 90       	pop	r12
     ee2:	bf 90       	pop	r11
     ee4:	af 90       	pop	r10
     ee6:	9f 90       	pop	r9
     ee8:	8f 90       	pop	r8
     eea:	08 95       	ret

00000eec <_ZN3I2CC1Ev>:

#include "I2C.h"

#define F_CPU 8000000

I2C::I2C() {}
     eec:	08 95       	ret

00000eee <_ZN3I2C4initEh>:

void I2C::init(uint8_t address) {
    this->address = address;
     eee:	fc 01       	movw	r30, r24
     ef0:	60 83       	st	Z, r22
    TWSR = 0;
     ef2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR = ((F_CPU/SCL_CLOCK)-16)/2;
     ef6:	80 e2       	ldi	r24, 0x20	; 32
     ef8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     efc:	08 95       	ret

00000efe <_ZN3I2C5startEv>:
}

uint8_t I2C::start() {
     efe:	dc 01       	movw	r26, r24
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     f00:	84 ea       	ldi	r24, 0xA4	; 164
     f02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while(!(TWCR & (1<<TWINT)));
     f06:	ec eb       	ldi	r30, 0xBC	; 188
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	90 81       	ld	r25, Z
     f0c:	99 23       	and	r25, r25
     f0e:	ec f7       	brge	.-6      	; 0xf0a <_ZN3I2C5startEv+0xc>

    twi_status_register = TW_STATUS & 0xF8;
     f10:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f14:	98 7f       	andi	r25, 0xF8	; 248
     f16:	11 96       	adiw	r26, 0x01	; 1
     f18:	9c 93       	st	X, r25
     f1a:	11 97       	sbiw	r26, 0x01	; 1
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
     f1c:	98 30       	cpi	r25, 0x08	; 8
     f1e:	11 f0       	breq	.+4      	; 0xf24 <_ZN3I2C5startEv+0x26>
     f20:	90 31       	cpi	r25, 0x10	; 16
     f22:	b9 f4       	brne	.+46     	; 0xf52 <_ZN3I2C5startEv+0x54>
        return 1;
    }

    TWDR = address;
     f24:	8c 91       	ld	r24, X
     f26:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = (1<<TWINT) | (1<<TWEN);
     f2a:	84 e8       	ldi	r24, 0x84	; 132
     f2c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    while(!(TWCR & (1<<TWINT)));
     f30:	ec eb       	ldi	r30, 0xBC	; 188
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	90 81       	ld	r25, Z
     f36:	99 23       	and	r25, r25
     f38:	ec f7       	brge	.-6      	; 0xf34 <_ZN3I2C5startEv+0x36>

    this->twi_status_register = TW_STATUS & 0xF8;
     f3a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f3e:	98 7f       	andi	r25, 0xF8	; 248
     f40:	11 96       	adiw	r26, 0x01	; 1
     f42:	9c 93       	st	X, r25
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
     f44:	98 31       	cpi	r25, 0x18	; 24
     f46:	39 f0       	breq	.+14     	; 0xf56 <_ZN3I2C5startEv+0x58>
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    while(!(TWCR & (1<<TWINT)));

    twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
        return 1;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 34       	cpi	r25, 0x40	; 64
     f4c:	29 f4       	brne	.+10     	; 0xf58 <_ZN3I2C5startEv+0x5a>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	08 95       	ret
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	08 95       	ret
    this->twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
        return 1;
    }

    return 0;
     f56:	80 e0       	ldi	r24, 0x00	; 0
}
     f58:	08 95       	ret

00000f5a <_ZN3I2C5writeEh>:

uint8_t I2C::write(uint8_t data) {
     f5a:	dc 01       	movw	r26, r24
    TWDR = data;
     f5c:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = (1<<TWINT) | (1<<TWEN);
     f60:	84 e8       	ldi	r24, 0x84	; 132
     f62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    while(!(TWCR & (1<<TWINT)));
     f66:	ec eb       	ldi	r30, 0xBC	; 188
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	90 81       	ld	r25, Z
     f6c:	99 23       	and	r25, r25
     f6e:	ec f7       	brge	.-6      	; 0xf6a <_ZN3I2C5writeEh+0x10>

    this->twi_status_register = TW_STATUS & 0xF8;
     f70:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f74:	98 7f       	andi	r25, 0xF8	; 248
     f76:	11 96       	adiw	r26, 0x01	; 1
     f78:	9c 93       	st	X, r25
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	98 32       	cpi	r25, 0x28	; 40
     f7e:	09 f4       	brne	.+2      	; 0xf82 <_ZN3I2C5writeEh+0x28>
     f80:	80 e0       	ldi	r24, 0x00	; 0
    if (this->twi_status_register != TW_MT_DATA_ACK) {
        return 1;
    } else {
        return 0;
    }
}
     f82:	08 95       	ret

00000f84 <_ZN3I2C4stopEv>:

void I2C::stop(void) {
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     f84:	84 e9       	ldi	r24, 0x94	; 148
     f86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while(TWCR & (1<<TWSTO));
     f8a:	ec eb       	ldi	r30, 0xBC	; 188
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	84 fd       	sbrc	r24, 4
     f92:	fd cf       	rjmp	.-6      	; 0xf8e <_ZN3I2C4stopEv+0xa>
     f94:	08 95       	ret

00000f96 <main>:
Framebuffer myDisplay;

int main(void){
	unsigned char menuSelector = 0;
	
	cli(); //Ensure interrupts are turned off
     f96:	f8 94       	cli
	//Set system clock to 8MHz
	CLKPR = _BV(CLKPCE);
     f98:	e1 e6       	ldi	r30, 0x61	; 97
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 e8       	ldi	r24, 0x80	; 128
     f9e:	80 83       	st	Z, r24
	CLKPR = 0;
     fa0:	10 82       	st	Z, r1
	
	//pin 6 input for stepper calibration pin
	DDRE &= 0x0e; 
     fa2:	8d b1       	in	r24, 0x0d	; 13
     fa4:	8e 70       	andi	r24, 0x0E	; 14
     fa6:	8d b9       	out	0x0d, r24	; 13
	//Leds output
	DDRC |= 0xff;
     fa8:	87 b1       	in	r24, 0x07	; 7
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	87 b9       	out	0x07, r24	; 7
	//Joystick input w/ pullup up(pin7) left(pin6) select(pin5) 
	DDRB &= ~JS_UP_PIN & ~JS_LEFT_PIN & ~JS_SELECT_PIN; 
     fae:	84 b1       	in	r24, 0x04	; 4
     fb0:	8f 71       	andi	r24, 0x1F	; 31
     fb2:	84 b9       	out	0x04, r24	; 4
	PORTB |= JS_UP_PIN | JS_LEFT_PIN | JS_SELECT_PIN;
     fb4:	85 b1       	in	r24, 0x05	; 5
     fb6:	80 6e       	ori	r24, 0xE0	; 224
     fb8:	85 b9       	out	0x05, r24	; 5
	//Joystick input w/ pullup down(pin5) right(pin4)
	DDRE &= ~JS_DOWN_PIN & ~JS_RIGHT_PIN;
     fba:	8d b1       	in	r24, 0x0d	; 13
     fbc:	8f 7c       	andi	r24, 0xCF	; 207
     fbe:	8d b9       	out	0x0d, r24	; 13
	PORTE |= JS_DOWN_PIN | JS_RIGHT_PIN;
     fc0:	8e b1       	in	r24, 0x0e	; 14
     fc2:	80 63       	ori	r24, 0x30	; 48
	
	initADC();
     fc4:	8e b9       	out	0x0e, r24	; 14
     fc6:	11 db       	rcall	.-2526   	; 0x5ea <_Z7initADCv>
     fc8:	f8 d3       	rcall	.+2032   	; 0x17ba <_Z9initMotorv>
     fca:	bd d7       	rcall	.+3962   	; 0x1f46 <_Z9initTimerv>
     fcc:	41 dc       	rcall	.-1918   	; 0x850 <_Z10initExtIntv>
     fce:	f5 d3       	rcall	.+2026   	; 0x17ba <_Z9initMotorv>
     fd0:	c8 d4       	rcall	.+2448   	; 0x1962 <_Z11initStepperv>
     fd2:	16 d4       	rcall	.+2092   	; 0x1800 <_Z10motorBrakev>
     fd4:	8f ea       	ldi	r24, 0xAF	; 175
     fd6:	0a d4       	rcall	.+2068   	; 0x17ec <_Z10motorSpeedc>
     fd8:	01 e0       	ldi	r16, 0x01	; 1
     fda:	d0 e0       	ldi	r29, 0x00	; 0
     fdc:	68 94       	set
     fde:	bb 24       	eor	r11, r11
     fe0:	b1 f8       	bld	r11, 1
     fe2:	c0 2e       	mov	r12, r16
     fe4:	dd 2e       	mov	r13, r29
     fe6:	0f 2e       	mov	r0, r31
     fe8:	f3 e0       	ldi	r31, 0x03	; 3
     fea:	ef 2e       	mov	r14, r31
     fec:	f0 2d       	mov	r31, r0
     fee:	14 e0       	ldi	r17, 0x04	; 4
     ff0:	fb 2c       	mov	r15, r11
     ff2:	ab 2c       	mov	r10, r11
     ff4:	fb d0       	rcall	.+502    	; 0x11ec <_Z10menu1Startv>
     ff6:	cd 2f       	mov	r28, r29
     ff8:	65 99       	sbic	0x0c, 5	; 12
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <main+0x6a>
     ffc:	26 d1       	rcall	.+588    	; 0x124a <_Z16menu1Calibrationv>
     ffe:	cc 2d       	mov	r28, r12
    1000:	1f 99       	sbic	0x03, 7	; 3
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <main+0x72>
    1004:	f3 d0       	rcall	.+486    	; 0x11ec <_Z10menu1Startv>
    1006:	cd 2d       	mov	r28, r13
    1008:	1d 99       	sbic	0x03, 5	; 3
    100a:	f6 cf       	rjmp	.-20     	; 0xff8 <main+0x62>
    100c:	84 e1       	ldi	r24, 0x14	; 20
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	a6 d7       	rcall	.+3916   	; 0x1f5e <_Z6mTimeri>
    1012:	1d 9b       	sbis	0x03, 5	; 3
    1014:	fe cf       	rjmp	.-4      	; 0x1012 <main+0x7c>
    1016:	84 e1       	ldi	r24, 0x14	; 20
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a1 d7       	rcall	.+3906   	; 0x1f5e <_Z6mTimeri>
    101c:	c1 30       	cpi	r28, 0x01	; 1
    101e:	79 f0       	breq	.+30     	; 0x103e <main+0xa8>
    1020:	0f 2e       	mov	r0, r31
    1022:	f4 e6       	ldi	r31, 0x64	; 100
    1024:	cf 2e       	mov	r12, r31
    1026:	f0 2d       	mov	r31, r0
    1028:	d1 2c       	mov	r13, r1
    102a:	0f 2e       	mov	r0, r31
    102c:	f2 e3       	ldi	r31, 0x32	; 50
    102e:	ef 2e       	mov	r14, r31
    1030:	f1 2c       	mov	r15, r1
    1032:	f0 2d       	mov	r31, r0
    1034:	06 e9       	ldi	r16, 0x96	; 150
    1036:	10 e0       	ldi	r17, 0x00	; 0
    1038:	cc 2d       	mov	r28, r12
    103a:	dd 2d       	mov	r29, r13
    103c:	5e c0       	rjmp	.+188    	; 0x10fa <main+0x164>
    103e:	34 d1       	rcall	.+616    	; 0x12a8 <_Z9menu2Homev>
    1040:	cf 2d       	mov	r28, r15
    1042:	65 99       	sbic	0x0c, 5	; 12
    1044:	b9 c0       	rjmp	.+370    	; 0x11b8 <main+0x222>
    1046:	c4 30       	cpi	r28, 0x04	; 4
    1048:	09 f0       	breq	.+2      	; 0x104c <main+0xb6>
    104a:	b6 c0       	rjmp	.+364    	; 0x11b8 <main+0x222>
    104c:	b2 c0       	rjmp	.+356    	; 0x11b2 <main+0x21c>
    104e:	c2 30       	cpi	r28, 0x02	; 2
    1050:	09 f0       	breq	.+2      	; 0x1054 <main+0xbe>
    1052:	b4 c0       	rjmp	.+360    	; 0x11bc <main+0x226>
    1054:	b6 c0       	rjmp	.+364    	; 0x11c2 <main+0x22c>
    1056:	65 9b       	sbis	0x0c, 5	; 12
    1058:	fe cf       	rjmp	.-4      	; 0x1056 <main+0xc0>
    105a:	84 e1       	ldi	r24, 0x14	; 20
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	7f d7       	rcall	.+3838   	; 0x1f5e <_Z6mTimeri>
    1060:	45 d1       	rcall	.+650    	; 0x12ec <_Z12menu2Stepperv>
    1062:	c1 2f       	mov	r28, r17
    1064:	ee cf       	rjmp	.-36     	; 0x1042 <main+0xac>
    1066:	c3 30       	cpi	r28, 0x03	; 3
    1068:	09 f0       	breq	.+2      	; 0x106c <main+0xd6>
    106a:	af c0       	rjmp	.+350    	; 0x11ca <main+0x234>
    106c:	b1 c0       	rjmp	.+354    	; 0x11d0 <main+0x23a>
    106e:	1f 9b       	sbis	0x03, 7	; 3
    1070:	fe cf       	rjmp	.-4      	; 0x106e <main+0xd8>
    1072:	84 e1       	ldi	r24, 0x14	; 20
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	73 d7       	rcall	.+3814   	; 0x1f5e <_Z6mTimeri>
    1078:	39 d1       	rcall	.+626    	; 0x12ec <_Z12menu2Stepperv>
    107a:	c1 2f       	mov	r28, r17
    107c:	e2 cf       	rjmp	.-60     	; 0x1042 <main+0xac>
    107e:	c4 30       	cpi	r28, 0x04	; 4
    1080:	09 f0       	breq	.+2      	; 0x1084 <main+0xee>
    1082:	aa c0       	rjmp	.+340    	; 0x11d8 <main+0x242>
    1084:	ac c0       	rjmp	.+344    	; 0x11de <main+0x248>
    1086:	1d 99       	sbic	0x03, 5	; 3
    1088:	dc cf       	rjmp	.-72     	; 0x1042 <main+0xac>
    108a:	84 e1       	ldi	r24, 0x14	; 20
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	67 d7       	rcall	.+3790   	; 0x1f5e <_Z6mTimeri>
    1090:	1d 9b       	sbis	0x03, 5	; 3
    1092:	fe cf       	rjmp	.-4      	; 0x1090 <main+0xfa>
    1094:	84 e1       	ldi	r24, 0x14	; 20
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	62 d7       	rcall	.+3780   	; 0x1f5e <_Z6mTimeri>
    109a:	c3 30       	cpi	r28, 0x03	; 3
    109c:	d1 f4       	brne	.+52     	; 0x10d2 <main+0x13c>
    109e:	f8 da       	rcall	.-2576   	; 0x690 <_Z12calibrateADCv>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	fc 01       	movw	r30, r24
    10a6:	e5 5d       	subi	r30, 0xD5	; 213
    10a8:	fd 4f       	sbci	r31, 0xFD	; 253
    10aa:	10 82       	st	Z, r1
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	88 30       	cpi	r24, 0x08	; 8
    10b0:	91 05       	cpc	r25, r1
    10b2:	c1 f7       	brne	.-16     	; 0x10a4 <main+0x10e>
    10b4:	d0 93 29 02 	sts	0x0229, r29	; 0x800229 <frontOfQueue>
    10b8:	d0 93 28 02 	sts	0x0228, r29	; 0x800228 <backOfQueue>
    10bc:	1d 99       	sbic	0x03, 5	; 3
    10be:	fe cf       	rjmp	.-4      	; 0x10bc <main+0x126>
    10c0:	84 e1       	ldi	r24, 0x14	; 20
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	4c d7       	rcall	.+3736   	; 0x1f5e <_Z6mTimeri>
    10c6:	1d 9b       	sbis	0x03, 5	; 3
    10c8:	fe cf       	rjmp	.-4      	; 0x10c6 <main+0x130>
    10ca:	84 e1       	ldi	r24, 0x14	; 20
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	47 d7       	rcall	.+3726   	; 0x1f5e <_Z6mTimeri>
    10d0:	b6 cf       	rjmp	.-148    	; 0x103e <main+0xa8>
    10d2:	c2 30       	cpi	r28, 0x02	; 2
    10d4:	11 f4       	brne	.+4      	; 0x10da <main+0x144>
    10d6:	d5 d4       	rcall	.+2474   	; 0x1a82 <_Z11homeStepperv>
    10d8:	8b cf       	rjmp	.-234    	; 0xff0 <main+0x5a>
    10da:	c4 30       	cpi	r28, 0x04	; 4
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <main+0x14a>
    10de:	b1 cf       	rjmp	.-158    	; 0x1042 <main+0xac>
    10e0:	08 b9       	out	0x08, r16	; 8
    10e2:	e2 d4       	rcall	.+2500   	; 0x1aa8 <_Z18stepperCalibrationv>
    10e4:	ac cf       	rjmp	.-168    	; 0x103e <main+0xa8>
    10e6:	1e 9b       	sbis	0x03, 6	; 3
    10e8:	08 c0       	rjmp	.+16     	; 0x10fa <main+0x164>
    10ea:	1f 99       	sbic	0x03, 7	; 3
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <main+0x15c>
    10ee:	42 d1       	rcall	.+644    	; 0x1374 <_Z10menuDebugQv>
    10f0:	fa cf       	rjmp	.-12     	; 0x10e6 <main+0x150>
    10f2:	65 99       	sbic	0x0c, 5	; 12
    10f4:	f8 cf       	rjmp	.-16     	; 0x10e6 <main+0x150>
    10f6:	26 d2       	rcall	.+1100   	; 0x1544 <_Z20menuDisplayItemCountv>
    10f8:	f6 cf       	rjmp	.-20     	; 0x10e6 <main+0x150>
    10fa:	7d d3       	rcall	.+1786   	; 0x17f6 <_Z12motorForwardv>
    10fc:	3c d4       	rcall	.+2168   	; 0x1976 <_Z12startStepperv>
    10fe:	78 94       	sei
    1100:	39 d1       	rcall	.+626    	; 0x1374 <_Z10menuDebugQv>
    1102:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <reflQueueChange>
    1106:	88 23       	and	r24, r24
    1108:	09 f4       	brne	.+2      	; 0x110c <main+0x176>
    110a:	48 c0       	rjmp	.+144    	; 0x119c <main+0x206>
    110c:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <delayStepper>
    1110:	88 23       	and	r24, r24
    1112:	69 f0       	breq	.+26     	; 0x112e <main+0x198>
    1114:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <delayStepper>
    1118:	82 30       	cpi	r24, 0x02	; 2
    111a:	21 f4       	brne	.+8      	; 0x1124 <main+0x18e>
    111c:	8a e0       	ldi	r24, 0x0A	; 10
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	1e d7       	rcall	.+3644   	; 0x1f5e <_Z6mTimeri>
    1122:	03 c0       	rjmp	.+6      	; 0x112a <main+0x194>
    1124:	8a e0       	ldi	r24, 0x0A	; 10
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	1a d7       	rcall	.+3636   	; 0x1f5e <_Z6mTimeri>
    112a:	10 92 3c 06 	sts	0x063C, r1	; 0x80063c <delayStepper>
    112e:	f8 94       	cli
    1130:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <frontOfQueue>
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	e5 5d       	subi	r30, 0xD5	; 213
    1138:	fd 4f       	sbci	r31, 0xFD	; 253
    113a:	80 81       	ld	r24, Z
    113c:	81 11       	cpse	r24, r1
    113e:	05 c0       	rjmp	.+10     	; 0x114a <main+0x1b4>
    1140:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <stepGoalPosition+0x1>
    1144:	10 92 3f 06 	sts	0x063F, r1	; 0x80063f <stepGoalPosition>
    1148:	26 c0       	rjmp	.+76     	; 0x1196 <main+0x200>
    114a:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <frontOfQueue>
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	e5 5d       	subi	r30, 0xD5	; 213
    1152:	fd 4f       	sbci	r31, 0xFD	; 253
    1154:	80 81       	ld	r24, Z
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	29 f4       	brne	.+10     	; 0x1164 <main+0x1ce>
    115a:	d0 93 40 06 	sts	0x0640, r29	; 0x800640 <stepGoalPosition+0x1>
    115e:	c0 93 3f 06 	sts	0x063F, r28	; 0x80063f <stepGoalPosition>
    1162:	19 c0       	rjmp	.+50     	; 0x1196 <main+0x200>
    1164:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <frontOfQueue>
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	e5 5d       	subi	r30, 0xD5	; 213
    116c:	fd 4f       	sbci	r31, 0xFD	; 253
    116e:	80 81       	ld	r24, Z
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	29 f4       	brne	.+10     	; 0x117e <main+0x1e8>
    1174:	10 93 40 06 	sts	0x0640, r17	; 0x800640 <stepGoalPosition+0x1>
    1178:	00 93 3f 06 	sts	0x063F, r16	; 0x80063f <stepGoalPosition>
    117c:	0c c0       	rjmp	.+24     	; 0x1196 <main+0x200>
    117e:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <frontOfQueue>
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	e5 5d       	subi	r30, 0xD5	; 213
    1186:	fd 4f       	sbci	r31, 0xFD	; 253
    1188:	80 81       	ld	r24, Z
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	21 f4       	brne	.+8      	; 0x1196 <main+0x200>
    118e:	f0 92 40 06 	sts	0x0640, r15	; 0x800640 <stepGoalPosition+0x1>
    1192:	e0 92 3f 06 	sts	0x063F, r14	; 0x80063f <stepGoalPosition>
    1196:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <reflQueueChange>
    119a:	78 94       	sei
    119c:	64 99       	sbic	0x0c, 4	; 12
    119e:	b0 cf       	rjmp	.-160    	; 0x1100 <main+0x16a>
    11a0:	82 b1       	in	r24, 0x02	; 2
    11a2:	8f 73       	andi	r24, 0x3F	; 63
    11a4:	82 b9       	out	0x02, r24	; 2
    11a6:	8c 2d       	mov	r24, r12
    11a8:	9d 2d       	mov	r25, r13
    11aa:	d9 d6       	rcall	.+3506   	; 0x1f5e <_Z6mTimeri>
    11ac:	f8 94       	cli
    11ae:	ca d1       	rcall	.+916    	; 0x1544 <_Z20menuDisplayItemCountv>
    11b0:	9a cf       	rjmp	.-204    	; 0x10e6 <main+0x150>
    11b2:	be d0       	rcall	.+380    	; 0x1330 <_Z9menu2Reflv>
    11b4:	ce 2d       	mov	r28, r14
    11b6:	45 cf       	rjmp	.-374    	; 0x1042 <main+0xac>
    11b8:	65 9b       	sbis	0x0c, 5	; 12
    11ba:	49 cf       	rjmp	.-366    	; 0x104e <main+0xb8>
    11bc:	1f 9b       	sbis	0x03, 7	; 3
    11be:	53 cf       	rjmp	.-346    	; 0x1066 <main+0xd0>
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <main+0x234>
    11c2:	84 e1       	ldi	r24, 0x14	; 20
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	cb d6       	rcall	.+3478   	; 0x1f5e <_Z6mTimeri>
    11c8:	46 cf       	rjmp	.-372    	; 0x1056 <main+0xc0>
    11ca:	1f 9b       	sbis	0x03, 7	; 3
    11cc:	58 cf       	rjmp	.-336    	; 0x107e <main+0xe8>
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <main+0x242>
    11d0:	84 e1       	ldi	r24, 0x14	; 20
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	c4 d6       	rcall	.+3464   	; 0x1f5e <_Z6mTimeri>
    11d6:	4b cf       	rjmp	.-362    	; 0x106e <main+0xd8>
    11d8:	1e 99       	sbic	0x03, 6	; 3
    11da:	55 cf       	rjmp	.-342    	; 0x1086 <main+0xf0>
    11dc:	0b cf       	rjmp	.-490    	; 0xff4 <main+0x5e>
    11de:	64 d0       	rcall	.+200    	; 0x12a8 <_Z9menu2Homev>
    11e0:	ca 2d       	mov	r28, r10
    11e2:	2f cf       	rjmp	.-418    	; 0x1042 <main+0xac>

000011e4 <_GLOBAL__sub_I_debug>:
    11e4:	83 e3       	ldi	r24, 0x33	; 51
    11e6:	92 e0       	ldi	r25, 0x02	; 2
    11e8:	50 cd       	rjmp	.-1376   	; 0xc8a <_ZN11FramebufferC1Ev>
    11ea:	08 95       	ret

000011ec <_Z10menu1Startv>:
extern volatile unsigned char aluminumCount;
extern volatile unsigned int debugCount;
extern volatile unsigned int adcAverage;
extern volatile unsigned char adcTotalCount;

void menu1Start(){
    11ec:	ef 92       	push	r14
    11ee:	0f 93       	push	r16
	myDisplay.clear();
    11f0:	83 e3       	ldi	r24, 0x33	; 51
    11f2:	92 e0       	ldi	r25, 0x02	; 2
    11f4:	43 dd       	rcall	.-1402   	; 0xc7c <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0,"Item Sorter");
    11f6:	2a e3       	ldi	r18, 0x3A	; 58
    11f8:	31 e0       	ldi	r19, 0x01	; 1
    11fa:	40 e0       	ldi	r20, 0x00	; 0
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	83 e3       	ldi	r24, 0x33	; 51
    1204:	92 e0       	ldi	r25, 0x02	; 2
    1206:	e3 dd       	rcall	.-1082   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawRectangle(0,16,127,17,1);
    1208:	ee 24       	eor	r14, r14
    120a:	e3 94       	inc	r14
    120c:	01 e1       	ldi	r16, 0x11	; 17
    120e:	2f e7       	ldi	r18, 0x7F	; 127
    1210:	40 e1       	ldi	r20, 0x10	; 16
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	83 e3       	ldi	r24, 0x33	; 51
    1216:	92 e0       	ldi	r25, 0x02	; 2
    1218:	ee dc       	rcall	.-1572   	; 0xbf6 <_ZN11Framebuffer13drawRectangleEhhhhh>
	myDisplay.drawString(0,20,">Start");
    121a:	26 e4       	ldi	r18, 0x46	; 70
    121c:	31 e0       	ldi	r19, 0x01	; 1
    121e:	44 e1       	ldi	r20, 0x14	; 20
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	83 e3       	ldi	r24, 0x33	; 51
    1228:	92 e0       	ldi	r25, 0x02	; 2
    122a:	d1 dd       	rcall	.-1118   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,36," Calibrate");
    122c:	2d e4       	ldi	r18, 0x4D	; 77
    122e:	31 e0       	ldi	r19, 0x01	; 1
    1230:	44 e2       	ldi	r20, 0x24	; 36
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	83 e3       	ldi	r24, 0x33	; 51
    123a:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    123c:	c8 dd       	rcall	.-1136   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
    123e:	83 e3       	ldi	r24, 0x33	; 51
    1240:	92 e0       	ldi	r25, 0x02	; 2
    1242:	2d dd       	rcall	.-1446   	; 0xc9e <_ZN11Framebuffer4showEv>
}
    1244:	0f 91       	pop	r16
    1246:	ef 90       	pop	r14
    1248:	08 95       	ret

0000124a <_Z16menu1Calibrationv>:

void menu1Calibration(){
    124a:	ef 92       	push	r14
    124c:	0f 93       	push	r16
	myDisplay.clear();
    124e:	83 e3       	ldi	r24, 0x33	; 51
    1250:	92 e0       	ldi	r25, 0x02	; 2
    1252:	14 dd       	rcall	.-1496   	; 0xc7c <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0,"Item Sorter");
    1254:	2a e3       	ldi	r18, 0x3A	; 58
    1256:	31 e0       	ldi	r19, 0x01	; 1
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	83 e3       	ldi	r24, 0x33	; 51
    1262:	92 e0       	ldi	r25, 0x02	; 2
    1264:	b4 dd       	rcall	.-1176   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawRectangle(0,16,127,17,1);
    1266:	ee 24       	eor	r14, r14
    1268:	e3 94       	inc	r14
    126a:	01 e1       	ldi	r16, 0x11	; 17
    126c:	2f e7       	ldi	r18, 0x7F	; 127
    126e:	40 e1       	ldi	r20, 0x10	; 16
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	83 e3       	ldi	r24, 0x33	; 51
    1274:	92 e0       	ldi	r25, 0x02	; 2
    1276:	bf dc       	rcall	.-1666   	; 0xbf6 <_ZN11Framebuffer13drawRectangleEhhhhh>
	myDisplay.drawString(0,20," Start");
    1278:	28 e5       	ldi	r18, 0x58	; 88
    127a:	31 e0       	ldi	r19, 0x01	; 1
    127c:	44 e1       	ldi	r20, 0x14	; 20
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	83 e3       	ldi	r24, 0x33	; 51
    1286:	92 e0       	ldi	r25, 0x02	; 2
    1288:	a2 dd       	rcall	.-1212   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,36,">Calibrate");
    128a:	2f e5       	ldi	r18, 0x5F	; 95
    128c:	31 e0       	ldi	r19, 0x01	; 1
    128e:	44 e2       	ldi	r20, 0x24	; 36
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	83 e3       	ldi	r24, 0x33	; 51
    1298:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    129a:	99 dd       	rcall	.-1230   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
    129c:	83 e3       	ldi	r24, 0x33	; 51
    129e:	92 e0       	ldi	r25, 0x02	; 2
    12a0:	fe dc       	rcall	.-1540   	; 0xc9e <_ZN11Framebuffer4showEv>
}
    12a2:	0f 91       	pop	r16
    12a4:	ef 90       	pop	r14
    12a6:	08 95       	ret

000012a8 <_Z9menu2Homev>:
void menu2Home(){
	myDisplay.clear();
    12a8:	83 e3       	ldi	r24, 0x33	; 51
    12aa:	92 e0       	ldi	r25, 0x02	; 2
    12ac:	e7 dc       	rcall	.-1586   	; 0xc7c <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0,">Home Step");
    12ae:	2a e6       	ldi	r18, 0x6A	; 106
    12b0:	31 e0       	ldi	r19, 0x01	; 1
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	83 e3       	ldi	r24, 0x33	; 51
    12bc:	92 e0       	ldi	r25, 0x02	; 2
    12be:	87 dd       	rcall	.-1266   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,16," Stepper");
    12c0:	25 e7       	ldi	r18, 0x75	; 117
    12c2:	31 e0       	ldi	r19, 0x01	; 1
    12c4:	40 e1       	ldi	r20, 0x10	; 16
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	83 e3       	ldi	r24, 0x33	; 51
    12ce:	92 e0       	ldi	r25, 0x02	; 2
    12d0:	7e dd       	rcall	.-1284   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,32," Optical S");
    12d2:	2e e7       	ldi	r18, 0x7E	; 126
    12d4:	31 e0       	ldi	r19, 0x01	; 1
    12d6:	40 e2       	ldi	r20, 0x20	; 32
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	83 e3       	ldi	r24, 0x33	; 51
    12e0:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    12e2:	75 dd       	rcall	.-1302   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
    12e4:	83 e3       	ldi	r24, 0x33	; 51
    12e6:	92 e0       	ldi	r25, 0x02	; 2
    12e8:	da cc       	rjmp	.-1612   	; 0xc9e <_ZN11Framebuffer4showEv>
    12ea:	08 95       	ret

000012ec <_Z12menu2Stepperv>:
}
void menu2Stepper(){
	myDisplay.clear();
    12ec:	83 e3       	ldi	r24, 0x33	; 51
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	c5 dc       	rcall	.-1654   	; 0xc7c <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0," Home Step");
    12f2:	29 e8       	ldi	r18, 0x89	; 137
    12f4:	31 e0       	ldi	r19, 0x01	; 1
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	83 e3       	ldi	r24, 0x33	; 51
    1300:	92 e0       	ldi	r25, 0x02	; 2
    1302:	65 dd       	rcall	.-1334   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,16,">Stepper");
    1304:	24 e9       	ldi	r18, 0x94	; 148
    1306:	31 e0       	ldi	r19, 0x01	; 1
    1308:	40 e1       	ldi	r20, 0x10	; 16
    130a:	50 e0       	ldi	r21, 0x00	; 0
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	83 e3       	ldi	r24, 0x33	; 51
    1312:	92 e0       	ldi	r25, 0x02	; 2
    1314:	5c dd       	rcall	.-1352   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,32," Optical S");
    1316:	2e e7       	ldi	r18, 0x7E	; 126
    1318:	31 e0       	ldi	r19, 0x01	; 1
    131a:	40 e2       	ldi	r20, 0x20	; 32
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	83 e3       	ldi	r24, 0x33	; 51
    1324:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    1326:	53 dd       	rcall	.-1370   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
    1328:	83 e3       	ldi	r24, 0x33	; 51
    132a:	92 e0       	ldi	r25, 0x02	; 2
    132c:	b8 cc       	rjmp	.-1680   	; 0xc9e <_ZN11Framebuffer4showEv>
    132e:	08 95       	ret

00001330 <_Z9menu2Reflv>:
}
void menu2Refl(){
	myDisplay.clear();
    1330:	83 e3       	ldi	r24, 0x33	; 51
    1332:	92 e0       	ldi	r25, 0x02	; 2
    1334:	a3 dc       	rcall	.-1722   	; 0xc7c <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0," Home Step");
    1336:	29 e8       	ldi	r18, 0x89	; 137
    1338:	31 e0       	ldi	r19, 0x01	; 1
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	83 e3       	ldi	r24, 0x33	; 51
    1344:	92 e0       	ldi	r25, 0x02	; 2
    1346:	43 dd       	rcall	.-1402   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,16," Stepper");
    1348:	25 e7       	ldi	r18, 0x75	; 117
    134a:	31 e0       	ldi	r19, 0x01	; 1
    134c:	40 e1       	ldi	r20, 0x10	; 16
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	83 e3       	ldi	r24, 0x33	; 51
    1356:	92 e0       	ldi	r25, 0x02	; 2
    1358:	3a dd       	rcall	.-1420   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawString(0,32,">Optical S");
    135a:	2d e9       	ldi	r18, 0x9D	; 157
    135c:	31 e0       	ldi	r19, 0x01	; 1
    135e:	40 e2       	ldi	r20, 0x20	; 32
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	83 e3       	ldi	r24, 0x33	; 51
    1368:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    136a:	31 dd       	rcall	.-1438   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
    136c:	83 e3       	ldi	r24, 0x33	; 51
    136e:	92 e0       	ldi	r25, 0x02	; 2
    1370:	96 cc       	rjmp	.-1748   	; 0xc9e <_ZN11Framebuffer4showEv>
    1372:	08 95       	ret

00001374 <_Z10menuDebugQv>:
}

void menuDebugQ(){
    1374:	ef 92       	push	r14
    1376:	0f 93       	push	r16
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
	myDisplay.clear();
    137c:	83 e3       	ldi	r24, 0x33	; 51
    137e:	92 e0       	ldi	r25, 0x02	; 2
    1380:	7d dc       	rcall	.-1798   	; 0xc7c <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0,"Queue");
    1382:	28 ea       	ldi	r18, 0xA8	; 168
    1384:	31 e0       	ldi	r19, 0x01	; 1
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	83 e3       	ldi	r24, 0x33	; 51
    1390:	92 e0       	ldi	r25, 0x02	; 2
    1392:	1d dd       	rcall	.-1478   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	//myDisplay.drawNumber(0,0,adcAverage);//lowestRefl); ****
	myDisplay.drawNumber(72,0,lowestRefl); 
    1394:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lowestRefl>
    1398:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lowestRefl+0x1>
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	68 e4       	ldi	r22, 0x48	; 72
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	83 e3       	ldi	r24, 0x33	; 51
    13a6:	92 e0       	ldi	r25, 0x02	; 2
    13a8:	48 dd       	rcall	.-1392   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawRectangle(0,16,127,17,1);
    13aa:	ee 24       	eor	r14, r14
    13ac:	e3 94       	inc	r14
    13ae:	01 e1       	ldi	r16, 0x11	; 17
    13b0:	2f e7       	ldi	r18, 0x7F	; 127
    13b2:	40 e1       	ldi	r20, 0x10	; 16
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	83 e3       	ldi	r24, 0x33	; 51
    13b8:	92 e0       	ldi	r25, 0x02	; 2
    13ba:	1d dc       	rcall	.-1990   	; 0xbf6 <_ZN11Framebuffer13drawRectangleEhhhhh>
	myDisplay.drawNumber(0,20,reflQueue[0]); 
    13bc:	cb e2       	ldi	r28, 0x2B	; 43
    13be:	d2 e0       	ldi	r29, 0x02	; 2
    13c0:	28 81       	ld	r18, Y
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	44 e1       	ldi	r20, 0x14	; 20
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	83 e3       	ldi	r24, 0x33	; 51
    13ce:	92 e0       	ldi	r25, 0x02	; 2
    13d0:	34 dd       	rcall	.-1432   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawNumber(12,20,reflQueue[1]);
    13d2:	29 81       	ldd	r18, Y+1	; 0x01
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	44 e1       	ldi	r20, 0x14	; 20
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	6c e0       	ldi	r22, 0x0C	; 12
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	83 e3       	ldi	r24, 0x33	; 51
    13e0:	92 e0       	ldi	r25, 0x02	; 2
    13e2:	2b dd       	rcall	.-1450   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawNumber(24,20,reflQueue[2]);
    13e4:	2a 81       	ldd	r18, Y+2	; 0x02
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	44 e1       	ldi	r20, 0x14	; 20
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	68 e1       	ldi	r22, 0x18	; 24
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	83 e3       	ldi	r24, 0x33	; 51
    13f2:	92 e0       	ldi	r25, 0x02	; 2
    13f4:	22 dd       	rcall	.-1468   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawNumber(36,20,reflQueue[3]);
    13f6:	2b 81       	ldd	r18, Y+3	; 0x03
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	44 e1       	ldi	r20, 0x14	; 20
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	64 e2       	ldi	r22, 0x24	; 36
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	83 e3       	ldi	r24, 0x33	; 51
    1404:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.drawNumber(48,20,reflQueue[4]);
    1406:	19 dd       	rcall	.-1486   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
    1408:	2c 81       	ldd	r18, Y+4	; 0x04
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	44 e1       	ldi	r20, 0x14	; 20
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	60 e3       	ldi	r22, 0x30	; 48
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.drawNumber(60,20,reflQueue[5]);
    1416:	92 e0       	ldi	r25, 0x02	; 2
    1418:	10 dd       	rcall	.-1504   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
    141a:	2d 81       	ldd	r18, Y+5	; 0x05
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	44 e1       	ldi	r20, 0x14	; 20
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	6c e3       	ldi	r22, 0x3C	; 60
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.drawNumber(72,20,reflQueue[6]);
    1428:	92 e0       	ldi	r25, 0x02	; 2
    142a:	07 dd       	rcall	.-1522   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
    142c:	2e 81       	ldd	r18, Y+6	; 0x06
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	44 e1       	ldi	r20, 0x14	; 20
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	68 e4       	ldi	r22, 0x48	; 72
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.drawNumber(84,20,reflQueue[7]);
    143a:	92 e0       	ldi	r25, 0x02	; 2
    143c:	fe dc       	rcall	.-1540   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
    143e:	2f 81       	ldd	r18, Y+7	; 0x07
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	44 e1       	ldi	r20, 0x14	; 20
    1444:	50 e0       	ldi	r21, 0x00	; 0
    1446:	64 e5       	ldi	r22, 0x54	; 84
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.drawNumber(108,20,reflQueueCount);
    144c:	92 e0       	ldi	r25, 0x02	; 2
    144e:	f5 dc       	rcall	.-1558   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
    1450:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <reflQueueCount>
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	44 e1       	ldi	r20, 0x14	; 20
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	6c e6       	ldi	r22, 0x6C	; 108
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	83 e3       	ldi	r24, 0x33	; 51
    1460:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.drawString(12*frontOfQueue,36,"f");
    1462:	eb dc       	rcall	.-1578   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
    1464:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <frontOfQueue>
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	cb 01       	movw	r24, r22
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	68 0f       	add	r22, r24
    1472:	79 1f       	adc	r23, r25
    1474:	66 0f       	add	r22, r22
    1476:	77 1f       	adc	r23, r23
    1478:	66 0f       	add	r22, r22
    147a:	77 1f       	adc	r23, r23
    147c:	2e ea       	ldi	r18, 0xAE	; 174
    147e:	31 e0       	ldi	r19, 0x01	; 1
    1480:	44 e2       	ldi	r20, 0x24	; 36
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	83 e3       	ldi	r24, 0x33	; 51
    1486:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.drawString(12*(backOfQueue),36,"b");
    1488:	a2 dc       	rcall	.-1724   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
    148a:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <backOfQueue>
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	cb 01       	movw	r24, r22
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	68 0f       	add	r22, r24
    1498:	79 1f       	adc	r23, r25
    149a:	66 0f       	add	r22, r22
    149c:	77 1f       	adc	r23, r23
    149e:	66 0f       	add	r22, r22
    14a0:	77 1f       	adc	r23, r23
    14a2:	20 eb       	ldi	r18, 0xB0	; 176
    14a4:	31 e0       	ldi	r19, 0x01	; 1
    14a6:	44 e2       	ldi	r20, 0x24	; 36
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.show();
    14ac:	92 e0       	ldi	r25, 0x02	; 2
    14ae:	8f dc       	rcall	.-1762   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
    14b0:	83 e3       	ldi	r24, 0x33	; 51
    14b2:	92 e0       	ldi	r25, 0x02	; 2
}
    14b4:	f4 db       	rcall	.-2072   	; 0xc9e <_ZN11Framebuffer4showEv>
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	0f 91       	pop	r16
    14bc:	ef 90       	pop	r14
    14be:	08 95       	ret

000014c0 <_Z10menuDebugSv>:

void menuDebugS(){
	myDisplay.clear();
    14c0:	83 e3       	ldi	r24, 0x33	; 51
    14c2:	92 e0       	ldi	r25, 0x02	; 2
    14c4:	db db       	rcall	.-2122   	; 0xc7c <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(0,0,"Goal:");
    14c6:	22 eb       	ldi	r18, 0xB2	; 178
    14c8:	31 e0       	ldi	r19, 0x01	; 1
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	83 e3       	ldi	r24, 0x33	; 51
    14d4:	92 e0       	ldi	r25, 0x02	; 2
    14d6:	7b dc       	rcall	.-1802   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(60,0,stepGoalPosition);
    14d8:	20 91 3f 06 	lds	r18, 0x063F	; 0x80063f <stepGoalPosition>
    14dc:	30 91 40 06 	lds	r19, 0x0640	; 0x800640 <stepGoalPosition+0x1>
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	6c e3       	ldi	r22, 0x3C	; 60
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	83 e3       	ldi	r24, 0x33	; 51
    14ea:	92 e0       	ldi	r25, 0x02	; 2
    14ec:	a6 dc       	rcall	.-1716   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(0,16,"Cur:");
    14ee:	28 eb       	ldi	r18, 0xB8	; 184
    14f0:	31 e0       	ldi	r19, 0x01	; 1
    14f2:	40 e1       	ldi	r20, 0x10	; 16
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	83 e3       	ldi	r24, 0x33	; 51
    14fc:	92 e0       	ldi	r25, 0x02	; 2
    14fe:	67 dc       	rcall	.-1842   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(60,16,stepGoalPosition);
    1500:	20 91 3f 06 	lds	r18, 0x063F	; 0x80063f <stepGoalPosition>
    1504:	30 91 40 06 	lds	r19, 0x0640	; 0x800640 <stepGoalPosition+0x1>
    1508:	40 e1       	ldi	r20, 0x10	; 16
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	6c e3       	ldi	r22, 0x3C	; 60
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	83 e3       	ldi	r24, 0x33	; 51
    1512:	92 e0       	ldi	r25, 0x02	; 2
    1514:	92 dc       	rcall	.-1756   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(0,32,"Delay:");
    1516:	2d eb       	ldi	r18, 0xBD	; 189
    1518:	31 e0       	ldi	r19, 0x01	; 1
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	83 e3       	ldi	r24, 0x33	; 51
    1524:	92 e0       	ldi	r25, 0x02	; 2
    1526:	53 dc       	rcall	.-1882   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(72,32,stepperDelay);
    1528:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <stepperDelay>
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e2       	ldi	r20, 0x20	; 32
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	68 e4       	ldi	r22, 0x48	; 72
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	83 e3       	ldi	r24, 0x33	; 51
    1538:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    153a:	7f dc       	rcall	.-1794   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
    153c:	83 e3       	ldi	r24, 0x33	; 51
    153e:	92 e0       	ldi	r25, 0x02	; 2
    1540:	ae cb       	rjmp	.-2212   	; 0xc9e <_ZN11Framebuffer4showEv>
    1542:	08 95       	ret

00001544 <_Z20menuDisplayItemCountv>:
}

void menuDisplayItemCount(){
	myDisplay.clear();
    1544:	83 e3       	ldi	r24, 0x33	; 51
    1546:	92 e0       	ldi	r25, 0x02	; 2
    1548:	99 db       	rcall	.-2254   	; 0xc7c <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(column(1),row(1),"On Belt:");
    154a:	24 ec       	ldi	r18, 0xC4	; 196
    154c:	31 e0       	ldi	r19, 0x01	; 1
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	83 e3       	ldi	r24, 0x33	; 51
    1558:	92 e0       	ldi	r25, 0x02	; 2
    155a:	39 dc       	rcall	.-1934   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(9),row(1),reflQueueCount);
    155c:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <reflQueueCount>
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	60 e6       	ldi	r22, 0x60	; 96
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	83 e3       	ldi	r24, 0x33	; 51
    156c:	92 e0       	ldi	r25, 0x02	; 2
    156e:	65 dc       	rcall	.-1846   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(column(1),row(2),"TSorted:");
    1570:	2d ec       	ldi	r18, 0xCD	; 205
    1572:	31 e0       	ldi	r19, 0x01	; 1
    1574:	40 e1       	ldi	r20, 0x10	; 16
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	83 e3       	ldi	r24, 0x33	; 51
    157e:	92 e0       	ldi	r25, 0x02	; 2
    1580:	26 dc       	rcall	.-1972   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(9),row(2),(reflQueueCount+blackCount+whiteCount+steelCount+aluminumCount));
    1582:	50 91 2a 02 	lds	r21, 0x022A	; 0x80022a <reflQueueCount>
    1586:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <blackCount>
    158a:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <whiteCount>
    158e:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <steelCount>
    1592:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <aluminumCount>
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	25 0f       	add	r18, r21
    159a:	31 1d       	adc	r19, r1
    159c:	24 0f       	add	r18, r20
    159e:	31 1d       	adc	r19, r1
    15a0:	29 0f       	add	r18, r25
    15a2:	31 1d       	adc	r19, r1
    15a4:	28 0f       	add	r18, r24
    15a6:	31 1d       	adc	r19, r1
    15a8:	40 e1       	ldi	r20, 0x10	; 16
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	60 e6       	ldi	r22, 0x60	; 96
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	83 e3       	ldi	r24, 0x33	; 51
    15b2:	92 e0       	ldi	r25, 0x02	; 2
    15b4:	42 dc       	rcall	.-1916   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(column(1),row(3),"B=");
    15b6:	26 ed       	ldi	r18, 0xD6	; 214
    15b8:	31 e0       	ldi	r19, 0x01	; 1
    15ba:	40 e2       	ldi	r20, 0x20	; 32
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	83 e3       	ldi	r24, 0x33	; 51
    15c4:	92 e0       	ldi	r25, 0x02	; 2
    15c6:	03 dc       	rcall	.-2042   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(3),row(3),blackCount);
    15c8:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <blackCount>
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e2       	ldi	r20, 0x20	; 32
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	68 e1       	ldi	r22, 0x18	; 24
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	83 e3       	ldi	r24, 0x33	; 51
    15d8:	92 e0       	ldi	r25, 0x02	; 2
    15da:	2f dc       	rcall	.-1954   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(column(6),row(3),"W=");
    15dc:	29 ed       	ldi	r18, 0xD9	; 217
    15de:	31 e0       	ldi	r19, 0x01	; 1
    15e0:	40 e2       	ldi	r20, 0x20	; 32
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	6c e3       	ldi	r22, 0x3C	; 60
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	83 e3       	ldi	r24, 0x33	; 51
    15ea:	92 e0       	ldi	r25, 0x02	; 2
    15ec:	f0 db       	rcall	.-2080   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(8),row(3),whiteCount);
    15ee:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <whiteCount>
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e2       	ldi	r20, 0x20	; 32
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	64 e5       	ldi	r22, 0x54	; 84
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	83 e3       	ldi	r24, 0x33	; 51
    15fe:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.drawString(column(1),row(4),"S=");
    1600:	1c dc       	rcall	.-1992   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
    1602:	2c ed       	ldi	r18, 0xDC	; 220
    1604:	31 e0       	ldi	r19, 0x01	; 1
    1606:	40 e3       	ldi	r20, 0x30	; 48
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	83 e3       	ldi	r24, 0x33	; 51
    1610:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.drawNumber(column(3),row(4),steelCount);
    1612:	dd db       	rcall	.-2118   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
    1614:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <steelCount>
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e3       	ldi	r20, 0x30	; 48
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	68 e1       	ldi	r22, 0x18	; 24
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	83 e3       	ldi	r24, 0x33	; 51
    1624:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.drawString(column(6),row(4),"A=");
    1626:	09 dc       	rcall	.-2030   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
    1628:	2f ed       	ldi	r18, 0xDF	; 223
    162a:	31 e0       	ldi	r19, 0x01	; 1
    162c:	40 e3       	ldi	r20, 0x30	; 48
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	6c e3       	ldi	r22, 0x3C	; 60
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.drawNumber(column(8),row(4),aluminumCount);
    1636:	92 e0       	ldi	r25, 0x02	; 2
    1638:	ca db       	rcall	.-2156   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
    163a:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <aluminumCount>
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e3       	ldi	r20, 0x30	; 48
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	64 e5       	ldi	r22, 0x54	; 84
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	83 e3       	ldi	r24, 0x33	; 51
	myDisplay.show();
    164a:	92 e0       	ldi	r25, 0x02	; 2
    164c:	f6 db       	rcall	.-2068   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
    164e:	83 e3       	ldi	r24, 0x33	; 51
    1650:	92 e0       	ldi	r25, 0x02	; 2
    1652:	25 cb       	rjmp	.-2486   	; 0xc9e <_ZN11Framebuffer4showEv>
    1654:	08 95       	ret

00001656 <_Z16menuDisplayValuehPKc>:
}

//Used to display one value
void menuDisplayValue(unsigned char value, const char *label){
    1656:	0f 93       	push	r16
    1658:	1f 93       	push	r17
    165a:	cf 93       	push	r28
    165c:	c8 2f       	mov	r28, r24
    165e:	8b 01       	movw	r16, r22
	myDisplay.clear();
    1660:	83 e3       	ldi	r24, 0x33	; 51
    1662:	92 e0       	ldi	r25, 0x02	; 2
    1664:	0b db       	rcall	.-2538   	; 0xc7c <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(column(1),row(1),label);
    1666:	98 01       	movw	r18, r16
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	83 e3       	ldi	r24, 0x33	; 51
    1672:	92 e0       	ldi	r25, 0x02	; 2
    1674:	ac db       	rcall	.-2216   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(1),row(2),value);
    1676:	2c 2f       	mov	r18, r28
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e1       	ldi	r20, 0x10	; 16
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	70 e0       	ldi	r23, 0x00	; 0
    1682:	83 e3       	ldi	r24, 0x33	; 51
    1684:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    1686:	d9 db       	rcall	.-2126   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
    1688:	83 e3       	ldi	r24, 0x33	; 51
    168a:	92 e0       	ldi	r25, 0x02	; 2
    168c:	08 db       	rcall	.-2544   	; 0xc9e <_ZN11Framebuffer4showEv>
}
    168e:	cf 91       	pop	r28
    1690:	1f 91       	pop	r17
    1692:	0f 91       	pop	r16
    1694:	08 95       	ret

00001696 <_Z12menu3Displayh>:

void menu3Display(unsigned char display){
    1696:	cf 93       	push	r28
    1698:	c8 2f       	mov	r28, r24
	myDisplay.clear();
    169a:	83 e3       	ldi	r24, 0x33	; 51
    169c:	92 e0       	ldi	r25, 0x02	; 2
    169e:	ee da       	rcall	.-2596   	; 0xc7c <_ZN11Framebuffer5clearEv>
	if(display == 0){
    16a0:	c1 11       	cpse	r28, r1
    16a2:	1c c0       	rjmp	.+56     	; 0x16dc <_Z12menu3Displayh+0x46>
		myDisplay.drawString(column(1),row(1),">Max");
    16a4:	22 ee       	ldi	r18, 0xE2	; 226
    16a6:	31 e0       	ldi	r19, 0x01	; 1
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	83 e3       	ldi	r24, 0x33	; 51
    16b2:	92 e0       	ldi	r25, 0x02	; 2
    16b4:	8c db       	rcall	.-2280   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
		myDisplay.drawString(column(1),row(2)," Inc");
    16b6:	27 ee       	ldi	r18, 0xE7	; 231
    16b8:	31 e0       	ldi	r19, 0x01	; 1
    16ba:	40 e1       	ldi	r20, 0x10	; 16
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	83 e3       	ldi	r24, 0x33	; 51
    16c4:	92 e0       	ldi	r25, 0x02	; 2
    16c6:	83 db       	rcall	.-2298   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
		myDisplay.drawString(column(1),row(3)," Min");
    16c8:	2c ee       	ldi	r18, 0xEC	; 236
    16ca:	31 e0       	ldi	r19, 0x01	; 1
    16cc:	40 e2       	ldi	r20, 0x20	; 32
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	83 e3       	ldi	r24, 0x33	; 51
    16d6:	92 e0       	ldi	r25, 0x02	; 2
    16d8:	7a db       	rcall	.-2316   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
    16da:	3b c0       	rjmp	.+118    	; 0x1752 <_Z12menu3Displayh+0xbc>
	}
	else if(display == 1){
    16dc:	c1 30       	cpi	r28, 0x01	; 1
    16de:	e1 f4       	brne	.+56     	; 0x1718 <_Z12menu3Displayh+0x82>
		myDisplay.drawString(column(1),row(1)," Max");
    16e0:	21 ef       	ldi	r18, 0xF1	; 241
    16e2:	31 e0       	ldi	r19, 0x01	; 1
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	83 e3       	ldi	r24, 0x33	; 51
    16ee:	92 e0       	ldi	r25, 0x02	; 2
    16f0:	6e db       	rcall	.-2340   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
		myDisplay.drawString(column(1),row(2),">Inc");
    16f2:	26 ef       	ldi	r18, 0xF6	; 246
    16f4:	31 e0       	ldi	r19, 0x01	; 1
    16f6:	40 e1       	ldi	r20, 0x10	; 16
    16f8:	50 e0       	ldi	r21, 0x00	; 0
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	83 e3       	ldi	r24, 0x33	; 51
    1700:	92 e0       	ldi	r25, 0x02	; 2
    1702:	65 db       	rcall	.-2358   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
		myDisplay.drawString(column(1),row(3)," Min");
    1704:	2c ee       	ldi	r18, 0xEC	; 236
    1706:	31 e0       	ldi	r19, 0x01	; 1
    1708:	40 e2       	ldi	r20, 0x20	; 32
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	83 e3       	ldi	r24, 0x33	; 51
    1712:	92 e0       	ldi	r25, 0x02	; 2
    1714:	5c db       	rcall	.-2376   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
    1716:	1d c0       	rjmp	.+58     	; 0x1752 <_Z12menu3Displayh+0xbc>
	}
	else if(display == 2){
    1718:	c2 30       	cpi	r28, 0x02	; 2
    171a:	d9 f4       	brne	.+54     	; 0x1752 <_Z12menu3Displayh+0xbc>
		myDisplay.drawString(column(1),row(1)," Max");
    171c:	21 ef       	ldi	r18, 0xF1	; 241
    171e:	31 e0       	ldi	r19, 0x01	; 1
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	83 e3       	ldi	r24, 0x33	; 51
    172a:	92 e0       	ldi	r25, 0x02	; 2
		myDisplay.drawString(column(1),row(2)," Inc");
    172c:	50 db       	rcall	.-2400   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
    172e:	27 ee       	ldi	r18, 0xE7	; 231
    1730:	31 e0       	ldi	r19, 0x01	; 1
    1732:	40 e1       	ldi	r20, 0x10	; 16
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	83 e3       	ldi	r24, 0x33	; 51
		myDisplay.drawString(column(1),row(3),">Min");
    173c:	92 e0       	ldi	r25, 0x02	; 2
    173e:	47 db       	rcall	.-2418   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
    1740:	2b ef       	ldi	r18, 0xFB	; 251
    1742:	31 e0       	ldi	r19, 0x01	; 1
    1744:	40 e2       	ldi	r20, 0x20	; 32
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	83 e3       	ldi	r24, 0x33	; 51
	}
	myDisplay.show();
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	3e db       	rcall	.-2436   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
    1752:	83 e3       	ldi	r24, 0x33	; 51
    1754:	92 e0       	ldi	r25, 0x02	; 2
}
    1756:	a3 da       	rcall	.-2746   	; 0xc9e <_ZN11Framebuffer4showEv>
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <_Z12menu3Runningv>:
void menu3Running(){
	myDisplay.clear();
    175c:	83 e3       	ldi	r24, 0x33	; 51
    175e:	92 e0       	ldi	r25, 0x02	; 2
    1760:	8d da       	rcall	.-2790   	; 0xc7c <_ZN11Framebuffer5clearEv>
	myDisplay.drawString(column(1),row(1),"Current:");
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	32 e0       	ldi	r19, 0x02	; 2
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	83 e3       	ldi	r24, 0x33	; 51
    1770:	92 e0       	ldi	r25, 0x02	; 2
    1772:	2d db       	rcall	.-2470   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(1),row(2),stepCurrentPosition);
    1774:	20 91 41 06 	lds	r18, 0x0641	; 0x800641 <stepCurrentPosition>
    1778:	30 91 42 06 	lds	r19, 0x0642	; 0x800642 <stepCurrentPosition+0x1>
    177c:	40 e1       	ldi	r20, 0x10	; 16
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	83 e3       	ldi	r24, 0x33	; 51
    1786:	92 e0       	ldi	r25, 0x02	; 2
    1788:	58 db       	rcall	.-2384   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
	myDisplay.drawString(column(1),row(3),"Goal:");
    178a:	22 eb       	ldi	r18, 0xB2	; 178
    178c:	31 e0       	ldi	r19, 0x01	; 1
    178e:	40 e2       	ldi	r20, 0x20	; 32
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	83 e3       	ldi	r24, 0x33	; 51
    1798:	92 e0       	ldi	r25, 0x02	; 2
    179a:	19 db       	rcall	.-2510   	; 0xdce <_ZN11Framebuffer10drawStringEiiPKc>
	myDisplay.drawNumber(column(1),row(4),stepGoalPosition);
    179c:	20 91 3f 06 	lds	r18, 0x063F	; 0x80063f <stepGoalPosition>
    17a0:	30 91 40 06 	lds	r19, 0x0640	; 0x800640 <stepGoalPosition+0x1>
    17a4:	40 e3       	ldi	r20, 0x30	; 48
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	83 e3       	ldi	r24, 0x33	; 51
    17ae:	92 e0       	ldi	r25, 0x02	; 2
	myDisplay.show();
    17b0:	44 db       	rcall	.-2424   	; 0xe3a <_ZN11Framebuffer10drawNumberEiii>
    17b2:	83 e3       	ldi	r24, 0x33	; 51
    17b4:	92 e0       	ldi	r25, 0x02	; 2
    17b6:	73 ca       	rjmp	.-2842   	; 0xc9e <_ZN11Framebuffer4showEv>
    17b8:	08 95       	ret

000017ba <_Z9initMotorv>:
void motorForward(){
	MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_FORWARD;
}

void motorReverse(){
	MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_REVERSE;
    17ba:	84 b1       	in	r24, 0x04	; 4
    17bc:	81 61       	ori	r24, 0x11	; 17
    17be:	84 b9       	out	0x04, r24	; 4
    17c0:	81 b1       	in	r24, 0x01	; 1
    17c2:	80 6c       	ori	r24, 0xC0	; 192
    17c4:	81 b9       	out	0x01, r24	; 1
    17c6:	20 9a       	sbi	0x04, 0	; 4
    17c8:	e0 eb       	ldi	r30, 0xB0	; 176
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	83 60       	ori	r24, 0x03	; 3
    17d0:	80 83       	st	Z, r24
    17d2:	80 81       	ld	r24, Z
    17d4:	80 68       	ori	r24, 0x80	; 128
    17d6:	80 83       	st	Z, r24
    17d8:	e1 eb       	ldi	r30, 0xB1	; 177
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	81 60       	ori	r24, 0x01	; 1
    17e0:	80 83       	st	Z, r24
    17e2:	80 e8       	ldi	r24, 0x80	; 128
    17e4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    17e8:	28 98       	cbi	0x05, 0	; 5
    17ea:	08 95       	ret

000017ec <_Z10motorSpeedc>:
    17ec:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    17f0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    17f4:	08 95       	ret

000017f6 <_Z12motorForwardv>:
    17f6:	82 b1       	in	r24, 0x02	; 2
    17f8:	8f 73       	andi	r24, 0x3F	; 63
    17fa:	80 64       	ori	r24, 0x40	; 64
    17fc:	82 b9       	out	0x02, r24	; 2
    17fe:	08 95       	ret

00001800 <_Z10motorBrakev>:
}

void motorBrake(){
	MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_BRAKE;
    1800:	82 b1       	in	r24, 0x02	; 2
    1802:	8f 73       	andi	r24, 0x3F	; 63
    1804:	82 b9       	out	0x02, r24	; 2
    1806:	08 95       	ret

00001808 <_ZN7SSD130611sendCommandEh>:

void SSD1306::invert(uint8_t inverted) {
    if (inverted) {
        sendCommand(SSD1306_INVERTDISPLAY);
    } else {
        sendCommand(SSD1306_NORMALDISPLAY);
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	ec 01       	movw	r28, r24
    1810:	16 2f       	mov	r17, r22
    1812:	75 db       	rcall	.-2326   	; 0xefe <_ZN3I2C5startEv>
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	ce 01       	movw	r24, r28
    1818:	a0 db       	rcall	.-2240   	; 0xf5a <_ZN3I2C5writeEh>
    181a:	61 2f       	mov	r22, r17
    181c:	ce 01       	movw	r24, r28
    181e:	9d db       	rcall	.-2246   	; 0xf5a <_ZN3I2C5writeEh>
    1820:	ce 01       	movw	r24, r28
    1822:	b0 db       	rcall	.-2208   	; 0xf84 <_ZN3I2C4stopEv>
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	08 95       	ret

0000182c <_ZN7SSD1306C1Ev>:
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	ec 01       	movw	r28, r24
    1832:	5c db       	rcall	.-2376   	; 0xeec <_ZN3I2CC1Ev>
    1834:	68 e7       	ldi	r22, 0x78	; 120
    1836:	ce 01       	movw	r24, r28
    1838:	5a db       	rcall	.-2380   	; 0xeee <_ZN3I2C4initEh>
    183a:	6e ea       	ldi	r22, 0xAE	; 174
    183c:	ce 01       	movw	r24, r28
    183e:	e4 df       	rcall	.-56     	; 0x1808 <_ZN7SSD130611sendCommandEh>
    1840:	65 ed       	ldi	r22, 0xD5	; 213
    1842:	ce 01       	movw	r24, r28
    1844:	e1 df       	rcall	.-62     	; 0x1808 <_ZN7SSD130611sendCommandEh>
    1846:	60 e8       	ldi	r22, 0x80	; 128
    1848:	ce 01       	movw	r24, r28
    184a:	de df       	rcall	.-68     	; 0x1808 <_ZN7SSD130611sendCommandEh>
    184c:	68 ea       	ldi	r22, 0xA8	; 168
    184e:	ce 01       	movw	r24, r28
    1850:	db df       	rcall	.-74     	; 0x1808 <_ZN7SSD130611sendCommandEh>
    1852:	6f e3       	ldi	r22, 0x3F	; 63
    1854:	ce 01       	movw	r24, r28
    1856:	d8 df       	rcall	.-80     	; 0x1808 <_ZN7SSD130611sendCommandEh>
    1858:	63 ed       	ldi	r22, 0xD3	; 211
    185a:	ce 01       	movw	r24, r28
    185c:	d5 df       	rcall	.-86     	; 0x1808 <_ZN7SSD130611sendCommandEh>
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	ce 01       	movw	r24, r28
    1862:	d2 df       	rcall	.-92     	; 0x1808 <_ZN7SSD130611sendCommandEh>
    1864:	60 e4       	ldi	r22, 0x40	; 64
    1866:	ce 01       	movw	r24, r28
    1868:	cf df       	rcall	.-98     	; 0x1808 <_ZN7SSD130611sendCommandEh>
    186a:	6d e8       	ldi	r22, 0x8D	; 141
    186c:	ce 01       	movw	r24, r28
    186e:	cc df       	rcall	.-104    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    1870:	64 e1       	ldi	r22, 0x14	; 20
    1872:	ce 01       	movw	r24, r28
    1874:	c9 df       	rcall	.-110    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    1876:	60 e2       	ldi	r22, 0x20	; 32
    1878:	ce 01       	movw	r24, r28
    187a:	c6 df       	rcall	.-116    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	ce 01       	movw	r24, r28
    1880:	c3 df       	rcall	.-122    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    1882:	61 ea       	ldi	r22, 0xA1	; 161
    1884:	ce 01       	movw	r24, r28
    1886:	c0 df       	rcall	.-128    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    1888:	68 ec       	ldi	r22, 0xC8	; 200
    188a:	ce 01       	movw	r24, r28
    188c:	bd df       	rcall	.-134    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    188e:	6a ed       	ldi	r22, 0xDA	; 218
    1890:	ce 01       	movw	r24, r28
    1892:	ba df       	rcall	.-140    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    1894:	62 e1       	ldi	r22, 0x12	; 18
    1896:	ce 01       	movw	r24, r28
    1898:	b7 df       	rcall	.-146    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    189a:	61 e8       	ldi	r22, 0x81	; 129
    189c:	ce 01       	movw	r24, r28
    189e:	b4 df       	rcall	.-152    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    18a0:	6f ec       	ldi	r22, 0xCF	; 207
    18a2:	ce 01       	movw	r24, r28
    18a4:	b1 df       	rcall	.-158    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    18a6:	69 ed       	ldi	r22, 0xD9	; 217
    18a8:	ce 01       	movw	r24, r28
    18aa:	ae df       	rcall	.-164    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    18ac:	61 ef       	ldi	r22, 0xF1	; 241
    18ae:	ce 01       	movw	r24, r28
    18b0:	ab df       	rcall	.-170    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    18b2:	6b ed       	ldi	r22, 0xDB	; 219
    18b4:	ce 01       	movw	r24, r28
    18b6:	a8 df       	rcall	.-176    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    18b8:	60 e4       	ldi	r22, 0x40	; 64
    18ba:	ce 01       	movw	r24, r28
    18bc:	a5 df       	rcall	.-182    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    18be:	64 ea       	ldi	r22, 0xA4	; 164
    18c0:	ce 01       	movw	r24, r28
    18c2:	a2 df       	rcall	.-188    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    18c4:	66 ea       	ldi	r22, 0xA6	; 166
    18c6:	ce 01       	movw	r24, r28
    18c8:	9f df       	rcall	.-194    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    18ca:	6f ea       	ldi	r22, 0xAF	; 175
    18cc:	ce 01       	movw	r24, r28
    18ce:	9c df       	rcall	.-200    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	08 95       	ret

000018d6 <_ZN7SSD130615sendFramebufferEPh>:
    }
}

void SSD1306::sendFramebuffer(uint8_t *buffer) {
    18d6:	cf 92       	push	r12
    18d8:	df 92       	push	r13
    18da:	ef 92       	push	r14
    18dc:	ff 92       	push	r15
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	08 2f       	mov	r16, r24
    18e8:	19 2f       	mov	r17, r25
    18ea:	7b 01       	movw	r14, r22
    sendCommand(SSD1306_COLUMNADDR);
    18ec:	61 e2       	ldi	r22, 0x21	; 33
    18ee:	8c df       	rcall	.-232    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	80 2f       	mov	r24, r16
    18f4:	91 2f       	mov	r25, r17
    18f6:	88 df       	rcall	.-240    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x7F);
    18f8:	6f e7       	ldi	r22, 0x7F	; 127
    18fa:	80 2f       	mov	r24, r16
    18fc:	91 2f       	mov	r25, r17

    sendCommand(SSD1306_PAGEADDR);
    18fe:	84 df       	rcall	.-248    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    1900:	62 e2       	ldi	r22, 0x22	; 34
    1902:	80 2f       	mov	r24, r16
    sendCommand(0x00);
    1904:	91 2f       	mov	r25, r17
    1906:	80 df       	rcall	.-256    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	80 2f       	mov	r24, r16
    sendCommand(0x07);
    190c:	91 2f       	mov	r25, r17
    190e:	7c df       	rcall	.-264    	; 0x1808 <_ZN7SSD130611sendCommandEh>
    1910:	67 e0       	ldi	r22, 0x07	; 7
    1912:	80 2f       	mov	r24, r16
    1914:	91 2f       	mov	r25, r17
    1916:	78 df       	rcall	.-272    	; 0x1808 <_ZN7SSD130611sendCommandEh>

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) { //*** change to 32? was 64
        i2c.start();
    1918:	e7 01       	movw	r28, r14
    191a:	8c ef       	ldi	r24, 0xFC	; 252
    191c:	f8 1a       	sub	r15, r24
        i2c.write(0x40);
    191e:	80 2f       	mov	r24, r16
    1920:	91 2f       	mov	r25, r17
    1922:	ed da       	rcall	.-2598   	; 0xefe <_ZN3I2C5startEv>
    1924:	60 e4       	ldi	r22, 0x40	; 64
    1926:	80 2f       	mov	r24, r16
    1928:	91 2f       	mov	r25, r17
    192a:	17 db       	rcall	.-2514   	; 0xf5a <_ZN3I2C5writeEh>
    192c:	6e 01       	movw	r12, r28
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
    192e:	80 e1       	ldi	r24, 0x10	; 16
    1930:	c8 0e       	add	r12, r24
    1932:	d1 1c       	adc	r13, r1
    1934:	69 91       	ld	r22, Y+
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) { //*** change to 32? was 64
        i2c.start();
        i2c.write(0x40);
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
    1936:	80 2f       	mov	r24, r16
    1938:	91 2f       	mov	r25, r17
    193a:	0f db       	rcall	.-2530   	; 0xf5a <_ZN3I2C5writeEh>
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    193c:	cc 15       	cp	r28, r12
    193e:	dd 05       	cpc	r29, r13
    1940:	c9 f7       	brne	.-14     	; 0x1934 <_ZN7SSD130615sendFramebufferEPh+0x5e>
    1942:	80 2f       	mov	r24, r16
    1944:	91 2f       	mov	r25, r17
    sendCommand(0x07);

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) { //*** change to 32? was 64
    1946:	1e db       	rcall	.-2500   	; 0xf84 <_ZN3I2C4stopEv>
    1948:	e6 01       	movw	r28, r12
    194a:	ec 14       	cp	r14, r12
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    }
}
    194c:	fd 04       	cpc	r15, r13
    194e:	39 f7       	brne	.-50     	; 0x191e <_ZN7SSD130615sendFramebufferEPh+0x48>
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	df 90       	pop	r13
    195e:	cf 90       	pop	r12
    1960:	08 95       	ret

00001962 <_Z11initStepperv>:
	else if(((difference < 0) && (difference >= -100))){
		//difference = ((difference >= 0) ? difference : -difference) -100;
		rotateStepper(abs(difference), 0);
	}
	else if(difference >= 100){
		rotateStepper(abs(shortPath), 0);
    1962:	81 b1       	in	r24, 0x01	; 1
    1964:	8f 63       	ori	r24, 0x3F	; 63
    1966:	81 b9       	out	0x01, r24	; 1
    1968:	84 b5       	in	r24, 0x24	; 36
    196a:	82 60       	ori	r24, 0x02	; 2
    196c:	84 bd       	out	0x24, r24	; 36
    196e:	88 e7       	ldi	r24, 0x78	; 120
    1970:	87 bd       	out	0x27, r24	; 39
    1972:	16 bc       	out	0x26, r1	; 38
    1974:	08 95       	ret

00001976 <_Z12startStepperv>:
    1976:	ee e6       	ldi	r30, 0x6E	; 110
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	82 60       	ori	r24, 0x02	; 2
    197e:	80 83       	st	Z, r24
    1980:	a9 9a       	sbi	0x15, 1	; 21
    1982:	85 b5       	in	r24, 0x25	; 37
    1984:	85 60       	ori	r24, 0x05	; 5
    1986:	85 bd       	out	0x25, r24	; 37
    1988:	08 95       	ret

0000198a <_Z13rotateStepperii>:
    198a:	bf 92       	push	r11
    198c:	cf 92       	push	r12
    198e:	df 92       	push	r13
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	18 16       	cp	r1, r24
    199e:	19 06       	cpc	r1, r25
    19a0:	0c f0       	brlt	.+2      	; 0x19a4 <_Z13rotateStepperii+0x1a>
    19a2:	65 c0       	rjmp	.+202    	; 0x1a6e <_Z13rotateStepperii+0xe4>
    19a4:	8b 01       	movw	r16, r22
    19a6:	ec 01       	movw	r28, r24
    19a8:	c1 2c       	mov	r12, r1
    19aa:	d1 2c       	mov	r13, r1
    19ac:	0f 2e       	mov	r0, r31
    19ae:	f2 e1       	ldi	r31, 0x12	; 18
    19b0:	bf 2e       	mov	r11, r31
    19b2:	f0 2d       	mov	r31, r0
    19b4:	0f 2e       	mov	r0, r31
    19b6:	f7 ec       	ldi	r31, 0xC7	; 199
    19b8:	ef 2e       	mov	r14, r31
    19ba:	f1 2c       	mov	r15, r1
    19bc:	f0 2d       	mov	r31, r0
    19be:	01 15       	cp	r16, r1
    19c0:	11 05       	cpc	r17, r1
    19c2:	d9 f0       	breq	.+54     	; 0x19fa <_Z13rotateStepperii+0x70>
    19c4:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <stepCurrentPosition>
    19c8:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <stepCurrentPosition+0x1>
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <stepCurrentPosition+0x1>
    19d2:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <stepCurrentPosition>
    19d6:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <stepAPosition>
    19da:	8f 5f       	subi	r24, 0xFF	; 255
    19dc:	83 70       	andi	r24, 0x03	; 3
    19de:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <stepAPosition>
    19e2:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <stepCurrentPosition>
    19e6:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <stepCurrentPosition+0x1>
    19ea:	88 3c       	cpi	r24, 0xC8	; 200
    19ec:	91 05       	cpc	r25, r1
    19ee:	fc f0       	brlt	.+62     	; 0x1a2e <_Z13rotateStepperii+0xa4>
    19f0:	10 92 42 06 	sts	0x0642, r1	; 0x800642 <stepCurrentPosition+0x1>
    19f4:	10 92 41 06 	sts	0x0641, r1	; 0x800641 <stepCurrentPosition>
    19f8:	1a c0       	rjmp	.+52     	; 0x1a2e <_Z13rotateStepperii+0xa4>
    19fa:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <stepCurrentPosition>
    19fe:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <stepCurrentPosition+0x1>
    1a02:	89 2b       	or	r24, r25
    1a04:	29 f4       	brne	.+10     	; 0x1a10 <_Z13rotateStepperii+0x86>
    1a06:	f0 92 42 06 	sts	0x0642, r15	; 0x800642 <stepCurrentPosition+0x1>
    1a0a:	e0 92 41 06 	sts	0x0641, r14	; 0x800641 <stepCurrentPosition>
    1a0e:	09 c0       	rjmp	.+18     	; 0x1a22 <_Z13rotateStepperii+0x98>
    1a10:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <stepCurrentPosition>
    1a14:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <stepCurrentPosition+0x1>
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <stepCurrentPosition+0x1>
    1a1e:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <stepCurrentPosition>
    1a22:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <stepAPosition>
    1a26:	81 50       	subi	r24, 0x01	; 1
    1a28:	83 70       	andi	r24, 0x03	; 3
    1a2a:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <stepAPosition>
    1a2e:	82 b1       	in	r24, 0x02	; 2
    1a30:	e0 91 3e 06 	lds	r30, 0x063E	; 0x80063e <stepAPosition>
    1a34:	80 7c       	andi	r24, 0xC0	; 192
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	e3 5e       	subi	r30, 0xE3	; 227
    1a3a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a3c:	90 81       	ld	r25, Z
    1a3e:	89 2b       	or	r24, r25
    1a40:	82 b9       	out	0x02, r24	; 2
    1a42:	8a e0       	ldi	r24, 0x0A	; 10
    1a44:	c8 16       	cp	r12, r24
    1a46:	d1 04       	cpc	r13, r1
    1a48:	14 f4       	brge	.+4      	; 0x1a4e <_Z13rotateStepperii+0xc4>
    1a4a:	ba 94       	dec	r11
    1a4c:	06 c0       	rjmp	.+12     	; 0x1a5a <_Z13rotateStepperii+0xd0>
    1a4e:	ce 01       	movw	r24, r28
    1a50:	8c 19       	sub	r24, r12
    1a52:	9d 09       	sbc	r25, r13
    1a54:	44 97       	sbiw	r24, 0x14	; 20
    1a56:	0c f4       	brge	.+2      	; 0x1a5a <_Z13rotateStepperii+0xd0>
    1a58:	b3 94       	inc	r11
    1a5a:	8b 2d       	mov	r24, r11
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	7f d2       	rcall	.+1278   	; 0x1f5e <_Z6mTimeri>
    1a60:	8f ef       	ldi	r24, 0xFF	; 255
    1a62:	c8 1a       	sub	r12, r24
    1a64:	d8 0a       	sbc	r13, r24
    1a66:	cc 15       	cp	r28, r12
    1a68:	dd 05       	cpc	r29, r13
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <_Z13rotateStepperii+0xe4>
    1a6c:	a8 cf       	rjmp	.-176    	; 0x19be <_Z13rotateStepperii+0x34>
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	1f 91       	pop	r17
    1a74:	0f 91       	pop	r16
    1a76:	ff 90       	pop	r15
    1a78:	ef 90       	pop	r14
    1a7a:	df 90       	pop	r13
    1a7c:	cf 90       	pop	r12
    1a7e:	bf 90       	pop	r11
    1a80:	08 95       	ret

00001a82 <_Z11homeStepperv>:
    1a82:	61 e0       	ldi	r22, 0x01	; 1
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	89 e1       	ldi	r24, 0x19	; 25
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	7f df       	rcall	.-258    	; 0x198a <_Z13rotateStepperii>
    1a8c:	66 9b       	sbis	0x0c, 6	; 12
    1a8e:	07 c0       	rjmp	.+14     	; 0x1a9e <_Z11homeStepperv+0x1c>
    1a90:	61 e0       	ldi	r22, 0x01	; 1
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	78 df       	rcall	.-272    	; 0x198a <_Z13rotateStepperii>
    1a9a:	66 99       	sbic	0x0c, 6	; 12
    1a9c:	f9 cf       	rjmp	.-14     	; 0x1a90 <_Z11homeStepperv+0xe>
    1a9e:	10 92 42 06 	sts	0x0642, r1	; 0x800642 <stepCurrentPosition+0x1>
    1aa2:	10 92 41 06 	sts	0x0641, r1	; 0x800641 <stepCurrentPosition>
    1aa6:	08 95       	ret

00001aa8 <_Z18stepperCalibrationv>:
			mTimer(20);
			while((PINE & JS_DOWN_PIN) == 0){};
			mTimer(20);
			stepGoalPosition -=50;
			if(stepGoalPosition < 0){
				stepGoalPosition = 150;
    1aa8:	0f 2e       	mov	r0, r31
    1aaa:	f6 e9       	ldi	r31, 0x96	; 150
    1aac:	cf 2e       	mov	r12, r31
    1aae:	d1 2c       	mov	r13, r1
    1ab0:	f0 2d       	mov	r31, r0
		}
		menu3Display(menuSelection);
	}
	valueSelection:
	//Change from ADC1 to ADC 2 *** must change back
	ADMUX = (ADMUX & ~_BV(MUX0)) | _BV(MUX1);
    1ab2:	0f 2e       	mov	r0, r31
    1ab4:	fc e7       	ldi	r31, 0x7C	; 124
    1ab6:	ef 2e       	mov	r14, r31
    1ab8:	f1 2c       	mov	r15, r1
    1aba:	f0 2d       	mov	r31, r0
	//Left shifted
	ADMUX |= _BV(ADLAR);
	//Disable ADC interrupt
	ADCSRA &= ~_BV(ADIE);
    1abc:	ca e7       	ldi	r28, 0x7A	; 122
    1abe:	d0 e0       	ldi	r29, 0x00	; 0
		//Start ADC conversion
		ADCSRA |= _BV(ADSC);
		while(ADCSRA & _BV(ADSC)){}; //wait for conversion to finish
		
		if(adcEightCount < 8){
			adcEightAverage = adcEightAverage + ADCH - (adcEightAverage >> 3); //MA[n]* = MA[n-1]* + x[n] - MA[n-1]*/N
    1ac0:	0f 2e       	mov	r0, r31
    1ac2:	f9 e7       	ldi	r31, 0x79	; 121
    1ac4:	af 2e       	mov	r10, r31
    1ac6:	b1 2c       	mov	r11, r1
    1ac8:	f0 2d       	mov	r31, r0
				valueLabel = "IncrValue";
				calibSelectedValue = &stepperAccelRate;
			}
			else if(menuSelection == 2){
				valueLabel = "Min:";
				calibSelectedValue = &stepperMinDelay;
    1aca:	0f 2e       	mov	r0, r31
    1acc:	fd e0       	ldi	r31, 0x0D	; 13
    1ace:	2f 2e       	mov	r2, r31
    1ad0:	f1 e0       	ldi	r31, 0x01	; 1
    1ad2:	3f 2e       	mov	r3, r31
    1ad4:	f0 2d       	mov	r31, r0
			if(menuSelection == 0){
				valueLabel = "Max:";
				calibSelectedValue = &stepperMaxDelay;
			}
			else if(menuSelection == 1){
				valueLabel = "IncrValue";
    1ad6:	0f 2e       	mov	r0, r31
    1ad8:	fe e0       	ldi	r31, 0x0E	; 14
    1ada:	4f 2e       	mov	r4, r31
    1adc:	f2 e0       	ldi	r31, 0x02	; 2
    1ade:	5f 2e       	mov	r5, r31
    1ae0:	f0 2d       	mov	r31, r0
				calibSelectedValue = &stepperAccelRate;
    1ae2:	0f 2e       	mov	r0, r31
    1ae4:	fc e0       	ldi	r31, 0x0C	; 12
    1ae6:	6f 2e       	mov	r6, r31
    1ae8:	f1 e0       	ldi	r31, 0x01	; 1
    1aea:	7f 2e       	mov	r7, r31
    1aec:	f0 2d       	mov	r31, r0
		else if(JS_SELECT_PRESSED){
			mTimer(BUTTON_DEBOUNCE_DELAY);
			while(JS_SELECT_PRESSED){};
			mTimer(BUTTON_DEBOUNCE_DELAY);
			if(menuSelection == 0){
				valueLabel = "Max:";
    1aee:	0f 2e       	mov	r0, r31
    1af0:	f9 e0       	ldi	r31, 0x09	; 9
    1af2:	8f 2e       	mov	r8, r31
    1af4:	f2 e0       	ldi	r31, 0x02	; 2
    1af6:	9f 2e       	mov	r9, r31
    1af8:	f0 2d       	mov	r31, r0
void stepperCalibration(){
	char menuSelection;
	//Stepper test loop for delay 
	stepperSettings:
	menuSelection = 0;
	menu3Display(menuSelection);
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	cc dd       	rcall	.-1128   	; 0x1696 <_Z12menu3Displayh>

void stepperCalibration(){
	char menuSelection;
	//Stepper test loop for delay 
	stepperSettings:
	menuSelection = 0;
    1afe:	10 e0       	ldi	r17, 0x00	; 0
	menu3Display(menuSelection);
	while(1){
		if(JS_UP_PRESSED){
    1b00:	1f 99       	sbic	0x03, 7	; 3
    1b02:	0d c0       	rjmp	.+26     	; 0x1b1e <_Z18stepperCalibrationv+0x76>
			mTimer(BUTTON_DEBOUNCE_DELAY);
    1b04:	84 e1       	ldi	r24, 0x14	; 20
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	2a d2       	rcall	.+1108   	; 0x1f5e <_Z6mTimeri>
			while(JS_UP_PRESSED){};
    1b0a:	1f 9b       	sbis	0x03, 7	; 3
			mTimer(BUTTON_DEBOUNCE_DELAY);	
    1b0c:	fe cf       	rjmp	.-4      	; 0x1b0a <_Z18stepperCalibrationv+0x62>
    1b0e:	84 e1       	ldi	r24, 0x14	; 20
    1b10:	90 e0       	ldi	r25, 0x00	; 0
			if(menuSelection == 0){
    1b12:	25 d2       	rcall	.+1098   	; 0x1f5e <_Z6mTimeri>
    1b14:	11 23       	and	r17, r17
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <_Z18stepperCalibrationv+0x72>
				menuSelection = 0;
			}
			else{
				menuSelection--;
    1b18:	42 c0       	rjmp	.+132    	; 0x1b9e <_Z18stepperCalibrationv+0xf6>
    1b1a:	11 50       	subi	r17, 0x01	; 1
			}
			
			
		}
		else if(JS_DOWN_PRESSED){
    1b1c:	40 c0       	rjmp	.+128    	; 0x1b9e <_Z18stepperCalibrationv+0xf6>
			mTimer(BUTTON_DEBOUNCE_DELAY);
    1b1e:	65 99       	sbic	0x0c, 5	; 12
    1b20:	0d c0       	rjmp	.+26     	; 0x1b3c <_Z18stepperCalibrationv+0x94>
    1b22:	84 e1       	ldi	r24, 0x14	; 20
			while(JS_DOWN_PRESSED){};
    1b24:	90 e0       	ldi	r25, 0x00	; 0
			mTimer(BUTTON_DEBOUNCE_DELAY);
    1b26:	1b d2       	rcall	.+1078   	; 0x1f5e <_Z6mTimeri>
    1b28:	65 9b       	sbis	0x0c, 5	; 12
    1b2a:	fe cf       	rjmp	.-4      	; 0x1b28 <_Z18stepperCalibrationv+0x80>
    1b2c:	84 e1       	ldi	r24, 0x14	; 20
			menuSelection++;
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	16 d2       	rcall	.+1068   	; 0x1f5e <_Z6mTimeri>
    1b32:	1f 5f       	subi	r17, 0xFF	; 255
    1b34:	13 30       	cpi	r17, 0x03	; 3
			if(menuSelection > 2){
				menuSelection = 2;
			}
		}
		else if(JS_SELECT_PRESSED){
    1b36:	98 f1       	brcs	.+102    	; 0x1b9e <_Z18stepperCalibrationv+0xf6>
    1b38:	12 e0       	ldi	r17, 0x02	; 2
			mTimer(BUTTON_DEBOUNCE_DELAY);
    1b3a:	31 c0       	rjmp	.+98     	; 0x1b9e <_Z18stepperCalibrationv+0xf6>
    1b3c:	1d 99       	sbic	0x03, 5	; 3
    1b3e:	2d c0       	rjmp	.+90     	; 0x1b9a <_Z18stepperCalibrationv+0xf2>
			while(JS_SELECT_PRESSED){};
    1b40:	84 e1       	ldi	r24, 0x14	; 20
    1b42:	90 e0       	ldi	r25, 0x00	; 0
			mTimer(BUTTON_DEBOUNCE_DELAY);
    1b44:	0c d2       	rcall	.+1048   	; 0x1f5e <_Z6mTimeri>
    1b46:	1d 9b       	sbis	0x03, 5	; 3
    1b48:	fe cf       	rjmp	.-4      	; 0x1b46 <_Z18stepperCalibrationv+0x9e>
    1b4a:	84 e1       	ldi	r24, 0x14	; 20
			if(menuSelection == 0){
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	07 d2       	rcall	.+1038   	; 0x1f5e <_Z6mTimeri>
				valueLabel = "Max:";
    1b50:	11 11       	cpse	r17, r1
    1b52:	0b c0       	rjmp	.+22     	; 0x1b6a <_Z18stepperCalibrationv+0xc2>
    1b54:	90 92 36 06 	sts	0x0636, r9	; 0x800636 <valueLabel+0x1>
				calibSelectedValue = &stepperMaxDelay;
    1b58:	80 92 35 06 	sts	0x0635, r8	; 0x800635 <valueLabel>
    1b5c:	8e e0       	ldi	r24, 0x0E	; 14
    1b5e:	91 e0       	ldi	r25, 0x01	; 1
    1b60:	90 93 3b 06 	sts	0x063B, r25	; 0x80063b <calibSelectedValue+0x1>
    1b64:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <calibSelectedValue>
			}
			else if(menuSelection == 1){
    1b68:	1d c0       	rjmp	.+58     	; 0x1ba4 <_Z18stepperCalibrationv+0xfc>
				valueLabel = "IncrValue";
    1b6a:	11 30       	cpi	r17, 0x01	; 1
    1b6c:	49 f4       	brne	.+18     	; 0x1b80 <_Z18stepperCalibrationv+0xd8>
    1b6e:	50 92 36 06 	sts	0x0636, r5	; 0x800636 <valueLabel+0x1>
				calibSelectedValue = &stepperAccelRate;
    1b72:	40 92 35 06 	sts	0x0635, r4	; 0x800635 <valueLabel>
    1b76:	70 92 3b 06 	sts	0x063B, r7	; 0x80063b <calibSelectedValue+0x1>
    1b7a:	60 92 3a 06 	sts	0x063A, r6	; 0x80063a <calibSelectedValue>
			}
			else if(menuSelection == 2){
    1b7e:	12 c0       	rjmp	.+36     	; 0x1ba4 <_Z18stepperCalibrationv+0xfc>
				valueLabel = "Min:";
    1b80:	12 30       	cpi	r17, 0x02	; 2
    1b82:	81 f4       	brne	.+32     	; 0x1ba4 <_Z18stepperCalibrationv+0xfc>
    1b84:	68 e1       	ldi	r22, 0x18	; 24
    1b86:	72 e0       	ldi	r23, 0x02	; 2
    1b88:	70 93 36 06 	sts	0x0636, r23	; 0x800636 <valueLabel+0x1>
				calibSelectedValue = &stepperMinDelay;
    1b8c:	60 93 35 06 	sts	0x0635, r22	; 0x800635 <valueLabel>
    1b90:	30 92 3b 06 	sts	0x063B, r3	; 0x80063b <calibSelectedValue+0x1>
			}
			goto valueSelection;
		}
		else if(JS_RIGHT_PRESSED){
    1b94:	20 92 3a 06 	sts	0x063A, r2	; 0x80063a <calibSelectedValue>
			goto startStepperTest;
		}
		menu3Display(menuSelection);
    1b98:	05 c0       	rjmp	.+10     	; 0x1ba4 <_Z18stepperCalibrationv+0xfc>
    1b9a:	64 9b       	sbis	0x0c, 4	; 12
    1b9c:	6d c0       	rjmp	.+218    	; 0x1c78 <_Z18stepperCalibrationv+0x1d0>
	char menuSelection;
	//Stepper test loop for delay 
	stepperSettings:
	menuSelection = 0;
	menu3Display(menuSelection);
	while(1){
    1b9e:	81 2f       	mov	r24, r17
		}
		menu3Display(menuSelection);
	}
	valueSelection:
	//Change from ADC1 to ADC 2 *** must change back
	ADMUX = (ADMUX & ~_BV(MUX0)) | _BV(MUX1);
    1ba0:	7a dd       	rcall	.-1292   	; 0x1696 <_Z12menu3Displayh>
    1ba2:	ae cf       	rjmp	.-164    	; 0x1b00 <_Z18stepperCalibrationv+0x58>
    1ba4:	f7 01       	movw	r30, r14
    1ba6:	80 81       	ld	r24, Z
    1ba8:	8c 7f       	andi	r24, 0xFC	; 252
	//Left shifted
	ADMUX |= _BV(ADLAR);
    1baa:	82 60       	ori	r24, 0x02	; 2
    1bac:	80 83       	st	Z, r24
    1bae:	80 81       	ld	r24, Z
	//Disable ADC interrupt
	ADCSRA &= ~_BV(ADIE);
    1bb0:	80 62       	ori	r24, 0x20	; 32
    1bb2:	80 83       	st	Z, r24
    1bb4:	88 81       	ld	r24, Y
	
	menuSelection = 0;
	menuDisplayValue(*calibSelectedValue, valueLabel);
    1bb6:	87 7f       	andi	r24, 0xF7	; 247
    1bb8:	88 83       	st	Y, r24
    1bba:	e0 91 3a 06 	lds	r30, 0x063A	; 0x80063a <calibSelectedValue>
    1bbe:	f0 91 3b 06 	lds	r31, 0x063B	; 0x80063b <calibSelectedValue+0x1>
    1bc2:	80 81       	ld	r24, Z
    1bc4:	60 91 35 06 	lds	r22, 0x0635	; 0x800635 <valueLabel>
    1bc8:	70 91 36 06 	lds	r23, 0x0636	; 0x800636 <valueLabel+0x1>
	while(1){
		//Start ADC conversion
		ADCSRA |= _BV(ADSC);
    1bcc:	44 dd       	rcall	.-1400   	; 0x1656 <_Z16menuDisplayValuehPKc>
    1bce:	88 81       	ld	r24, Y
		while(ADCSRA & _BV(ADSC)){}; //wait for conversion to finish
    1bd0:	80 64       	ori	r24, 0x40	; 64
    1bd2:	88 83       	st	Y, r24
    1bd4:	88 81       	ld	r24, Y
		
		if(adcEightCount < 8){
    1bd6:	86 fd       	sbrc	r24, 6
    1bd8:	fd cf       	rjmp	.-6      	; 0x1bd4 <_Z18stepperCalibrationv+0x12c>
    1bda:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <adcEightCount>
			adcEightAverage = adcEightAverage + ADCH - (adcEightAverage >> 3); //MA[n]* = MA[n-1]* + x[n] - MA[n-1]*/N
    1bde:	88 30       	cpi	r24, 0x08	; 8
    1be0:	d0 f4       	brcc	.+52     	; 0x1c16 <_Z18stepperCalibrationv+0x16e>
    1be2:	f5 01       	movw	r30, r10
    1be4:	90 81       	ld	r25, Z
    1be6:	20 91 38 06 	lds	r18, 0x0638	; 0x800638 <adcEightAverage>
    1bea:	30 91 39 06 	lds	r19, 0x0639	; 0x800639 <adcEightAverage+0x1>
    1bee:	a9 01       	movw	r20, r18
    1bf0:	49 0f       	add	r20, r25
    1bf2:	51 1d       	adc	r21, r1
    1bf4:	36 95       	lsr	r19
    1bf6:	27 95       	ror	r18
    1bf8:	36 95       	lsr	r19
    1bfa:	27 95       	ror	r18
    1bfc:	36 95       	lsr	r19
    1bfe:	27 95       	ror	r18
    1c00:	ba 01       	movw	r22, r20
    1c02:	62 1b       	sub	r22, r18
    1c04:	73 0b       	sbc	r23, r19
    1c06:	70 93 39 06 	sts	0x0639, r23	; 0x800639 <adcEightAverage+0x1>
			adcEightCount++;
    1c0a:	60 93 38 06 	sts	0x0638, r22	; 0x800638 <adcEightAverage>
    1c0e:	8f 5f       	subi	r24, 0xFF	; 255
    1c10:	80 93 37 06 	sts	0x0637, r24	; 0x800637 <adcEightCount>
		}
		else{
			//adcEightAverage >>= 3;	//MA*/N
			*calibSelectedValue = adcEightAverage >> 3;
    1c14:	1b c0       	rjmp	.+54     	; 0x1c4c <_Z18stepperCalibrationv+0x1a4>
    1c16:	e0 91 3a 06 	lds	r30, 0x063A	; 0x80063a <calibSelectedValue>
    1c1a:	f0 91 3b 06 	lds	r31, 0x063B	; 0x80063b <calibSelectedValue+0x1>
    1c1e:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <adcEightAverage>
    1c22:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <adcEightAverage+0x1>
    1c26:	96 95       	lsr	r25
    1c28:	87 95       	ror	r24
    1c2a:	96 95       	lsr	r25
    1c2c:	87 95       	ror	r24
			menuDisplayValue(*calibSelectedValue, valueLabel);
    1c2e:	96 95       	lsr	r25
    1c30:	87 95       	ror	r24
    1c32:	80 83       	st	Z, r24
    1c34:	e0 91 3a 06 	lds	r30, 0x063A	; 0x80063a <calibSelectedValue>
    1c38:	f0 91 3b 06 	lds	r31, 0x063B	; 0x80063b <calibSelectedValue+0x1>
    1c3c:	80 81       	ld	r24, Z
    1c3e:	60 91 35 06 	lds	r22, 0x0635	; 0x800635 <valueLabel>
			
			adcEightCount = 0;
		}
		if(JS_LEFT_PRESSED){
    1c42:	70 91 36 06 	lds	r23, 0x0636	; 0x800636 <valueLabel+0x1>
			mTimer(BUTTON_DEBOUNCE_DELAY);
    1c46:	07 dd       	rcall	.-1522   	; 0x1656 <_Z16menuDisplayValuehPKc>
    1c48:	10 92 37 06 	sts	0x0637, r1	; 0x800637 <adcEightCount>
    1c4c:	1e 99       	sbic	0x03, 6	; 3
			while(JS_LEFT_PRESSED){};
    1c4e:	bf cf       	rjmp	.-130    	; 0x1bce <_Z18stepperCalibrationv+0x126>
    1c50:	84 e1       	ldi	r24, 0x14	; 20
			mTimer(BUTTON_DEBOUNCE_DELAY);
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	84 d1       	rcall	.+776    	; 0x1f5e <_Z6mTimeri>
    1c56:	1e 9b       	sbis	0x03, 6	; 3
			//Change back from ADC 2 to 1
			ADMUX = (ADMUX & ~_BV(MUX1)) | _BV(MUX0);
    1c58:	fe cf       	rjmp	.-4      	; 0x1c56 <_Z18stepperCalibrationv+0x1ae>
    1c5a:	84 e1       	ldi	r24, 0x14	; 20
			//Turn off left shifted
			ADMUX &= ~_BV(ADLAR);
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	7f d1       	rcall	.+766    	; 0x1f5e <_Z6mTimeri>
    1c60:	f7 01       	movw	r30, r14
			//Reenable ADC interrupt
			ADCSRA |= _BV(ADIE);
    1c62:	80 81       	ld	r24, Z
    1c64:	8c 7f       	andi	r24, 0xFC	; 252
    1c66:	81 60       	ori	r24, 0x01	; 1
		}

	}
	
	startStepperTest:
	menu3Running();
    1c68:	80 83       	st	Z, r24
	homeStepper();
    1c6a:	80 81       	ld	r24, Z
    1c6c:	8f 7d       	andi	r24, 0xDF	; 223
	startStepper();
    1c6e:	80 83       	st	Z, r24
	stepGoalPosition = 0;
    1c70:	88 81       	ld	r24, Y
    1c72:	88 60       	ori	r24, 0x08	; 8
    1c74:	88 83       	st	Y, r24
    1c76:	41 cf       	rjmp	.-382    	; 0x1afa <_Z18stepperCalibrationv+0x52>
	sei();
    1c78:	71 dd       	rcall	.-1310   	; 0x175c <_Z12menu3Runningv>
	while(1){
		//rotateStepperToGoal();
		if((PINE & JS_DOWN_PIN) == 0){
    1c7a:	03 df       	rcall	.-506    	; 0x1a82 <_Z11homeStepperv>
    1c7c:	7c de       	rcall	.-776    	; 0x1976 <_Z12startStepperv>
			mTimer(20);
    1c7e:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <stepGoalPosition+0x1>
    1c82:	10 92 3f 06 	sts	0x063F, r1	; 0x80063f <stepGoalPosition>
			while((PINE & JS_DOWN_PIN) == 0){};
    1c86:	78 94       	sei
    1c88:	65 99       	sbic	0x0c, 5	; 12
			mTimer(20);
    1c8a:	1b c0       	rjmp	.+54     	; 0x1cc2 <_Z18stepperCalibrationv+0x21a>
    1c8c:	84 e1       	ldi	r24, 0x14	; 20
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	66 d1       	rcall	.+716    	; 0x1f5e <_Z6mTimeri>
			stepGoalPosition -=50;
    1c92:	65 9b       	sbis	0x0c, 5	; 12
    1c94:	fe cf       	rjmp	.-4      	; 0x1c92 <_Z18stepperCalibrationv+0x1ea>
    1c96:	84 e1       	ldi	r24, 0x14	; 20
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	61 d1       	rcall	.+706    	; 0x1f5e <_Z6mTimeri>
    1c9c:	80 91 3f 06 	lds	r24, 0x063F	; 0x80063f <stepGoalPosition>
    1ca0:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <stepGoalPosition+0x1>
			if(stepGoalPosition < 0){
    1ca4:	c2 97       	sbiw	r24, 0x32	; 50
    1ca6:	90 93 40 06 	sts	0x0640, r25	; 0x800640 <stepGoalPosition+0x1>
    1caa:	80 93 3f 06 	sts	0x063F, r24	; 0x80063f <stepGoalPosition>
				stepGoalPosition = 150;
    1cae:	80 91 3f 06 	lds	r24, 0x063F	; 0x80063f <stepGoalPosition>
    1cb2:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <stepGoalPosition+0x1>
			}
		}
		//If Joystick Up -> highlight Start
		if((PINB & JS_UP_PIN) == 0){
    1cb6:	99 23       	and	r25, r25
			mTimer(20);
    1cb8:	24 f4       	brge	.+8      	; 0x1cc2 <_Z18stepperCalibrationv+0x21a>
    1cba:	d0 92 40 06 	sts	0x0640, r13	; 0x800640 <stepGoalPosition+0x1>
    1cbe:	c0 92 3f 06 	sts	0x063F, r12	; 0x80063f <stepGoalPosition>
			while((PINB & JS_UP_PIN) == 0){};
    1cc2:	1f 99       	sbic	0x03, 7	; 3
			mTimer(20);
    1cc4:	1c c0       	rjmp	.+56     	; 0x1cfe <_Z18stepperCalibrationv+0x256>
    1cc6:	84 e1       	ldi	r24, 0x14	; 20
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	49 d1       	rcall	.+658    	; 0x1f5e <_Z6mTimeri>
			stepGoalPosition +=50;
    1ccc:	1f 9b       	sbis	0x03, 7	; 3
    1cce:	fe cf       	rjmp	.-4      	; 0x1ccc <_Z18stepperCalibrationv+0x224>
    1cd0:	84 e1       	ldi	r24, 0x14	; 20
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	44 d1       	rcall	.+648    	; 0x1f5e <_Z6mTimeri>
    1cd6:	80 91 3f 06 	lds	r24, 0x063F	; 0x80063f <stepGoalPosition>
    1cda:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <stepGoalPosition+0x1>
			if(stepGoalPosition > 199){
    1cde:	c2 96       	adiw	r24, 0x32	; 50
    1ce0:	90 93 40 06 	sts	0x0640, r25	; 0x800640 <stepGoalPosition+0x1>
    1ce4:	80 93 3f 06 	sts	0x063F, r24	; 0x80063f <stepGoalPosition>
    1ce8:	80 91 3f 06 	lds	r24, 0x063F	; 0x80063f <stepGoalPosition>
				stepGoalPosition = 0;
    1cec:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <stepGoalPosition+0x1>
    1cf0:	88 3c       	cpi	r24, 0xC8	; 200
			}
		}
		if((JS_LEFT_PORT & JS_LEFT_PIN) == 0){
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	24 f0       	brlt	.+8      	; 0x1cfe <_Z18stepperCalibrationv+0x256>
			cli();
    1cf6:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <stepGoalPosition+0x1>
			goto stepperSettings;
		}
		menuDebugS();
    1cfa:	10 92 3f 06 	sts	0x063F, r1	; 0x80063f <stepGoalPosition>
	menu3Running();
	homeStepper();
	startStepper();
	stepGoalPosition = 0;
	sei();
	while(1){
    1cfe:	1e 99       	sbic	0x03, 6	; 3
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <_Z18stepperCalibrationv+0x25e>
    1d02:	f8 94       	cli
    1d04:	fa ce       	rjmp	.-524    	; 0x1afa <_Z18stepperCalibrationv+0x52>
    1d06:	dc db       	rcall	.-2120   	; 0x14c0 <_Z10menuDebugSv>
    1d08:	bf cf       	rjmp	.-130    	; 0x1c88 <_Z18stepperCalibrationv+0x1e0>

00001d0a <__vector_21>:
		}
		menuDebugS();
	}
}

ISR(TIMER0_COMPA_vect){
    1d0a:	1f 92       	push	r1
    1d0c:	0f 92       	push	r0
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	0f 92       	push	r0
    1d12:	11 24       	eor	r1, r1
    1d14:	0b b6       	in	r0, 0x3b	; 59
    1d16:	0f 92       	push	r0
    1d18:	2f 93       	push	r18
    1d1a:	3f 93       	push	r19
    1d1c:	4f 93       	push	r20
    1d1e:	5f 93       	push	r21
    1d20:	8f 93       	push	r24
    1d22:	9f 93       	push	r25
    1d24:	ef 93       	push	r30
    1d26:	ff 93       	push	r31
	
	unsigned char nextItem = 0;
	int difference =  stepGoalPosition - stepCurrentPosition;
    1d28:	80 91 3f 06 	lds	r24, 0x063F	; 0x80063f <stepGoalPosition>
    1d2c:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <stepGoalPosition+0x1>
    1d30:	20 91 41 06 	lds	r18, 0x0641	; 0x800641 <stepCurrentPosition>
    1d34:	30 91 42 06 	lds	r19, 0x0642	; 0x800642 <stepCurrentPosition+0x1>
    1d38:	82 1b       	sub	r24, r18
    1d3a:	93 0b       	sbc	r25, r19
	unsigned char shortAbsDifference = ((difference >= 0) ? difference : -difference);//abs(difference)
    1d3c:	9c 01       	movw	r18, r24
    1d3e:	22 f4       	brpl	.+8      	; 0x1d48 <__vector_21+0x3e>
    1d40:	22 27       	eor	r18, r18
    1d42:	33 27       	eor	r19, r19
    1d44:	28 1b       	sub	r18, r24
    1d46:	39 0b       	sbc	r19, r25
    1d48:	42 2f       	mov	r20, r18
	
	//Find circular shortest distance
	if(shortAbsDifference > 100){
    1d4a:	25 36       	cpi	r18, 0x65	; 101
    1d4c:	10 f0       	brcs	.+4      	; 0x1d52 <__vector_21+0x48>
		shortAbsDifference = 200 - shortAbsDifference;
    1d4e:	48 ec       	ldi	r20, 0xC8	; 200
    1d50:	42 1b       	sub	r20, r18
				delay
		else
			stepper ready
*/
	//////////PLACE BLOCK INTO BIN ONCE CLOSE ENOUGH
	if(shortAbsDifference < CLOSE_ENOUGH){
    1d52:	4f 30       	cpi	r20, 0x0F	; 15
    1d54:	08 f0       	brcs	.+2      	; 0x1d58 <__vector_21+0x4e>
    1d56:	6c c0       	rjmp	.+216    	; 0x1e30 <__vector_21+0x126>
		if(blockReady){
    1d58:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <__data_end>
    1d5c:	22 23       	and	r18, r18
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <__vector_21+0x58>
    1d60:	63 c0       	rjmp	.+198    	; 0x1e28 <__vector_21+0x11e>
			//////////MOTOR ON
			MOTOR_PORT = (MOTOR_PORT & ~MOTOR_PINS) | MOTOR_FORWARD;
    1d62:	22 b1       	in	r18, 0x02	; 2
    1d64:	2f 73       	andi	r18, 0x3F	; 63
    1d66:	20 64       	ori	r18, 0x40	; 64
    1d68:	22 b9       	out	0x02, r18	; 2
			blockReady = 0;
    1d6a:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__data_end>
			//////////COUNT NUMBER OF EACH SORTED
			if(reflQueue[frontOfQueue] == BLACK){
    1d6e:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <frontOfQueue>
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	e5 5d       	subi	r30, 0xD5	; 213
    1d76:	fd 4f       	sbci	r31, 0xFD	; 253
    1d78:	20 81       	ld	r18, Z
    1d7a:	21 11       	cpse	r18, r1
    1d7c:	06 c0       	rjmp	.+12     	; 0x1d8a <__vector_21+0x80>
				blackCount++;
    1d7e:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <blackCount>
    1d82:	2f 5f       	subi	r18, 0xFF	; 255
    1d84:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <blackCount>
    1d88:	29 c0       	rjmp	.+82     	; 0x1ddc <__vector_21+0xd2>
			}
			else if(reflQueue[frontOfQueue] == WHITE){
    1d8a:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <frontOfQueue>
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	e5 5d       	subi	r30, 0xD5	; 213
    1d92:	fd 4f       	sbci	r31, 0xFD	; 253
    1d94:	20 81       	ld	r18, Z
    1d96:	21 30       	cpi	r18, 0x01	; 1
    1d98:	31 f4       	brne	.+12     	; 0x1da6 <__vector_21+0x9c>
				whiteCount++;
    1d9a:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <whiteCount>
    1d9e:	2f 5f       	subi	r18, 0xFF	; 255
    1da0:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <whiteCount>
    1da4:	1b c0       	rjmp	.+54     	; 0x1ddc <__vector_21+0xd2>
			}
			else if(reflQueue[frontOfQueue] == STEEL){
    1da6:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <frontOfQueue>
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	e5 5d       	subi	r30, 0xD5	; 213
    1dae:	fd 4f       	sbci	r31, 0xFD	; 253
    1db0:	20 81       	ld	r18, Z
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	31 f4       	brne	.+12     	; 0x1dc2 <__vector_21+0xb8>
				steelCount++;
    1db6:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <steelCount>
    1dba:	2f 5f       	subi	r18, 0xFF	; 255
    1dbc:	20 93 24 02 	sts	0x0224, r18	; 0x800224 <steelCount>
    1dc0:	0d c0       	rjmp	.+26     	; 0x1ddc <__vector_21+0xd2>
			}
			else if(reflQueue[frontOfQueue] == ALUMINUM){
    1dc2:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <frontOfQueue>
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	e5 5d       	subi	r30, 0xD5	; 213
    1dca:	fd 4f       	sbci	r31, 0xFD	; 253
    1dcc:	20 81       	ld	r18, Z
    1dce:	23 30       	cpi	r18, 0x03	; 3
    1dd0:	29 f4       	brne	.+10     	; 0x1ddc <__vector_21+0xd2>
				aluminumCount++;
    1dd2:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <aluminumCount>
    1dd6:	2f 5f       	subi	r18, 0xFF	; 255
    1dd8:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <aluminumCount>
			}
			//////////DEQUEUE BLOCK
			if(reflQueueCount < 2){
    1ddc:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <reflQueueCount>
    1de0:	22 30       	cpi	r18, 0x02	; 2
    1de2:	18 f4       	brcc	.+6      	; 0x1dea <__vector_21+0xe0>
				reflQueueCount = 0;
    1de4:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <reflQueueCount>
    1de8:	25 c0       	rjmp	.+74     	; 0x1e34 <__vector_21+0x12a>
			}
			else{
				nextItem = (frontOfQueue+1) & 7;
    1dea:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <frontOfQueue>
    1dee:	2f 5f       	subi	r18, 0xFF	; 255
    1df0:	27 70       	andi	r18, 0x07	; 7
				
				if(reflQueue[frontOfQueue] != reflQueue[nextItem]){
    1df2:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <frontOfQueue>
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	e5 5d       	subi	r30, 0xD5	; 213
    1dfa:	fd 4f       	sbci	r31, 0xFD	; 253
    1dfc:	50 81       	ld	r21, Z
    1dfe:	e2 2f       	mov	r30, r18
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	e5 5d       	subi	r30, 0xD5	; 213
    1e04:	fd 4f       	sbci	r31, 0xFD	; 253
    1e06:	30 81       	ld	r19, Z
    1e08:	53 17       	cp	r21, r19
    1e0a:	19 f0       	breq	.+6      	; 0x1e12 <__vector_21+0x108>
					stepperDelay = 2;
    1e0c:	32 e0       	ldi	r19, 0x02	; 2
    1e0e:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <stepperDelay>
				}
				frontOfQueue = nextItem; //& 7 implements a rotating array pointer
    1e12:	20 93 29 02 	sts	0x0229, r18	; 0x800229 <frontOfQueue>
				reflQueueCount--;
    1e16:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <reflQueueCount>
    1e1a:	21 50       	subi	r18, 0x01	; 1
    1e1c:	20 93 2a 02 	sts	0x022A, r18	; 0x80022a <reflQueueCount>
				reflQueueChange = 1;
    1e20:	21 e0       	ldi	r18, 0x01	; 1
    1e22:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <reflQueueChange>
    1e26:	06 c0       	rjmp	.+12     	; 0x1e34 <__vector_21+0x12a>
			}
		} 
		else{
			stepperReady = 1;
    1e28:	21 e0       	ldi	r18, 0x01	; 1
    1e2a:	20 93 3d 06 	sts	0x063D, r18	; 0x80063d <stepperReady>
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <__vector_21+0x12a>
		}
	}
	else{
		stepperReady = 0;
    1e30:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <stepperReady>
	}
	//////////MOVE TOWARDS GOAL POSITION
	if(((difference > 0) && (difference < 100)) || (difference < -100)){//***change to make up for faster direction of stepper
    1e34:	9c 01       	movw	r18, r24
    1e36:	21 50       	subi	r18, 0x01	; 1
    1e38:	31 09       	sbc	r19, r1
    1e3a:	23 36       	cpi	r18, 0x63	; 99
    1e3c:	31 05       	cpc	r19, r1
    1e3e:	20 f0       	brcs	.+8      	; 0x1e48 <__vector_21+0x13e>
    1e40:	8c 39       	cpi	r24, 0x9C	; 156
    1e42:	2f ef       	ldi	r18, 0xFF	; 255
    1e44:	92 07       	cpc	r25, r18
    1e46:	dc f4       	brge	.+54     	; 0x1e7e <__vector_21+0x174>
		stepCurrentPosition++;
    1e48:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <stepCurrentPosition>
    1e4c:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <stepCurrentPosition+0x1>
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <stepCurrentPosition+0x1>
    1e56:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <stepCurrentPosition>
		if(stepCurrentPosition > 199){
    1e5a:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <stepCurrentPosition>
    1e5e:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <stepCurrentPosition+0x1>
    1e62:	88 3c       	cpi	r24, 0xC8	; 200
    1e64:	91 05       	cpc	r25, r1
    1e66:	24 f0       	brlt	.+8      	; 0x1e70 <__vector_21+0x166>
			stepCurrentPosition = 0;
    1e68:	10 92 42 06 	sts	0x0642, r1	; 0x800642 <stepCurrentPosition+0x1>
    1e6c:	10 92 41 06 	sts	0x0641, r1	; 0x800641 <stepCurrentPosition>
		}
		stepAPosition = (stepAPosition + 1) & 3; //& 3 is a bitwise version of %4, creates a circular loop through stepArray	
    1e70:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <stepAPosition>
    1e74:	8f 5f       	subi	r24, 0xFF	; 255
    1e76:	83 70       	andi	r24, 0x03	; 3
    1e78:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <stepAPosition>
    1e7c:	24 c0       	rjmp	.+72     	; 0x1ec6 <__vector_21+0x1bc>
	}
	else if(((difference < 0) && (difference >= -100)) || (difference >= 100)){
    1e7e:	9c 01       	movw	r18, r24
    1e80:	2c 59       	subi	r18, 0x9C	; 156
    1e82:	3f 4f       	sbci	r19, 0xFF	; 255
    1e84:	24 36       	cpi	r18, 0x64	; 100
    1e86:	31 05       	cpc	r19, r1
    1e88:	18 f0       	brcs	.+6      	; 0x1e90 <__vector_21+0x186>
    1e8a:	84 36       	cpi	r24, 0x64	; 100
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	dc f0       	brlt	.+54     	; 0x1ec6 <__vector_21+0x1bc>
		stepCurrentPosition--;
    1e90:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <stepCurrentPosition>
    1e94:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <stepCurrentPosition+0x1>
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <stepCurrentPosition+0x1>
    1e9e:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <stepCurrentPosition>
		if(stepCurrentPosition < 0){
    1ea2:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <stepCurrentPosition>
    1ea6:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <stepCurrentPosition+0x1>
    1eaa:	99 23       	and	r25, r25
    1eac:	34 f4       	brge	.+12     	; 0x1eba <__vector_21+0x1b0>
			stepCurrentPosition = 199;
    1eae:	87 ec       	ldi	r24, 0xC7	; 199
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <stepCurrentPosition+0x1>
    1eb6:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <stepCurrentPosition>
		}
		//***
		stepAPosition = (stepAPosition - 1) & 3; //& 3 is a bitwise %4, creates a circular loop through stepArray
    1eba:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <stepAPosition>
    1ebe:	81 50       	subi	r24, 0x01	; 1
    1ec0:	83 70       	andi	r24, 0x03	; 3
    1ec2:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <stepAPosition>
	}

	PORTA = (PORTA & 0b11000000) | stepArray[stepAPosition];
    1ec6:	82 b1       	in	r24, 0x02	; 2
    1ec8:	e0 91 3e 06 	lds	r30, 0x063E	; 0x80063e <stepAPosition>
    1ecc:	80 7c       	andi	r24, 0xC0	; 192
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	e3 5e       	subi	r30, 0xE3	; 227
    1ed2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ed4:	90 81       	ld	r25, Z
    1ed6:	89 2b       	or	r24, r25
    1ed8:	82 b9       	out	0x02, r24	; 2

	//////////ACCELERATION/DECELERATION ***
	if(shortAbsDifference > 30 && stepperDelay > stepperMinDelay){//MIN_STEPPER_DELAY){
    1eda:	4f 31       	cpi	r20, 0x1F	; 31
    1edc:	d0 f0       	brcs	.+52     	; 0x1f12 <__vector_21+0x208>
    1ede:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <stepperDelay>
    1ee2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <stepperMinDelay>
    1ee6:	89 17       	cp	r24, r25
    1ee8:	60 f0       	brcs	.+24     	; 0x1f02 <__vector_21+0x1f8>
    1eea:	13 c0       	rjmp	.+38     	; 0x1f12 <__vector_21+0x208>
		stepperDelay -= stepperAccelRate; // STEPPER_ACCELERATION_RATE; 
	}
	else if(shortAbsDifference < NUMBER_STEPS_DECELERATION && stepperDelay <= stepperMaxDelay){//MAX_STEPPER_DELAY){
    1eec:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <stepperDelay>
    1ef0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <stepperMaxDelay>
    1ef4:	89 17       	cp	r24, r25
    1ef6:	80 f4       	brcc	.+32     	; 0x1f18 <__vector_21+0x20e>
		stepperDelay += stepperAccelRate; //STEPPER_ACCELERATION_RATE;
	}
	//Set the initial value of the timer counter to 0
	TCNT0 = 0x0;
    1ef8:	16 bc       	out	0x26, r1	; 38
	//Sets delay till next step
	OCR0A = stepperDelay;
    1efa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <stepperDelay>
    1efe:	87 bd       	out	0x27, r24	; 39
    1f00:	13 c0       	rjmp	.+38     	; 0x1f28 <__vector_21+0x21e>

	PORTA = (PORTA & 0b11000000) | stepArray[stepAPosition];

	//////////ACCELERATION/DECELERATION ***
	if(shortAbsDifference > 30 && stepperDelay > stepperMinDelay){//MIN_STEPPER_DELAY){
		stepperDelay -= stepperAccelRate; // STEPPER_ACCELERATION_RATE; 
    1f02:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <stepperAccelRate>
    1f06:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <stepperDelay>
    1f0a:	89 1b       	sub	r24, r25
    1f0c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <stepperDelay>
    1f10:	f3 cf       	rjmp	.-26     	; 0x1ef8 <__vector_21+0x1ee>
	}
	else if(shortAbsDifference < NUMBER_STEPS_DECELERATION && stepperDelay <= stepperMaxDelay){//MAX_STEPPER_DELAY){
    1f12:	46 30       	cpi	r20, 0x06	; 6
    1f14:	58 f3       	brcs	.-42     	; 0x1eec <__vector_21+0x1e2>
    1f16:	f0 cf       	rjmp	.-32     	; 0x1ef8 <__vector_21+0x1ee>
		stepperDelay += stepperAccelRate; //STEPPER_ACCELERATION_RATE;
    1f18:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <stepperAccelRate>
    1f1c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <stepperDelay>
    1f20:	89 0f       	add	r24, r25
    1f22:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <stepperDelay>
    1f26:	e8 cf       	rjmp	.-48     	; 0x1ef8 <__vector_21+0x1ee>
	}
	//Set the initial value of the timer counter to 0
	TCNT0 = 0x0;
	//Sets delay till next step
	OCR0A = stepperDelay;
    1f28:	ff 91       	pop	r31
    1f2a:	ef 91       	pop	r30
    1f2c:	9f 91       	pop	r25
    1f2e:	8f 91       	pop	r24
    1f30:	5f 91       	pop	r21
    1f32:	4f 91       	pop	r20
    1f34:	3f 91       	pop	r19
    1f36:	2f 91       	pop	r18
    1f38:	0f 90       	pop	r0
    1f3a:	0b be       	out	0x3b, r0	; 59
    1f3c:	0f 90       	pop	r0
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	0f 90       	pop	r0
    1f42:	1f 90       	pop	r1
    1f44:	18 95       	reti

00001f46 <_Z9initTimerv>:
#include "timer.h"

void initTimer(void){
	//Set the waveform generation mode bit to clear timer
	//on Compare Math mode (CTC) only
	TCCR1B |= _BV(WGM12);
    1f46:	e1 e8       	ldi	r30, 0x81	; 129
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	88 60       	ori	r24, 0x08	; 8
    1f4e:	80 83       	st	Z, r24
	
	//Set output compare register for 1000 cycles (1 ms)
	OCR1A = 0x3e8;
    1f50:	88 ee       	ldi	r24, 0xE8	; 232
    1f52:	93 e0       	ldi	r25, 0x03	; 3
    1f54:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1f58:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1f5c:	08 95       	ret

00001f5e <_Z6mTimeri>:
}

//Timer function
void mTimer(int count){
    1f5e:	ac 01       	movw	r20, r24
	int i = 0;
	
	//Enable
	//Sets bit 0 of the Timer/Counter control register (prescaler)
	//CS = 0b010 (8 MHz Clock prescaled by 1/8)
	TCCR1B |= _BV(CS11);
    1f60:	e1 e8       	ldi	r30, 0x81	; 129
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	90 81       	ld	r25, Z
    1f66:	92 60       	ori	r25, 0x02	; 2
    1f68:	90 83       	st	Z, r25
	
	//Set the initial value of the timer counter to 0
	TCNT1 = 0x0;
    1f6a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1f6e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	//Clear the interrupt flag and begin timer
	TIFR1 |= _BV(OCF1A);
    1f72:	b1 9a       	sbi	0x16, 1	; 22
	OCR1A = 0x3e8;
}

//Timer function
void mTimer(int count){
	int i = 0;
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
	
	//Clear the interrupt flag and begin timer
	TIFR1 |= _BV(OCF1A);
	
	//Poll the timer to determine when the timer has reached OCR1A
	while(i<count){
    1f78:	24 17       	cp	r18, r20
    1f7a:	35 07       	cpc	r19, r21
    1f7c:	44 f4       	brge	.+16     	; 0x1f8e <_Z6mTimeri+0x30>

		if((TIFR1 & 0x02) == 0x02){
    1f7e:	b1 99       	sbic	0x16, 1	; 22
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <_Z6mTimeri+0x28>
    1f82:	b1 9b       	sbis	0x16, 1	; 22
    1f84:	fe cf       	rjmp	.-4      	; 0x1f82 <_Z6mTimeri+0x24>
			//Clear the interrupt flag by writing a one to the bit
			TIFR1 |= _BV(OCF1A);
    1f86:	b1 9a       	sbi	0x16, 1	; 22
			
			i++; //Increment the loop counter
    1f88:	2f 5f       	subi	r18, 0xFF	; 255
    1f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8c:	f5 cf       	rjmp	.-22     	; 0x1f78 <_Z6mTimeri+0x1a>
		}
	}
	TCCR1B &= ~DISABLE_TIMER1;
    1f8e:	e1 e8       	ldi	r30, 0x81	; 129
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	88 7f       	andi	r24, 0xF8	; 248
    1f96:	80 83       	st	Z, r24
    1f98:	08 95       	ret

00001f9a <__tablejump2__>:
    1f9a:	ee 0f       	add	r30, r30
    1f9c:	ff 1f       	adc	r31, r31
    1f9e:	00 24       	eor	r0, r0
    1fa0:	00 1c       	adc	r0, r0
    1fa2:	0b be       	out	0x3b, r0	; 59
    1fa4:	07 90       	elpm	r0, Z+
    1fa6:	f6 91       	elpm	r31, Z
    1fa8:	e0 2d       	mov	r30, r0
    1faa:	09 94       	ijmp

00001fac <sprintf>:
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	2e 97       	sbiw	r28, 0x0e	; 14
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	de bf       	out	0x3e, r29	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	cd bf       	out	0x3d, r28	; 61
    1fc4:	0d 89       	ldd	r16, Y+21	; 0x15
    1fc6:	1e 89       	ldd	r17, Y+22	; 0x16
    1fc8:	86 e0       	ldi	r24, 0x06	; 6
    1fca:	8c 83       	std	Y+4, r24	; 0x04
    1fcc:	1a 83       	std	Y+2, r17	; 0x02
    1fce:	09 83       	std	Y+1, r16	; 0x01
    1fd0:	8f ef       	ldi	r24, 0xFF	; 255
    1fd2:	9f e7       	ldi	r25, 0x7F	; 127
    1fd4:	9e 83       	std	Y+6, r25	; 0x06
    1fd6:	8d 83       	std	Y+5, r24	; 0x05
    1fd8:	ae 01       	movw	r20, r28
    1fda:	47 5e       	subi	r20, 0xE7	; 231
    1fdc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fde:	6f 89       	ldd	r22, Y+23	; 0x17
    1fe0:	78 8d       	ldd	r23, Y+24	; 0x18
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	01 96       	adiw	r24, 0x01	; 1
    1fe6:	10 d0       	rcall	.+32     	; 0x2008 <vfprintf>
    1fe8:	ef 81       	ldd	r30, Y+7	; 0x07
    1fea:	f8 85       	ldd	r31, Y+8	; 0x08
    1fec:	e0 0f       	add	r30, r16
    1fee:	f1 1f       	adc	r31, r17
    1ff0:	10 82       	st	Z, r1
    1ff2:	2e 96       	adiw	r28, 0x0e	; 14
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	08 95       	ret

00002008 <vfprintf>:
    2008:	2f 92       	push	r2
    200a:	3f 92       	push	r3
    200c:	4f 92       	push	r4
    200e:	5f 92       	push	r5
    2010:	6f 92       	push	r6
    2012:	7f 92       	push	r7
    2014:	8f 92       	push	r8
    2016:	9f 92       	push	r9
    2018:	af 92       	push	r10
    201a:	bf 92       	push	r11
    201c:	cf 92       	push	r12
    201e:	df 92       	push	r13
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	2b 97       	sbiw	r28, 0x0b	; 11
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	6c 01       	movw	r12, r24
    203e:	7b 01       	movw	r14, r22
    2040:	8a 01       	movw	r16, r20
    2042:	fc 01       	movw	r30, r24
    2044:	17 82       	std	Z+7, r1	; 0x07
    2046:	16 82       	std	Z+6, r1	; 0x06
    2048:	83 81       	ldd	r24, Z+3	; 0x03
    204a:	81 ff       	sbrs	r24, 1
    204c:	bf c1       	rjmp	.+894    	; 0x23cc <__stack+0x2cd>
    204e:	ce 01       	movw	r24, r28
    2050:	01 96       	adiw	r24, 0x01	; 1
    2052:	3c 01       	movw	r6, r24
    2054:	f6 01       	movw	r30, r12
    2056:	93 81       	ldd	r25, Z+3	; 0x03
    2058:	f7 01       	movw	r30, r14
    205a:	93 fd       	sbrc	r25, 3
    205c:	85 91       	lpm	r24, Z+
    205e:	93 ff       	sbrs	r25, 3
    2060:	81 91       	ld	r24, Z+
    2062:	7f 01       	movw	r14, r30
    2064:	88 23       	and	r24, r24
    2066:	09 f4       	brne	.+2      	; 0x206a <vfprintf+0x62>
    2068:	ad c1       	rjmp	.+858    	; 0x23c4 <__stack+0x2c5>
    206a:	85 32       	cpi	r24, 0x25	; 37
    206c:	39 f4       	brne	.+14     	; 0x207c <vfprintf+0x74>
    206e:	93 fd       	sbrc	r25, 3
    2070:	85 91       	lpm	r24, Z+
    2072:	93 ff       	sbrs	r25, 3
    2074:	81 91       	ld	r24, Z+
    2076:	7f 01       	movw	r14, r30
    2078:	85 32       	cpi	r24, 0x25	; 37
    207a:	21 f4       	brne	.+8      	; 0x2084 <vfprintf+0x7c>
    207c:	b6 01       	movw	r22, r12
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	d6 d1       	rcall	.+940    	; 0x242e <fputc>
    2082:	e8 cf       	rjmp	.-48     	; 0x2054 <vfprintf+0x4c>
    2084:	91 2c       	mov	r9, r1
    2086:	21 2c       	mov	r2, r1
    2088:	31 2c       	mov	r3, r1
    208a:	ff e1       	ldi	r31, 0x1F	; 31
    208c:	f3 15       	cp	r31, r3
    208e:	d8 f0       	brcs	.+54     	; 0x20c6 <vfprintf+0xbe>
    2090:	8b 32       	cpi	r24, 0x2B	; 43
    2092:	79 f0       	breq	.+30     	; 0x20b2 <vfprintf+0xaa>
    2094:	38 f4       	brcc	.+14     	; 0x20a4 <vfprintf+0x9c>
    2096:	80 32       	cpi	r24, 0x20	; 32
    2098:	79 f0       	breq	.+30     	; 0x20b8 <vfprintf+0xb0>
    209a:	83 32       	cpi	r24, 0x23	; 35
    209c:	a1 f4       	brne	.+40     	; 0x20c6 <vfprintf+0xbe>
    209e:	23 2d       	mov	r18, r3
    20a0:	20 61       	ori	r18, 0x10	; 16
    20a2:	1d c0       	rjmp	.+58     	; 0x20de <vfprintf+0xd6>
    20a4:	8d 32       	cpi	r24, 0x2D	; 45
    20a6:	61 f0       	breq	.+24     	; 0x20c0 <vfprintf+0xb8>
    20a8:	80 33       	cpi	r24, 0x30	; 48
    20aa:	69 f4       	brne	.+26     	; 0x20c6 <vfprintf+0xbe>
    20ac:	23 2d       	mov	r18, r3
    20ae:	21 60       	ori	r18, 0x01	; 1
    20b0:	16 c0       	rjmp	.+44     	; 0x20de <vfprintf+0xd6>
    20b2:	83 2d       	mov	r24, r3
    20b4:	82 60       	ori	r24, 0x02	; 2
    20b6:	38 2e       	mov	r3, r24
    20b8:	e3 2d       	mov	r30, r3
    20ba:	e4 60       	ori	r30, 0x04	; 4
    20bc:	3e 2e       	mov	r3, r30
    20be:	2a c0       	rjmp	.+84     	; 0x2114 <__stack+0x15>
    20c0:	f3 2d       	mov	r31, r3
    20c2:	f8 60       	ori	r31, 0x08	; 8
    20c4:	1d c0       	rjmp	.+58     	; 0x2100 <__stack+0x1>
    20c6:	37 fc       	sbrc	r3, 7
    20c8:	2d c0       	rjmp	.+90     	; 0x2124 <__stack+0x25>
    20ca:	20 ed       	ldi	r18, 0xD0	; 208
    20cc:	28 0f       	add	r18, r24
    20ce:	2a 30       	cpi	r18, 0x0A	; 10
    20d0:	40 f0       	brcs	.+16     	; 0x20e2 <vfprintf+0xda>
    20d2:	8e 32       	cpi	r24, 0x2E	; 46
    20d4:	b9 f4       	brne	.+46     	; 0x2104 <__stack+0x5>
    20d6:	36 fc       	sbrc	r3, 6
    20d8:	75 c1       	rjmp	.+746    	; 0x23c4 <__stack+0x2c5>
    20da:	23 2d       	mov	r18, r3
    20dc:	20 64       	ori	r18, 0x40	; 64
    20de:	32 2e       	mov	r3, r18
    20e0:	19 c0       	rjmp	.+50     	; 0x2114 <__stack+0x15>
    20e2:	36 fe       	sbrs	r3, 6
    20e4:	06 c0       	rjmp	.+12     	; 0x20f2 <vfprintf+0xea>
    20e6:	8a e0       	ldi	r24, 0x0A	; 10
    20e8:	98 9e       	mul	r9, r24
    20ea:	20 0d       	add	r18, r0
    20ec:	11 24       	eor	r1, r1
    20ee:	92 2e       	mov	r9, r18
    20f0:	11 c0       	rjmp	.+34     	; 0x2114 <__stack+0x15>
    20f2:	ea e0       	ldi	r30, 0x0A	; 10
    20f4:	2e 9e       	mul	r2, r30
    20f6:	20 0d       	add	r18, r0
    20f8:	11 24       	eor	r1, r1
    20fa:	22 2e       	mov	r2, r18
    20fc:	f3 2d       	mov	r31, r3
    20fe:	f0 62       	ori	r31, 0x20	; 32
    2100:	3f 2e       	mov	r3, r31
    2102:	08 c0       	rjmp	.+16     	; 0x2114 <__stack+0x15>
    2104:	8c 36       	cpi	r24, 0x6C	; 108
    2106:	21 f4       	brne	.+8      	; 0x2110 <__stack+0x11>
    2108:	83 2d       	mov	r24, r3
    210a:	80 68       	ori	r24, 0x80	; 128
    210c:	38 2e       	mov	r3, r24
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <__stack+0x15>
    2110:	88 36       	cpi	r24, 0x68	; 104
    2112:	41 f4       	brne	.+16     	; 0x2124 <__stack+0x25>
    2114:	f7 01       	movw	r30, r14
    2116:	93 fd       	sbrc	r25, 3
    2118:	85 91       	lpm	r24, Z+
    211a:	93 ff       	sbrs	r25, 3
    211c:	81 91       	ld	r24, Z+
    211e:	7f 01       	movw	r14, r30
    2120:	81 11       	cpse	r24, r1
    2122:	b3 cf       	rjmp	.-154    	; 0x208a <vfprintf+0x82>
    2124:	98 2f       	mov	r25, r24
    2126:	9f 7d       	andi	r25, 0xDF	; 223
    2128:	95 54       	subi	r25, 0x45	; 69
    212a:	93 30       	cpi	r25, 0x03	; 3
    212c:	28 f4       	brcc	.+10     	; 0x2138 <__stack+0x39>
    212e:	0c 5f       	subi	r16, 0xFC	; 252
    2130:	1f 4f       	sbci	r17, 0xFF	; 255
    2132:	9f e3       	ldi	r25, 0x3F	; 63
    2134:	99 83       	std	Y+1, r25	; 0x01
    2136:	0d c0       	rjmp	.+26     	; 0x2152 <__stack+0x53>
    2138:	83 36       	cpi	r24, 0x63	; 99
    213a:	31 f0       	breq	.+12     	; 0x2148 <__stack+0x49>
    213c:	83 37       	cpi	r24, 0x73	; 115
    213e:	71 f0       	breq	.+28     	; 0x215c <__stack+0x5d>
    2140:	83 35       	cpi	r24, 0x53	; 83
    2142:	09 f0       	breq	.+2      	; 0x2146 <__stack+0x47>
    2144:	55 c0       	rjmp	.+170    	; 0x21f0 <__stack+0xf1>
    2146:	20 c0       	rjmp	.+64     	; 0x2188 <__stack+0x89>
    2148:	f8 01       	movw	r30, r16
    214a:	80 81       	ld	r24, Z
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	0e 5f       	subi	r16, 0xFE	; 254
    2150:	1f 4f       	sbci	r17, 0xFF	; 255
    2152:	88 24       	eor	r8, r8
    2154:	83 94       	inc	r8
    2156:	91 2c       	mov	r9, r1
    2158:	53 01       	movw	r10, r6
    215a:	12 c0       	rjmp	.+36     	; 0x2180 <__stack+0x81>
    215c:	28 01       	movw	r4, r16
    215e:	f2 e0       	ldi	r31, 0x02	; 2
    2160:	4f 0e       	add	r4, r31
    2162:	51 1c       	adc	r5, r1
    2164:	f8 01       	movw	r30, r16
    2166:	a0 80       	ld	r10, Z
    2168:	b1 80       	ldd	r11, Z+1	; 0x01
    216a:	36 fe       	sbrs	r3, 6
    216c:	03 c0       	rjmp	.+6      	; 0x2174 <__stack+0x75>
    216e:	69 2d       	mov	r22, r9
    2170:	70 e0       	ldi	r23, 0x00	; 0
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <__stack+0x79>
    2174:	6f ef       	ldi	r22, 0xFF	; 255
    2176:	7f ef       	ldi	r23, 0xFF	; 255
    2178:	c5 01       	movw	r24, r10
    217a:	4e d1       	rcall	.+668    	; 0x2418 <strnlen>
    217c:	4c 01       	movw	r8, r24
    217e:	82 01       	movw	r16, r4
    2180:	f3 2d       	mov	r31, r3
    2182:	ff 77       	andi	r31, 0x7F	; 127
    2184:	3f 2e       	mov	r3, r31
    2186:	15 c0       	rjmp	.+42     	; 0x21b2 <__stack+0xb3>
    2188:	28 01       	movw	r4, r16
    218a:	22 e0       	ldi	r18, 0x02	; 2
    218c:	42 0e       	add	r4, r18
    218e:	51 1c       	adc	r5, r1
    2190:	f8 01       	movw	r30, r16
    2192:	a0 80       	ld	r10, Z
    2194:	b1 80       	ldd	r11, Z+1	; 0x01
    2196:	36 fe       	sbrs	r3, 6
    2198:	03 c0       	rjmp	.+6      	; 0x21a0 <__stack+0xa1>
    219a:	69 2d       	mov	r22, r9
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <__stack+0xa5>
    21a0:	6f ef       	ldi	r22, 0xFF	; 255
    21a2:	7f ef       	ldi	r23, 0xFF	; 255
    21a4:	c5 01       	movw	r24, r10
    21a6:	2d d1       	rcall	.+602    	; 0x2402 <strnlen_P>
    21a8:	4c 01       	movw	r8, r24
    21aa:	f3 2d       	mov	r31, r3
    21ac:	f0 68       	ori	r31, 0x80	; 128
    21ae:	3f 2e       	mov	r3, r31
    21b0:	82 01       	movw	r16, r4
    21b2:	33 fc       	sbrc	r3, 3
    21b4:	19 c0       	rjmp	.+50     	; 0x21e8 <__stack+0xe9>
    21b6:	82 2d       	mov	r24, r2
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	88 16       	cp	r8, r24
    21bc:	99 06       	cpc	r9, r25
    21be:	a0 f4       	brcc	.+40     	; 0x21e8 <__stack+0xe9>
    21c0:	b6 01       	movw	r22, r12
    21c2:	80 e2       	ldi	r24, 0x20	; 32
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	33 d1       	rcall	.+614    	; 0x242e <fputc>
    21c8:	2a 94       	dec	r2
    21ca:	f5 cf       	rjmp	.-22     	; 0x21b6 <__stack+0xb7>
    21cc:	f5 01       	movw	r30, r10
    21ce:	37 fc       	sbrc	r3, 7
    21d0:	85 91       	lpm	r24, Z+
    21d2:	37 fe       	sbrs	r3, 7
    21d4:	81 91       	ld	r24, Z+
    21d6:	5f 01       	movw	r10, r30
    21d8:	b6 01       	movw	r22, r12
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	28 d1       	rcall	.+592    	; 0x242e <fputc>
    21de:	21 10       	cpse	r2, r1
    21e0:	2a 94       	dec	r2
    21e2:	21 e0       	ldi	r18, 0x01	; 1
    21e4:	82 1a       	sub	r8, r18
    21e6:	91 08       	sbc	r9, r1
    21e8:	81 14       	cp	r8, r1
    21ea:	91 04       	cpc	r9, r1
    21ec:	79 f7       	brne	.-34     	; 0x21cc <__stack+0xcd>
    21ee:	e1 c0       	rjmp	.+450    	; 0x23b2 <__stack+0x2b3>
    21f0:	84 36       	cpi	r24, 0x64	; 100
    21f2:	11 f0       	breq	.+4      	; 0x21f8 <__stack+0xf9>
    21f4:	89 36       	cpi	r24, 0x69	; 105
    21f6:	39 f5       	brne	.+78     	; 0x2246 <__stack+0x147>
    21f8:	f8 01       	movw	r30, r16
    21fa:	37 fe       	sbrs	r3, 7
    21fc:	07 c0       	rjmp	.+14     	; 0x220c <__stack+0x10d>
    21fe:	60 81       	ld	r22, Z
    2200:	71 81       	ldd	r23, Z+1	; 0x01
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	93 81       	ldd	r25, Z+3	; 0x03
    2206:	0c 5f       	subi	r16, 0xFC	; 252
    2208:	1f 4f       	sbci	r17, 0xFF	; 255
    220a:	08 c0       	rjmp	.+16     	; 0x221c <__stack+0x11d>
    220c:	60 81       	ld	r22, Z
    220e:	71 81       	ldd	r23, Z+1	; 0x01
    2210:	07 2e       	mov	r0, r23
    2212:	00 0c       	add	r0, r0
    2214:	88 0b       	sbc	r24, r24
    2216:	99 0b       	sbc	r25, r25
    2218:	0e 5f       	subi	r16, 0xFE	; 254
    221a:	1f 4f       	sbci	r17, 0xFF	; 255
    221c:	f3 2d       	mov	r31, r3
    221e:	ff 76       	andi	r31, 0x6F	; 111
    2220:	3f 2e       	mov	r3, r31
    2222:	97 ff       	sbrs	r25, 7
    2224:	09 c0       	rjmp	.+18     	; 0x2238 <__stack+0x139>
    2226:	90 95       	com	r25
    2228:	80 95       	com	r24
    222a:	70 95       	com	r23
    222c:	61 95       	neg	r22
    222e:	7f 4f       	sbci	r23, 0xFF	; 255
    2230:	8f 4f       	sbci	r24, 0xFF	; 255
    2232:	9f 4f       	sbci	r25, 0xFF	; 255
    2234:	f0 68       	ori	r31, 0x80	; 128
    2236:	3f 2e       	mov	r3, r31
    2238:	2a e0       	ldi	r18, 0x0A	; 10
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	a3 01       	movw	r20, r6
    223e:	33 d1       	rcall	.+614    	; 0x24a6 <__ultoa_invert>
    2240:	88 2e       	mov	r8, r24
    2242:	86 18       	sub	r8, r6
    2244:	44 c0       	rjmp	.+136    	; 0x22ce <__stack+0x1cf>
    2246:	85 37       	cpi	r24, 0x75	; 117
    2248:	31 f4       	brne	.+12     	; 0x2256 <__stack+0x157>
    224a:	23 2d       	mov	r18, r3
    224c:	2f 7e       	andi	r18, 0xEF	; 239
    224e:	b2 2e       	mov	r11, r18
    2250:	2a e0       	ldi	r18, 0x0A	; 10
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	25 c0       	rjmp	.+74     	; 0x22a0 <__stack+0x1a1>
    2256:	93 2d       	mov	r25, r3
    2258:	99 7f       	andi	r25, 0xF9	; 249
    225a:	b9 2e       	mov	r11, r25
    225c:	8f 36       	cpi	r24, 0x6F	; 111
    225e:	c1 f0       	breq	.+48     	; 0x2290 <__stack+0x191>
    2260:	18 f4       	brcc	.+6      	; 0x2268 <__stack+0x169>
    2262:	88 35       	cpi	r24, 0x58	; 88
    2264:	79 f0       	breq	.+30     	; 0x2284 <__stack+0x185>
    2266:	ae c0       	rjmp	.+348    	; 0x23c4 <__stack+0x2c5>
    2268:	80 37       	cpi	r24, 0x70	; 112
    226a:	19 f0       	breq	.+6      	; 0x2272 <__stack+0x173>
    226c:	88 37       	cpi	r24, 0x78	; 120
    226e:	21 f0       	breq	.+8      	; 0x2278 <__stack+0x179>
    2270:	a9 c0       	rjmp	.+338    	; 0x23c4 <__stack+0x2c5>
    2272:	e9 2f       	mov	r30, r25
    2274:	e0 61       	ori	r30, 0x10	; 16
    2276:	be 2e       	mov	r11, r30
    2278:	b4 fe       	sbrs	r11, 4
    227a:	0d c0       	rjmp	.+26     	; 0x2296 <__stack+0x197>
    227c:	fb 2d       	mov	r31, r11
    227e:	f4 60       	ori	r31, 0x04	; 4
    2280:	bf 2e       	mov	r11, r31
    2282:	09 c0       	rjmp	.+18     	; 0x2296 <__stack+0x197>
    2284:	34 fe       	sbrs	r3, 4
    2286:	0a c0       	rjmp	.+20     	; 0x229c <__stack+0x19d>
    2288:	29 2f       	mov	r18, r25
    228a:	26 60       	ori	r18, 0x06	; 6
    228c:	b2 2e       	mov	r11, r18
    228e:	06 c0       	rjmp	.+12     	; 0x229c <__stack+0x19d>
    2290:	28 e0       	ldi	r18, 0x08	; 8
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	05 c0       	rjmp	.+10     	; 0x22a0 <__stack+0x1a1>
    2296:	20 e1       	ldi	r18, 0x10	; 16
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <__stack+0x1a1>
    229c:	20 e1       	ldi	r18, 0x10	; 16
    229e:	32 e0       	ldi	r19, 0x02	; 2
    22a0:	f8 01       	movw	r30, r16
    22a2:	b7 fe       	sbrs	r11, 7
    22a4:	07 c0       	rjmp	.+14     	; 0x22b4 <__stack+0x1b5>
    22a6:	60 81       	ld	r22, Z
    22a8:	71 81       	ldd	r23, Z+1	; 0x01
    22aa:	82 81       	ldd	r24, Z+2	; 0x02
    22ac:	93 81       	ldd	r25, Z+3	; 0x03
    22ae:	0c 5f       	subi	r16, 0xFC	; 252
    22b0:	1f 4f       	sbci	r17, 0xFF	; 255
    22b2:	06 c0       	rjmp	.+12     	; 0x22c0 <__stack+0x1c1>
    22b4:	60 81       	ld	r22, Z
    22b6:	71 81       	ldd	r23, Z+1	; 0x01
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	0e 5f       	subi	r16, 0xFE	; 254
    22be:	1f 4f       	sbci	r17, 0xFF	; 255
    22c0:	a3 01       	movw	r20, r6
    22c2:	f1 d0       	rcall	.+482    	; 0x24a6 <__ultoa_invert>
    22c4:	88 2e       	mov	r8, r24
    22c6:	86 18       	sub	r8, r6
    22c8:	fb 2d       	mov	r31, r11
    22ca:	ff 77       	andi	r31, 0x7F	; 127
    22cc:	3f 2e       	mov	r3, r31
    22ce:	36 fe       	sbrs	r3, 6
    22d0:	0d c0       	rjmp	.+26     	; 0x22ec <__stack+0x1ed>
    22d2:	23 2d       	mov	r18, r3
    22d4:	2e 7f       	andi	r18, 0xFE	; 254
    22d6:	a2 2e       	mov	r10, r18
    22d8:	89 14       	cp	r8, r9
    22da:	58 f4       	brcc	.+22     	; 0x22f2 <__stack+0x1f3>
    22dc:	34 fe       	sbrs	r3, 4
    22de:	0b c0       	rjmp	.+22     	; 0x22f6 <__stack+0x1f7>
    22e0:	32 fc       	sbrc	r3, 2
    22e2:	09 c0       	rjmp	.+18     	; 0x22f6 <__stack+0x1f7>
    22e4:	83 2d       	mov	r24, r3
    22e6:	8e 7e       	andi	r24, 0xEE	; 238
    22e8:	a8 2e       	mov	r10, r24
    22ea:	05 c0       	rjmp	.+10     	; 0x22f6 <__stack+0x1f7>
    22ec:	b8 2c       	mov	r11, r8
    22ee:	a3 2c       	mov	r10, r3
    22f0:	03 c0       	rjmp	.+6      	; 0x22f8 <__stack+0x1f9>
    22f2:	b8 2c       	mov	r11, r8
    22f4:	01 c0       	rjmp	.+2      	; 0x22f8 <__stack+0x1f9>
    22f6:	b9 2c       	mov	r11, r9
    22f8:	a4 fe       	sbrs	r10, 4
    22fa:	0f c0       	rjmp	.+30     	; 0x231a <__stack+0x21b>
    22fc:	fe 01       	movw	r30, r28
    22fe:	e8 0d       	add	r30, r8
    2300:	f1 1d       	adc	r31, r1
    2302:	80 81       	ld	r24, Z
    2304:	80 33       	cpi	r24, 0x30	; 48
    2306:	21 f4       	brne	.+8      	; 0x2310 <__stack+0x211>
    2308:	9a 2d       	mov	r25, r10
    230a:	99 7e       	andi	r25, 0xE9	; 233
    230c:	a9 2e       	mov	r10, r25
    230e:	09 c0       	rjmp	.+18     	; 0x2322 <__stack+0x223>
    2310:	a2 fe       	sbrs	r10, 2
    2312:	06 c0       	rjmp	.+12     	; 0x2320 <__stack+0x221>
    2314:	b3 94       	inc	r11
    2316:	b3 94       	inc	r11
    2318:	04 c0       	rjmp	.+8      	; 0x2322 <__stack+0x223>
    231a:	8a 2d       	mov	r24, r10
    231c:	86 78       	andi	r24, 0x86	; 134
    231e:	09 f0       	breq	.+2      	; 0x2322 <__stack+0x223>
    2320:	b3 94       	inc	r11
    2322:	a3 fc       	sbrc	r10, 3
    2324:	10 c0       	rjmp	.+32     	; 0x2346 <__stack+0x247>
    2326:	a0 fe       	sbrs	r10, 0
    2328:	06 c0       	rjmp	.+12     	; 0x2336 <__stack+0x237>
    232a:	b2 14       	cp	r11, r2
    232c:	80 f4       	brcc	.+32     	; 0x234e <__stack+0x24f>
    232e:	28 0c       	add	r2, r8
    2330:	92 2c       	mov	r9, r2
    2332:	9b 18       	sub	r9, r11
    2334:	0d c0       	rjmp	.+26     	; 0x2350 <__stack+0x251>
    2336:	b2 14       	cp	r11, r2
    2338:	58 f4       	brcc	.+22     	; 0x2350 <__stack+0x251>
    233a:	b6 01       	movw	r22, r12
    233c:	80 e2       	ldi	r24, 0x20	; 32
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	76 d0       	rcall	.+236    	; 0x242e <fputc>
    2342:	b3 94       	inc	r11
    2344:	f8 cf       	rjmp	.-16     	; 0x2336 <__stack+0x237>
    2346:	b2 14       	cp	r11, r2
    2348:	18 f4       	brcc	.+6      	; 0x2350 <__stack+0x251>
    234a:	2b 18       	sub	r2, r11
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <__stack+0x253>
    234e:	98 2c       	mov	r9, r8
    2350:	21 2c       	mov	r2, r1
    2352:	a4 fe       	sbrs	r10, 4
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <__stack+0x275>
    2356:	b6 01       	movw	r22, r12
    2358:	80 e3       	ldi	r24, 0x30	; 48
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	68 d0       	rcall	.+208    	; 0x242e <fputc>
    235e:	a2 fe       	sbrs	r10, 2
    2360:	16 c0       	rjmp	.+44     	; 0x238e <__stack+0x28f>
    2362:	a1 fc       	sbrc	r10, 1
    2364:	03 c0       	rjmp	.+6      	; 0x236c <__stack+0x26d>
    2366:	88 e7       	ldi	r24, 0x78	; 120
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <__stack+0x271>
    236c:	88 e5       	ldi	r24, 0x58	; 88
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	b6 01       	movw	r22, r12
    2372:	0c c0       	rjmp	.+24     	; 0x238c <__stack+0x28d>
    2374:	8a 2d       	mov	r24, r10
    2376:	86 78       	andi	r24, 0x86	; 134
    2378:	51 f0       	breq	.+20     	; 0x238e <__stack+0x28f>
    237a:	a1 fe       	sbrs	r10, 1
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <__stack+0x283>
    237e:	8b e2       	ldi	r24, 0x2B	; 43
    2380:	01 c0       	rjmp	.+2      	; 0x2384 <__stack+0x285>
    2382:	80 e2       	ldi	r24, 0x20	; 32
    2384:	a7 fc       	sbrc	r10, 7
    2386:	8d e2       	ldi	r24, 0x2D	; 45
    2388:	b6 01       	movw	r22, r12
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	50 d0       	rcall	.+160    	; 0x242e <fputc>
    238e:	89 14       	cp	r8, r9
    2390:	30 f4       	brcc	.+12     	; 0x239e <__stack+0x29f>
    2392:	b6 01       	movw	r22, r12
    2394:	80 e3       	ldi	r24, 0x30	; 48
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	4a d0       	rcall	.+148    	; 0x242e <fputc>
    239a:	9a 94       	dec	r9
    239c:	f8 cf       	rjmp	.-16     	; 0x238e <__stack+0x28f>
    239e:	8a 94       	dec	r8
    23a0:	f3 01       	movw	r30, r6
    23a2:	e8 0d       	add	r30, r8
    23a4:	f1 1d       	adc	r31, r1
    23a6:	80 81       	ld	r24, Z
    23a8:	b6 01       	movw	r22, r12
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	40 d0       	rcall	.+128    	; 0x242e <fputc>
    23ae:	81 10       	cpse	r8, r1
    23b0:	f6 cf       	rjmp	.-20     	; 0x239e <__stack+0x29f>
    23b2:	22 20       	and	r2, r2
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <__stack+0x2b9>
    23b6:	4e ce       	rjmp	.-868    	; 0x2054 <vfprintf+0x4c>
    23b8:	b6 01       	movw	r22, r12
    23ba:	80 e2       	ldi	r24, 0x20	; 32
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	37 d0       	rcall	.+110    	; 0x242e <fputc>
    23c0:	2a 94       	dec	r2
    23c2:	f7 cf       	rjmp	.-18     	; 0x23b2 <__stack+0x2b3>
    23c4:	f6 01       	movw	r30, r12
    23c6:	86 81       	ldd	r24, Z+6	; 0x06
    23c8:	97 81       	ldd	r25, Z+7	; 0x07
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <__stack+0x2d1>
    23cc:	8f ef       	ldi	r24, 0xFF	; 255
    23ce:	9f ef       	ldi	r25, 0xFF	; 255
    23d0:	2b 96       	adiw	r28, 0x0b	; 11
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
    23e4:	ff 90       	pop	r15
    23e6:	ef 90       	pop	r14
    23e8:	df 90       	pop	r13
    23ea:	cf 90       	pop	r12
    23ec:	bf 90       	pop	r11
    23ee:	af 90       	pop	r10
    23f0:	9f 90       	pop	r9
    23f2:	8f 90       	pop	r8
    23f4:	7f 90       	pop	r7
    23f6:	6f 90       	pop	r6
    23f8:	5f 90       	pop	r5
    23fa:	4f 90       	pop	r4
    23fc:	3f 90       	pop	r3
    23fe:	2f 90       	pop	r2
    2400:	08 95       	ret

00002402 <strnlen_P>:
    2402:	fc 01       	movw	r30, r24
    2404:	05 90       	lpm	r0, Z+
    2406:	61 50       	subi	r22, 0x01	; 1
    2408:	70 40       	sbci	r23, 0x00	; 0
    240a:	01 10       	cpse	r0, r1
    240c:	d8 f7       	brcc	.-10     	; 0x2404 <strnlen_P+0x2>
    240e:	80 95       	com	r24
    2410:	90 95       	com	r25
    2412:	8e 0f       	add	r24, r30
    2414:	9f 1f       	adc	r25, r31
    2416:	08 95       	ret

00002418 <strnlen>:
    2418:	fc 01       	movw	r30, r24
    241a:	61 50       	subi	r22, 0x01	; 1
    241c:	70 40       	sbci	r23, 0x00	; 0
    241e:	01 90       	ld	r0, Z+
    2420:	01 10       	cpse	r0, r1
    2422:	d8 f7       	brcc	.-10     	; 0x241a <strnlen+0x2>
    2424:	80 95       	com	r24
    2426:	90 95       	com	r25
    2428:	8e 0f       	add	r24, r30
    242a:	9f 1f       	adc	r25, r31
    242c:	08 95       	ret

0000242e <fputc>:
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	fb 01       	movw	r30, r22
    2438:	23 81       	ldd	r18, Z+3	; 0x03
    243a:	21 fd       	sbrc	r18, 1
    243c:	03 c0       	rjmp	.+6      	; 0x2444 <fputc+0x16>
    243e:	8f ef       	ldi	r24, 0xFF	; 255
    2440:	9f ef       	ldi	r25, 0xFF	; 255
    2442:	2c c0       	rjmp	.+88     	; 0x249c <fputc+0x6e>
    2444:	22 ff       	sbrs	r18, 2
    2446:	16 c0       	rjmp	.+44     	; 0x2474 <fputc+0x46>
    2448:	46 81       	ldd	r20, Z+6	; 0x06
    244a:	57 81       	ldd	r21, Z+7	; 0x07
    244c:	24 81       	ldd	r18, Z+4	; 0x04
    244e:	35 81       	ldd	r19, Z+5	; 0x05
    2450:	42 17       	cp	r20, r18
    2452:	53 07       	cpc	r21, r19
    2454:	44 f4       	brge	.+16     	; 0x2466 <fputc+0x38>
    2456:	a0 81       	ld	r26, Z
    2458:	b1 81       	ldd	r27, Z+1	; 0x01
    245a:	9d 01       	movw	r18, r26
    245c:	2f 5f       	subi	r18, 0xFF	; 255
    245e:	3f 4f       	sbci	r19, 0xFF	; 255
    2460:	31 83       	std	Z+1, r19	; 0x01
    2462:	20 83       	st	Z, r18
    2464:	8c 93       	st	X, r24
    2466:	26 81       	ldd	r18, Z+6	; 0x06
    2468:	37 81       	ldd	r19, Z+7	; 0x07
    246a:	2f 5f       	subi	r18, 0xFF	; 255
    246c:	3f 4f       	sbci	r19, 0xFF	; 255
    246e:	37 83       	std	Z+7, r19	; 0x07
    2470:	26 83       	std	Z+6, r18	; 0x06
    2472:	14 c0       	rjmp	.+40     	; 0x249c <fputc+0x6e>
    2474:	8b 01       	movw	r16, r22
    2476:	ec 01       	movw	r28, r24
    2478:	fb 01       	movw	r30, r22
    247a:	00 84       	ldd	r0, Z+8	; 0x08
    247c:	f1 85       	ldd	r31, Z+9	; 0x09
    247e:	e0 2d       	mov	r30, r0
    2480:	09 95       	icall
    2482:	89 2b       	or	r24, r25
    2484:	e1 f6       	brne	.-72     	; 0x243e <fputc+0x10>
    2486:	d8 01       	movw	r26, r16
    2488:	16 96       	adiw	r26, 0x06	; 6
    248a:	8d 91       	ld	r24, X+
    248c:	9c 91       	ld	r25, X
    248e:	17 97       	sbiw	r26, 0x07	; 7
    2490:	01 96       	adiw	r24, 0x01	; 1
    2492:	17 96       	adiw	r26, 0x07	; 7
    2494:	9c 93       	st	X, r25
    2496:	8e 93       	st	-X, r24
    2498:	16 97       	sbiw	r26, 0x06	; 6
    249a:	ce 01       	movw	r24, r28
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	1f 91       	pop	r17
    24a2:	0f 91       	pop	r16
    24a4:	08 95       	ret

000024a6 <__ultoa_invert>:
    24a6:	fa 01       	movw	r30, r20
    24a8:	aa 27       	eor	r26, r26
    24aa:	28 30       	cpi	r18, 0x08	; 8
    24ac:	51 f1       	breq	.+84     	; 0x2502 <__ultoa_invert+0x5c>
    24ae:	20 31       	cpi	r18, 0x10	; 16
    24b0:	81 f1       	breq	.+96     	; 0x2512 <__ultoa_invert+0x6c>
    24b2:	e8 94       	clt
    24b4:	6f 93       	push	r22
    24b6:	6e 7f       	andi	r22, 0xFE	; 254
    24b8:	6e 5f       	subi	r22, 0xFE	; 254
    24ba:	7f 4f       	sbci	r23, 0xFF	; 255
    24bc:	8f 4f       	sbci	r24, 0xFF	; 255
    24be:	9f 4f       	sbci	r25, 0xFF	; 255
    24c0:	af 4f       	sbci	r26, 0xFF	; 255
    24c2:	b1 e0       	ldi	r27, 0x01	; 1
    24c4:	3e d0       	rcall	.+124    	; 0x2542 <__ultoa_invert+0x9c>
    24c6:	b4 e0       	ldi	r27, 0x04	; 4
    24c8:	3c d0       	rcall	.+120    	; 0x2542 <__ultoa_invert+0x9c>
    24ca:	67 0f       	add	r22, r23
    24cc:	78 1f       	adc	r23, r24
    24ce:	89 1f       	adc	r24, r25
    24d0:	9a 1f       	adc	r25, r26
    24d2:	a1 1d       	adc	r26, r1
    24d4:	68 0f       	add	r22, r24
    24d6:	79 1f       	adc	r23, r25
    24d8:	8a 1f       	adc	r24, r26
    24da:	91 1d       	adc	r25, r1
    24dc:	a1 1d       	adc	r26, r1
    24de:	6a 0f       	add	r22, r26
    24e0:	71 1d       	adc	r23, r1
    24e2:	81 1d       	adc	r24, r1
    24e4:	91 1d       	adc	r25, r1
    24e6:	a1 1d       	adc	r26, r1
    24e8:	20 d0       	rcall	.+64     	; 0x252a <__ultoa_invert+0x84>
    24ea:	09 f4       	brne	.+2      	; 0x24ee <__ultoa_invert+0x48>
    24ec:	68 94       	set
    24ee:	3f 91       	pop	r19
    24f0:	2a e0       	ldi	r18, 0x0A	; 10
    24f2:	26 9f       	mul	r18, r22
    24f4:	11 24       	eor	r1, r1
    24f6:	30 19       	sub	r19, r0
    24f8:	30 5d       	subi	r19, 0xD0	; 208
    24fa:	31 93       	st	Z+, r19
    24fc:	de f6       	brtc	.-74     	; 0x24b4 <__ultoa_invert+0xe>
    24fe:	cf 01       	movw	r24, r30
    2500:	08 95       	ret
    2502:	46 2f       	mov	r20, r22
    2504:	47 70       	andi	r20, 0x07	; 7
    2506:	40 5d       	subi	r20, 0xD0	; 208
    2508:	41 93       	st	Z+, r20
    250a:	b3 e0       	ldi	r27, 0x03	; 3
    250c:	0f d0       	rcall	.+30     	; 0x252c <__ultoa_invert+0x86>
    250e:	c9 f7       	brne	.-14     	; 0x2502 <__ultoa_invert+0x5c>
    2510:	f6 cf       	rjmp	.-20     	; 0x24fe <__ultoa_invert+0x58>
    2512:	46 2f       	mov	r20, r22
    2514:	4f 70       	andi	r20, 0x0F	; 15
    2516:	40 5d       	subi	r20, 0xD0	; 208
    2518:	4a 33       	cpi	r20, 0x3A	; 58
    251a:	18 f0       	brcs	.+6      	; 0x2522 <__ultoa_invert+0x7c>
    251c:	49 5d       	subi	r20, 0xD9	; 217
    251e:	31 fd       	sbrc	r19, 1
    2520:	40 52       	subi	r20, 0x20	; 32
    2522:	41 93       	st	Z+, r20
    2524:	02 d0       	rcall	.+4      	; 0x252a <__ultoa_invert+0x84>
    2526:	a9 f7       	brne	.-22     	; 0x2512 <__ultoa_invert+0x6c>
    2528:	ea cf       	rjmp	.-44     	; 0x24fe <__ultoa_invert+0x58>
    252a:	b4 e0       	ldi	r27, 0x04	; 4
    252c:	a6 95       	lsr	r26
    252e:	97 95       	ror	r25
    2530:	87 95       	ror	r24
    2532:	77 95       	ror	r23
    2534:	67 95       	ror	r22
    2536:	ba 95       	dec	r27
    2538:	c9 f7       	brne	.-14     	; 0x252c <__ultoa_invert+0x86>
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	61 05       	cpc	r22, r1
    253e:	71 05       	cpc	r23, r1
    2540:	08 95       	ret
    2542:	9b 01       	movw	r18, r22
    2544:	ac 01       	movw	r20, r24
    2546:	0a 2e       	mov	r0, r26
    2548:	06 94       	lsr	r0
    254a:	57 95       	ror	r21
    254c:	47 95       	ror	r20
    254e:	37 95       	ror	r19
    2550:	27 95       	ror	r18
    2552:	ba 95       	dec	r27
    2554:	c9 f7       	brne	.-14     	; 0x2548 <__ultoa_invert+0xa2>
    2556:	62 0f       	add	r22, r18
    2558:	73 1f       	adc	r23, r19
    255a:	84 1f       	adc	r24, r20
    255c:	95 1f       	adc	r25, r21
    255e:	a0 1d       	adc	r26, r0
    2560:	08 95       	ret

00002562 <_exit>:
    2562:	f8 94       	cli

00002564 <__stop_program>:
    2564:	ff cf       	rjmp	.-2      	; 0x2564 <__stop_program>
